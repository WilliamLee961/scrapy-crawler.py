https://www.reddit.com/r/Python/comments/1oalj6u/for_those_who_miss_terminal_animations/,For those who miss terminal animations...,DaSettingsPNGN,1760866934.0,6,0,Ê†áÈ¢ò: For those who miss terminal animations...,Ê†áÈ¢ò: For those who miss terminal animations...,2025-10-19T21:20:12.854861
https://www.reddit.com/r/Python/comments/1oah08y/trio_should_i_move_to_a_more_popular_async/,Trio - Should I move to a more popular async framework?,IncreaseMelodic9809,1760849798.0,11,0,Ê†áÈ¢ò: Trio - Should I move to a more popular async framework?,Ê†áÈ¢ò: Trio - Should I move to a more popular async framework?,2025-10-19T21:20:12.854912
https://www.reddit.com/r/Python/comments/1oael9w/i_am_not_able_to_start_with_gui_in_python/,I am not able to start with GUI in Python.,ComplaintGlass2005,1760841758.0,0,0,Ê†áÈ¢ò: I am not able to start with GUI in Python.,Ê†áÈ¢ò: I am not able to start with GUI in Python.,2025-10-19T21:20:12.854938
https://www.reddit.com/r/Python/comments/1oad5wv/skylos_expanded_capabilities/,Skylos- Expanded capabilities,papersashimi,1760837331.0,5,0,Ê†áÈ¢ò: Skylos- Expanded capabilities,Ê†áÈ¢ò: Skylos- Expanded capabilities,2025-10-19T21:20:12.854957
https://www.reddit.com/r/Python/comments/1oabdtm/sunday_daily_thread_whats_everyone_working_on/,Sunday Daily Thread: What's everyone working on this week?,AutoModerator,1760832032.0,1,0,Ê†áÈ¢ò: Sunday Daily Thread: What's everyone working on this week?,Ê†áÈ¢ò: Sunday Daily Thread: What's everyone working on this week?,2025-10-19T21:20:12.854972
https://www.reddit.com/r/Python/comments/1oaaddg/google_tasks_tui/,Google Tasks TUI,Cow-Primary,1760829210.0,23,0,Ê†áÈ¢ò: Google Tasks TUI,Ê†áÈ¢ò: Google Tasks TUI,2025-10-19T21:20:12.854988
https://www.reddit.com/r/Python/comments/1oa9e3c/showcase_i_wrote_a_github_action_to_summarize/,Showcase: I wrote a GitHub Action to Summarize uv.lock Changes,burlyginger,1760826583.0,41,0,Ê†áÈ¢ò: Showcase: I wrote a GitHub Action to Summarize uv.lock Changes,Ê†áÈ¢ò: Showcase: I wrote a GitHub Action to Summarize uv.lock Changes,2025-10-19T21:20:12.855001
https://www.reddit.com/r/Python/comments/1oa8cwj/new_package_gnosisdispatch/,New package: gnosis-dispatch,DavidMertz,1760823932.0,13,0,Ê†áÈ¢ò: New package: gnosis-dispatch,Ê†áÈ¢ò: New package: gnosis-dispatch,2025-10-19T21:20:12.855016
https://www.reddit.com/r/Python/comments/1oa4r54/saving_memory_with_polars_over_pandas/,Saving Memory with Polars (over Pandas),paltman94,1760815382.0,68,0,Ê†áÈ¢ò: Saving Memory with Polars (over Pandas),Ê†áÈ¢ò: Saving Memory with Polars (over Pandas),2025-10-19T21:20:12.855028
https://www.reddit.com/r/Python/comments/1oa3n4x/hot_take_list_comprehensions_are_almost_always_a/,Hot take: list comprehensions are almost always a bad idea,Quirky_Decision_2827,1760812849.0,0,0,Ê†áÈ¢ò: Hot take: list comprehensions are almost always a bad idea,Ê†áÈ¢ò: Hot take: list comprehensions are almost always a bad idea,2025-10-19T21:20:12.855043
https://www.reddit.com/r/Python/comments/1oalj6u/for_those_who_miss_terminal_animations/,For those who miss terminal animations...,DaSettingsPNGN,1760866934.0,7,0,Ê†áÈ¢ò: For those who miss terminal animations...,Ê†áÈ¢ò: For those who miss terminal animations...,2025-10-19T21:20:44.948333
https://www.reddit.com/r/Python/comments/1oah08y/trio_should_i_move_to_a_more_popular_async/,Trio - Should I move to a more popular async framework?,IncreaseMelodic9809,1760849798.0,11,0,Ê†áÈ¢ò: Trio - Should I move to a more popular async framework?,Ê†áÈ¢ò: Trio - Should I move to a more popular async framework?,2025-10-19T21:20:44.948395
https://www.reddit.com/r/Python/comments/1oael9w/i_am_not_able_to_start_with_gui_in_python/,I am not able to start with GUI in Python.,ComplaintGlass2005,1760841758.0,0,0,Ê†áÈ¢ò: I am not able to start with GUI in Python.,Ê†áÈ¢ò: I am not able to start with GUI in Python.,2025-10-19T21:20:44.948431
https://www.reddit.com/r/Python/comments/1oad5wv/skylos_expanded_capabilities/,Skylos- Expanded capabilities,papersashimi,1760837331.0,3,0,Ê†áÈ¢ò: Skylos- Expanded capabilities,Ê†áÈ¢ò: Skylos- Expanded capabilities,2025-10-19T21:20:44.948462
https://www.reddit.com/r/Python/comments/1oabdtm/sunday_daily_thread_whats_everyone_working_on/,Sunday Daily Thread: What's everyone working on this week?,AutoModerator,1760832032.0,1,0,Ê†áÈ¢ò: Sunday Daily Thread: What's everyone working on this week?,Ê†áÈ¢ò: Sunday Daily Thread: What's everyone working on this week?,2025-10-19T21:20:44.948488
https://www.reddit.com/r/Python/comments/1oaaddg/google_tasks_tui/,Google Tasks TUI,Cow-Primary,1760829210.0,23,0,Ê†áÈ¢ò: Google Tasks TUI,Ê†áÈ¢ò: Google Tasks TUI,2025-10-19T21:20:44.948515
https://www.reddit.com/r/Python/comments/1oa9e3c/showcase_i_wrote_a_github_action_to_summarize/,Showcase: I wrote a GitHub Action to Summarize uv.lock Changes,burlyginger,1760826583.0,41,0,Ê†áÈ¢ò: Showcase: I wrote a GitHub Action to Summarize uv.lock Changes,Ê†áÈ¢ò: Showcase: I wrote a GitHub Action to Summarize uv.lock Changes,2025-10-19T21:20:44.948539
https://www.reddit.com/r/Python/comments/1oa8cwj/new_package_gnosisdispatch/,New package: gnosis-dispatch,DavidMertz,1760823932.0,14,0,Ê†áÈ¢ò: New package: gnosis-dispatch,Ê†áÈ¢ò: New package: gnosis-dispatch,2025-10-19T21:20:44.948571
https://www.reddit.com/r/Python/comments/1oa4r54/saving_memory_with_polars_over_pandas/,Saving Memory with Polars (over Pandas),paltman94,1760815382.0,68,0,Ê†áÈ¢ò: Saving Memory with Polars (over Pandas),Ê†áÈ¢ò: Saving Memory with Polars (over Pandas),2025-10-19T21:20:44.948595
https://www.reddit.com/r/Python/comments/1oa3n4x/hot_take_list_comprehensions_are_almost_always_a/,Hot take: list comprehensions are almost always a bad idea,Quirky_Decision_2827,1760812849.0,0,0,Ê†áÈ¢ò: Hot take: list comprehensions are almost always a bad idea,Ê†áÈ¢ò: Hot take: list comprehensions are almost always a bad idea,2025-10-19T21:20:44.948639
https://www.reddit.com/r/Python/comments/1oaaddg/google_tasks_tui/,Google Tasks TUI,Cow-Primary,1760829210.0,23,0,Ê†áÈ¢ò: Google Tasks TUI,Ê†áÈ¢ò: Google Tasks TUI,2025-10-19T21:21:12.957283
https://www.reddit.com/r/Python/comments/1oa9e3c/showcase_i_wrote_a_github_action_to_summarize/,Showcase: I wrote a GitHub Action to Summarize uv.lock Changes,burlyginger,1760826583.0,41,0,Ê†áÈ¢ò: Showcase: I wrote a GitHub Action to Summarize uv.lock Changes,Ê†áÈ¢ò: Showcase: I wrote a GitHub Action to Summarize uv.lock Changes,2025-10-19T21:21:12.957336
https://www.reddit.com/r/Python/comments/1oa8cwj/new_package_gnosisdispatch/,New package: gnosis-dispatch,DavidMertz,1760823932.0,14,0,Ê†áÈ¢ò: New package: gnosis-dispatch,Ê†áÈ¢ò: New package: gnosis-dispatch,2025-10-19T21:21:12.957373
https://www.reddit.com/r/Python/comments/1oa4r54/saving_memory_with_polars_over_pandas/,Saving Memory with Polars (over Pandas),paltman94,1760815382.0,68,0,Ê†áÈ¢ò: Saving Memory with Polars (over Pandas),Ê†áÈ¢ò: Saving Memory with Polars (over Pandas),2025-10-19T21:21:12.957398
https://www.reddit.com/r/Python/comments/1oa3n4x/hot_take_list_comprehensions_are_almost_always_a/,Hot take: list comprehensions are almost always a bad idea,Quirky_Decision_2827,1760812849.0,0,0,Ê†áÈ¢ò: Hot take: list comprehensions are almost always a bad idea,Ê†áÈ¢ò: Hot take: list comprehensions are almost always a bad idea,2025-10-19T21:21:12.957422
1obxzya,https://www.reddit.com/r/Python/comments/1obxzya/tuesday_daily_thread_advanced_questions/,Tuesday Daily Thread: Advanced questions,AutoModerator,2025-10-21 08:00:30,1,0,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about ...","# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",2025-10-21T08:04:47.718702
1obrz11,https://www.reddit.com/r/Python/comments/1obrz11/assemblytominecraftcommandblockcompiler_python/,Assembly-to-Minecraft-Command-Block-Compiler (Python) ‚Äî updated ‚Äî testers & contributors wanted,bowser04410,2025-10-21 03:57:47,4,0,"¬†I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedba...","I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedback, and contributors. Repo:¬†[https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler](https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler)

What My Project Does:

* Parses a tiny assembly-style language (labels, arithmetic, branches, simple I/O) and emits Minecraft command sequences tailored for command blocks.
* Produces low-level, inspectable output so you can see how program logic maps to in-game command-block logic.
* Implemented in Python for readability and easy contribution.

Target Audience:

* Minecraft command-block creators who want to run low-level programs without mods.
* Hobbyist compiler writers and learners looking for a compact Python codegen example.
* Contributors interested in parsing, code generation, testing strategies, or command optimization.
* This is an educational/hobby tool for small demos and experiments ‚Äî not a production compiler for large-scale programs.

Comparison (how it differs from alternatives):

* Assembly-focused: unlike high-level language‚ÜíMinecraft tools, it targets an assembly-like input so outputs are low-level and easy to debug in command blocks.
* Python-first and lightweight: prioritizes clarity and contributor-friendliness over performance.
* Command-block oriented: designed to work with vanilla in-game command blocks (does not target datapacks or mods).

How to help:

* Test: run examples, try outputs in a world, and note Minecraft version and exact steps when something fails.
* Report: open issues with minimal reproduction files and steps.
* Contribute: PRs welcome for bug fixes, examples, optimizations, docs, or tests ‚Äî look for good-first-issue.",2025-10-21T08:04:47.718815
1obqtmz,https://www.reddit.com/r/Python/comments/1obqtmz/has_any_library_emerged_as_the_replacement_for/,Has any library emerged as the replacement for Poliastro?,KerPop42,2025-10-21 03:15:23,2,1,"I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-...","I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-go. Even if you restrict yourself to 3.11 you *also* have to go back to pip <24.1 because of how some package requirements are written. I've looked around and can't find any other orbital dynamics libraries that are more than personal projects. Is the field just dead in python?",2025-10-21T08:04:47.718889
1obprx2,https://www.reddit.com/r/Python/comments/1obprx2/building_an_opensource_observability_tool_for/,Building an open-source observability tool for multi-agent systems - looking for feedback,Standard_Career_8603,2025-10-21 02:35:45,5,4,"I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-sour...","I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-source observability tool.   
  
**What it does**:  
\- Tracks information flow between agents   
\- Shows which tools are being called with what parameters   
\- Monitors how prompt changes affect agent behavior   
\- Works in both development and production   
  
**The gap I'm trying to fill**: Existing tools (LangSmith, LangFuse, AgentOps) are great at LLM observability (tokens, costs, latency), but I feel like they don't help much with multi-agent coordination. They show you **what** happened but not **why** agents failed to coordinate.   
  
  
**Looking for feedback**:  
1. Have you built multi-agent systems? What do you use for debugging?   
2. Does this solve a real problem or am I overengineering?   
3. What features would actually make this useful for you? Still early days, but happy to share the repo if folks are interested.",2025-10-21T08:04:47.718917
1obpjnf,https://www.reddit.com/r/Python/comments/1obpjnf/i_built_a_tool_that_runs_your_python_function_on/,i built a tool that runs your python function on 10k vms in parallel with one line of code.,Ok_Post_149,2025-10-21 02:25:33,3,6,"# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to ...","# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to hand it over to DevOps, the backlog would grow, and overall throughput would tank.

So I built **Burla**, the simplest cluster compute software that lets even Python beginners run code on massive clusters in the cloud. It‚Äôs one function with two parameters: the function and the inputs. You can bring your own Docker image, set hardware requirements, and run jobs as background tasks so you can fire and forget. Responses are fast, and you can call a million simple functions in just a few seconds.

Burla is built for embarrassingly parallel workloads like preprocessing data, hyperparameter tuning, and batch inference.

# Target Audience

Engineers, data scientists, and analysts who want to scale their code in production or research environments without dealing with infrastructure.

# Comparison

Unlike Ray or Dask, Burla doesn‚Äôt require cluster setup, orchestration, or YAML configs. It‚Äôs just:

    from burla import remote_parallel_map
    remote_parallel_map(func, inputs)
    

That‚Äôs it. It automatically handles distribution, retries, logging, and scaling across up to 10,000 VMs.

# Open Source & Free Credits

Burla is open source, and I‚Äôm improving the installation process. I also created managed versions for testing. If you want to try it, I‚Äôll cover 1,000 CPU hours and 100 GPU hours. Email me at [joe@burla.dev]() if interested.

Here‚Äôs a short intro video:  
[https://www.youtube.com/watch?v=9d22y\_kWjyE](https://www.youtube.com/watch?v=9d22y_kWjyE)

GitHub ‚Üí¬†[https://github.com/Burla-Cloud/burla](https://github.com/Burla-Cloud/burla)  
Docs ‚Üí¬†[https://docs.burla.dev](https://docs.burla.dev/)",2025-10-21T08:04:47.718955
1oborpj,https://www.reddit.com/r/Python/comments/1oborpj/i_made_a_python_bot_that_turns_your_text_images/,I made a Python bot that turns your text & images into diagrams right in Telegram.,No_Mongoose_8139,2025-10-21 01:51:22,0,5,"https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project ...","https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project structure, a mind map, or just explain a concept. Every time, I had to open heavy editors like Miro or Figma, which felt like overkill.

So, I decided to build a tool that lives right inside the app I use for communication all day: Telegram.

I'm excited to share my side project: **Diagrammer Bot**. It's a simple yet powerful bot in Python that lets you create diagrams on the fly.

**Here are the key features:**
*   **Text & Image Nodes:** You can create blocks not just from text, but from any image you send.
*   **Full Editing:** Create, connect, edit, and delete both nodes and edges.
*   **Project System:** Save your diagrams with custom names, load them later, or start new ones.
*   **Themes & Export:** Switch between a sleek dark mode and a clean light mode. Export your final diagram as a high-quality PNG.
*   **Open-Source:** The entire project is available on GitHub!

**Tech Stack:** Python, `python-telegram-bot`, `Graphviz` for rendering, and `Pillow` for watermarking.

I would be incredibly grateful for any feedback, feature ideas, or bug reports. And of course, a star ‚≠ê on GitHub would make my day!

*   **Try the bot here:** [https://t.me/diagrammer_robot](https://t.me/diagrammer_robot)
*   **Check out the code on GitHub:** [https://github.com/Lixher/Diagrammer-bot](https://github.com/Lixher/Diagrammer-Bot)",2025-10-21T08:04:47.720207
1oborib,https://www.reddit.com/r/Python/comments/1oborib/i_built_a_persistent_kv_store_in_pure_python/,I built a Persistent KV Store in Pure Python,vollhard-natta,2025-10-21 01:51:07,24,1,"Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been work...","Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been working on for the past few months. It is a lightweight, persistent key-value storage engine in Python, built from scratch to understand and implement the Log-Structured Merge-tree (LSM-tree) architecture. The project, which is fully open-source, is explicitly optimized for write-heavy workloads. 



# Core Architecture:

The engine implements the three fundamental LSM components: the **Write Ahead Log (WAL)** for durability, an in-memory **Memtable** (using `SortedDict` for sorted writes), and immutable persistent **SSTables (Sorted String Tables)**.

Some features that I'm proud of:

* **Async Compaction**: Merging and compaction are handled by a **separate background worker thread**. The process itself takes a hybrid approach.
* **Client/Server Model**: The entire storage engine runs behind a **FastAPI server**. This allows multiple clients to connect via REST APIs or the included CLI tool.
* **Efficient Range Queries**: Added full support for range queries from `start_key` to `end_key`. This is achieved via a memory-efficient **k-way merge iterator** that combines results from the Memtable and all SSTables. The FastAPI server delivers the results using a `StreamingResponse` to prevent memory exhaustion for large result sets.
* **Bloom Filter**: Implemented a **Bloom Filter** for each SSTable to drastically reduce disk I/O by confirming that a key definitely does not exist before attempting a disk seek.
* **Binary Storage**: SSTables now use **Msgpack binary format** instead of JSON for smaller file sizes and reduced CPU load during serialization/deserialization.

My favourite part of the project is that I actually got to see a practical implementation of [Merge Sorted Arrays - GeeksforGeeks](https://www.geeksforgeeks.org/dsa/merge-k-sorted-arrays/). This is a pretty popular interview question and to see DSA being actually implemented is a crazy moment.

# Get Started

    pip install lsm_storage_engine_key_value_store

**Usage via CLI/Server:**

1. **Terminal 1 (Server):** `lsm-server`
2. **Terminal 2 (Client):** `lsm-cli` (Follow the CLI help for commands).

# Looking for Feedback

I'd love to hear your thoughts about this implementation and how I can make it better and what features I can add in later versions. Ideas and constructive criticism are always welcome. I'm also looking for contributors, if anyone is interested, please feel free to PM and we can discuss.

Repo link: [Shashank1985/storage-engine](https://github.com/Shashank1985/storage-engine)  
Thanks!!",2025-10-21T08:04:47.720279
1obo3rg,https://www.reddit.com/r/Python/comments/1obo3rg/kryypto_an_open_source_python_text_editor/,Kryypto an open source python text editor.,SxxVe,2025-10-21 01:21:30,3,5,"Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
*...","Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
* Full Keyboard Support ‚Äì no need for the mouse, every feature is accessible via hotkeys
* Discord presence
* Live MarkDown Preview
* Session Restore
* Custom Styling
   * `config\configuration.cfg` for editor settings
   * CSS for theme and style customization
* Editing Tools
   * Find text in file
   * Jump to line
   * Adjustable cursor (color & width)
   * Configurable animations (types & duration)
* Git & GitHub Integration
   * View total commits
   * See last commit message & date
   * Track file changes directly inside the editor
* Productivity Features
   * Autocompleter
   * Builtin Terminal
   * Docstring panel (hover to see function/class docstring)
   * Tab-based file switching
   * Bookmarking lines
   * Custom title bar
* Syntax Highlighting for
   * Python
   * CSS
   * JSON
   * Config files
   * Markdown

Target Audience

* Developers who prefer keyboard-driven workflows (no mouse required)
* Users looking for a lightweight alternative to heavier IDEs
* People who want to customize their editor with CSS and configuration settings
* Anyone experimenting with Python-based editors or open-source text editing tools

# Comparison:

* Lightweight ‚Äì minimal overhead, focused on speed
* Highly customizable ‚Äì styling via CSS and config files
* Keyboard-centric ‚Äì designed to be fully usable without a mouse

  
github repo: [https://github.com/NaturalCapsule/Kryypto](https://github.com/NaturalCapsule/Kryypto)

  
website: [https://naturalcapsule.github.io/Kryypto/](https://naturalcapsule.github.io/Kryypto/)",2025-10-21T08:04:47.720354
1obo0ze,https://www.reddit.com/r/Python/comments/1obo0ze/forgetting_python/,Forgetting Python,Ashamed-Society-2875,2025-10-21 01:17:52,0,4,"I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping f...","I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping for college exams , now when i come back to python it feels i have lost my level and my touch i feel like fkn loser , all those hrs spent in 8th grade for nothing , i forgot a lot , is it common or just me???",2025-10-21T08:04:47.720412
1obmzbm,https://www.reddit.com/r/Python/comments/1obmzbm/functoweb_is_now_much_better_thanks_for_the/,func-to-web is now much better ‚Äì Thanks for the feedback!,drboom9,2025-10-21 00:27:41,8,0,"15 days ago I shared func-to-web here and got amazing feedback (150+ upvotes, thank you!). Since then, I've been working hard on the suggestions and a...","15 days ago I shared func-to-web here and got amazing feedback (150+ upvotes, thank you!). Since then, I've been working hard on the suggestions and added some major features.

**What it does (quick reminder):**
Turn any Python function into a web UI with zero boilerplate:

```python
from func_to_web import run

def divide(a: int, b: int):
    return a / b

run(divide)  # Web form at localhost:8000
```

**Major updates since v0.1:**

**Dynamic Lists** ‚Äì Add/remove items with advanced validation:
```python
def process_data(
    # Dynamic lists with add/remove buttons
    images: list[ImageFile],                      # Multiple file uploads
    
    # Dual validation: list size AND individual items
    scores: Annotated[
        list[Annotated[int, Field(ge=0, le=100)]], 
        Field(min_length=3, max_length=10)
    ],  # 3-10 items required, each 0-100
    
    # Optional fields with toggle switches
    notes: str | None = None,                     # Optional text
    tags: list[str] | None = None                 # Optional list
):
    return FileResponse(generate_pdf(), ""report.pdf"")  # Auto-download
```

**High-Performance File Handling** ‚Äì Optimized streaming for large files:
- **Upload**: Real-time progress bars, 8MB chunks, handles GB+ files
- **Download**: Return `FileResponse(data, filename)` for auto-downloads
- **Performance**: ~237 MB/s localhost, ~115 MB/s over Gigabit Ethernet
- **Memory efficient**: Constant usage regardless of file size
- **Any format**: PDF, Excel, ZIP, images, binary data

**Optional Fields** ‚Äì `Type | None` creates toggle switches:
- Fields with defaults start enabled, without defaults start disabled
- Explicit control: `Type | OptionalEnabled/OptionalDisabled`
- Works with all types, constraints, and lists

**Dynamic Dropdowns** ‚Äì Runtime-generated options:
```python
def get_themes(): return fetch_from_database()

def configure(theme: Literal[get_themes]): pass  # Fresh options each request
```

**Rich Output Support**:
- **PIL Images**: Auto-displayed in browser
- **Matplotlib plots**: Rendered as PNG
- **File downloads**: Single or multiple files with streaming
- **JSON/text**: Formatted with copy-to-clipboard

**UX Improvements**:
- Dark mode with theme persistence
- Keyboard shortcuts (Ctrl+Enter to submit)
- Auto-focus first field
- Toast notifications
- Upload progress with speed indicators

**Current stats:**
- 180+ GitHub stars (The chinese community is sharing it too!)
- 454 unit tests
- Published on PyPI: `pip install func-to-web`
- 20+ runnable examples
- Used daily for internal tools at multiple companies

**Other improvements:**
- **Modular architecture**: Code separated by responsibilities (analysis, validation, form building...)
- **Comprehensive documentation**: Every function and class documented
- **Detailed changelog**: Track all improvements and breaking changes

I've tried to make this as professional and production-ready as possible while keeping the simple API.

Still focused on internal tools and rapid prototyping, not replacing proper web frameworks.

GitHub: https://github.com/offerrall/FuncToWeb

The community feedback really shaped these improvements. Thank you again! Keep the suggestions coming.",2025-10-21T08:04:47.720434
1obxzya,https://www.reddit.com/r/Python/comments/1obxzya/tuesday_daily_thread_advanced_questions/,Tuesday Daily Thread: Advanced questions,AutoModerator,2025-10-21 08:00:30,1,0,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about ...","# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",2025-10-21T08:05:06.140874
1obrz11,https://www.reddit.com/r/Python/comments/1obrz11/assemblytominecraftcommandblockcompiler_python/,Assembly-to-Minecraft-Command-Block-Compiler (Python) ‚Äî updated ‚Äî testers & contributors wanted,bowser04410,2025-10-21 03:57:47,2,0,"¬†I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedba...","I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedback, and contributors. Repo:¬†[https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler](https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler)

What My Project Does:

* Parses a tiny assembly-style language (labels, arithmetic, branches, simple I/O) and emits Minecraft command sequences tailored for command blocks.
* Produces low-level, inspectable output so you can see how program logic maps to in-game command-block logic.
* Implemented in Python for readability and easy contribution.

Target Audience:

* Minecraft command-block creators who want to run low-level programs without mods.
* Hobbyist compiler writers and learners looking for a compact Python codegen example.
* Contributors interested in parsing, code generation, testing strategies, or command optimization.
* This is an educational/hobby tool for small demos and experiments ‚Äî not a production compiler for large-scale programs.

Comparison (how it differs from alternatives):

* Assembly-focused: unlike high-level language‚ÜíMinecraft tools, it targets an assembly-like input so outputs are low-level and easy to debug in command blocks.
* Python-first and lightweight: prioritizes clarity and contributor-friendliness over performance.
* Command-block oriented: designed to work with vanilla in-game command blocks (does not target datapacks or mods).

How to help:

* Test: run examples, try outputs in a world, and note Minecraft version and exact steps when something fails.
* Report: open issues with minimal reproduction files and steps.
* Contribute: PRs welcome for bug fixes, examples, optimizations, docs, or tests ‚Äî look for good-first-issue.",2025-10-21T08:05:06.140963
1obqtmz,https://www.reddit.com/r/Python/comments/1obqtmz/has_any_library_emerged_as_the_replacement_for/,Has any library emerged as the replacement for Poliastro?,KerPop42,2025-10-21 03:15:23,2,1,"I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-...","I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-go. Even if you restrict yourself to 3.11 you *also* have to go back to pip <24.1 because of how some package requirements are written. I've looked around and can't find any other orbital dynamics libraries that are more than personal projects. Is the field just dead in python?",2025-10-21T08:05:06.141032
1obprx2,https://www.reddit.com/r/Python/comments/1obprx2/building_an_opensource_observability_tool_for/,Building an open-source observability tool for multi-agent systems - looking for feedback,Standard_Career_8603,2025-10-21 02:35:45,3,4,"I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-sour...","I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-source observability tool.   
  
**What it does**:  
\- Tracks information flow between agents   
\- Shows which tools are being called with what parameters   
\- Monitors how prompt changes affect agent behavior   
\- Works in both development and production   
  
**The gap I'm trying to fill**: Existing tools (LangSmith, LangFuse, AgentOps) are great at LLM observability (tokens, costs, latency), but I feel like they don't help much with multi-agent coordination. They show you **what** happened but not **why** agents failed to coordinate.   
  
  
**Looking for feedback**:  
1. Have you built multi-agent systems? What do you use for debugging?   
2. Does this solve a real problem or am I overengineering?   
3. What features would actually make this useful for you? Still early days, but happy to share the repo if folks are interested.",2025-10-21T08:05:06.141058
1obpjnf,https://www.reddit.com/r/Python/comments/1obpjnf/i_built_a_tool_that_runs_your_python_function_on/,i built a tool that runs your python function on 10k vms in parallel with one line of code.,Ok_Post_149,2025-10-21 02:25:33,6,6,"# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to ...","# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to hand it over to DevOps, the backlog would grow, and overall throughput would tank.

So I built **Burla**, the simplest cluster compute software that lets even Python beginners run code on massive clusters in the cloud. It‚Äôs one function with two parameters: the function and the inputs. You can bring your own Docker image, set hardware requirements, and run jobs as background tasks so you can fire and forget. Responses are fast, and you can call a million simple functions in just a few seconds.

Burla is built for embarrassingly parallel workloads like preprocessing data, hyperparameter tuning, and batch inference.

# Target Audience

Engineers, data scientists, and analysts who want to scale their code in production or research environments without dealing with infrastructure.

# Comparison

Unlike Ray or Dask, Burla doesn‚Äôt require cluster setup, orchestration, or YAML configs. It‚Äôs just:

    from burla import remote_parallel_map
    remote_parallel_map(func, inputs)
    

That‚Äôs it. It automatically handles distribution, retries, logging, and scaling across up to 10,000 VMs.

# Open Source & Free Credits

Burla is open source, and I‚Äôm improving the installation process. I also created managed versions for testing. If you want to try it, I‚Äôll cover 1,000 CPU hours and 100 GPU hours. Email me at [joe@burla.dev]() if interested.

Here‚Äôs a short intro video:  
[https://www.youtube.com/watch?v=9d22y\_kWjyE](https://www.youtube.com/watch?v=9d22y_kWjyE)

GitHub ‚Üí¬†[https://github.com/Burla-Cloud/burla](https://github.com/Burla-Cloud/burla)  
Docs ‚Üí¬†[https://docs.burla.dev](https://docs.burla.dev/)",2025-10-21T08:05:06.141096
1oborpj,https://www.reddit.com/r/Python/comments/1oborpj/i_made_a_python_bot_that_turns_your_text_images/,I made a Python bot that turns your text & images into diagrams right in Telegram.,No_Mongoose_8139,2025-10-21 01:51:22,0,5,"https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project ...","https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project structure, a mind map, or just explain a concept. Every time, I had to open heavy editors like Miro or Figma, which felt like overkill.

So, I decided to build a tool that lives right inside the app I use for communication all day: Telegram.

I'm excited to share my side project: **Diagrammer Bot**. It's a simple yet powerful bot in Python that lets you create diagrams on the fly.

**Here are the key features:**
*   **Text & Image Nodes:** You can create blocks not just from text, but from any image you send.
*   **Full Editing:** Create, connect, edit, and delete both nodes and edges.
*   **Project System:** Save your diagrams with custom names, load them later, or start new ones.
*   **Themes & Export:** Switch between a sleek dark mode and a clean light mode. Export your final diagram as a high-quality PNG.
*   **Open-Source:** The entire project is available on GitHub!

**Tech Stack:** Python, `python-telegram-bot`, `Graphviz` for rendering, and `Pillow` for watermarking.

I would be incredibly grateful for any feedback, feature ideas, or bug reports. And of course, a star ‚≠ê on GitHub would make my day!

*   **Try the bot here:** [https://t.me/diagrammer_robot](https://t.me/diagrammer_robot)
*   **Check out the code on GitHub:** [https://github.com/Lixher/Diagrammer-bot](https://github.com/Lixher/Diagrammer-Bot)",2025-10-21T08:05:06.141354
1oborib,https://www.reddit.com/r/Python/comments/1oborib/i_built_a_persistent_kv_store_in_pure_python/,I built a Persistent KV Store in Pure Python,vollhard-natta,2025-10-21 01:51:07,24,1,"Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been work...","Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been working on for the past few months. It is a lightweight, persistent key-value storage engine in Python, built from scratch to understand and implement the Log-Structured Merge-tree (LSM-tree) architecture. The project, which is fully open-source, is explicitly optimized for write-heavy workloads. 



# Core Architecture:

The engine implements the three fundamental LSM components: the **Write Ahead Log (WAL)** for durability, an in-memory **Memtable** (using `SortedDict` for sorted writes), and immutable persistent **SSTables (Sorted String Tables)**.

Some features that I'm proud of:

* **Async Compaction**: Merging and compaction are handled by a **separate background worker thread**. The process itself takes a hybrid approach.
* **Client/Server Model**: The entire storage engine runs behind a **FastAPI server**. This allows multiple clients to connect via REST APIs or the included CLI tool.
* **Efficient Range Queries**: Added full support for range queries from `start_key` to `end_key`. This is achieved via a memory-efficient **k-way merge iterator** that combines results from the Memtable and all SSTables. The FastAPI server delivers the results using a `StreamingResponse` to prevent memory exhaustion for large result sets.
* **Bloom Filter**: Implemented a **Bloom Filter** for each SSTable to drastically reduce disk I/O by confirming that a key definitely does not exist before attempting a disk seek.
* **Binary Storage**: SSTables now use **Msgpack binary format** instead of JSON for smaller file sizes and reduced CPU load during serialization/deserialization.

My favourite part of the project is that I actually got to see a practical implementation of [Merge Sorted Arrays - GeeksforGeeks](https://www.geeksforgeeks.org/dsa/merge-k-sorted-arrays/). This is a pretty popular interview question and to see DSA being actually implemented is a crazy moment.

# Get Started

    pip install lsm_storage_engine_key_value_store

**Usage via CLI/Server:**

1. **Terminal 1 (Server):** `lsm-server`
2. **Terminal 2 (Client):** `lsm-cli` (Follow the CLI help for commands).

# Looking for Feedback

I'd love to hear your thoughts about this implementation and how I can make it better and what features I can add in later versions. Ideas and constructive criticism are always welcome. I'm also looking for contributors, if anyone is interested, please feel free to PM and we can discuss.

Repo link: [Shashank1985/storage-engine](https://github.com/Shashank1985/storage-engine)  
Thanks!!",2025-10-21T08:05:06.141414
1obo3rg,https://www.reddit.com/r/Python/comments/1obo3rg/kryypto_an_open_source_python_text_editor/,Kryypto an open source python text editor.,SxxVe,2025-10-21 01:21:30,3,5,"Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
*...","Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
* Full Keyboard Support ‚Äì no need for the mouse, every feature is accessible via hotkeys
* Discord presence
* Live MarkDown Preview
* Session Restore
* Custom Styling
   * `config\configuration.cfg` for editor settings
   * CSS for theme and style customization
* Editing Tools
   * Find text in file
   * Jump to line
   * Adjustable cursor (color & width)
   * Configurable animations (types & duration)
* Git & GitHub Integration
   * View total commits
   * See last commit message & date
   * Track file changes directly inside the editor
* Productivity Features
   * Autocompleter
   * Builtin Terminal
   * Docstring panel (hover to see function/class docstring)
   * Tab-based file switching
   * Bookmarking lines
   * Custom title bar
* Syntax Highlighting for
   * Python
   * CSS
   * JSON
   * Config files
   * Markdown

Target Audience

* Developers who prefer keyboard-driven workflows (no mouse required)
* Users looking for a lightweight alternative to heavier IDEs
* People who want to customize their editor with CSS and configuration settings
* Anyone experimenting with Python-based editors or open-source text editing tools

# Comparison:

* Lightweight ‚Äì minimal overhead, focused on speed
* Highly customizable ‚Äì styling via CSS and config files
* Keyboard-centric ‚Äì designed to be fully usable without a mouse

  
github repo: [https://github.com/NaturalCapsule/Kryypto](https://github.com/NaturalCapsule/Kryypto)

  
website: [https://naturalcapsule.github.io/Kryypto/](https://naturalcapsule.github.io/Kryypto/)",2025-10-21T08:05:06.141487
1obo0ze,https://www.reddit.com/r/Python/comments/1obo0ze/forgetting_python/,Forgetting Python,Ashamed-Society-2875,2025-10-21 01:17:52,0,4,"I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping f...","I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping for college exams , now when i come back to python it feels i have lost my level and my touch i feel like fkn loser , all those hrs spent in 8th grade for nothing , i forgot a lot , is it common or just me???",2025-10-21T08:05:06.141545
1obmzbm,https://www.reddit.com/r/Python/comments/1obmzbm/functoweb_is_now_much_better_thanks_for_the/,func-to-web is now much better ‚Äì Thanks for the feedback!,drboom9,2025-10-21 00:27:41,8,0,"15 days ago I shared func-to-web here and got amazing feedback (150+ upvotes, thank you!). Since then, I've been working hard on the suggestions and a...","15 days ago I shared func-to-web here and got amazing feedback (150+ upvotes, thank you!). Since then, I've been working hard on the suggestions and added some major features.

**What it does (quick reminder):**
Turn any Python function into a web UI with zero boilerplate:

```python
from func_to_web import run

def divide(a: int, b: int):
    return a / b

run(divide)  # Web form at localhost:8000
```

**Major updates since v0.1:**

**Dynamic Lists** ‚Äì Add/remove items with advanced validation:
```python
def process_data(
    # Dynamic lists with add/remove buttons
    images: list[ImageFile],                      # Multiple file uploads
    
    # Dual validation: list size AND individual items
    scores: Annotated[
        list[Annotated[int, Field(ge=0, le=100)]], 
        Field(min_length=3, max_length=10)
    ],  # 3-10 items required, each 0-100
    
    # Optional fields with toggle switches
    notes: str | None = None,                     # Optional text
    tags: list[str] | None = None                 # Optional list
):
    return FileResponse(generate_pdf(), ""report.pdf"")  # Auto-download
```

**High-Performance File Handling** ‚Äì Optimized streaming for large files:
- **Upload**: Real-time progress bars, 8MB chunks, handles GB+ files
- **Download**: Return `FileResponse(data, filename)` for auto-downloads
- **Performance**: ~237 MB/s localhost, ~115 MB/s over Gigabit Ethernet
- **Memory efficient**: Constant usage regardless of file size
- **Any format**: PDF, Excel, ZIP, images, binary data

**Optional Fields** ‚Äì `Type | None` creates toggle switches:
- Fields with defaults start enabled, without defaults start disabled
- Explicit control: `Type | OptionalEnabled/OptionalDisabled`
- Works with all types, constraints, and lists

**Dynamic Dropdowns** ‚Äì Runtime-generated options:
```python
def get_themes(): return fetch_from_database()

def configure(theme: Literal[get_themes]): pass  # Fresh options each request
```

**Rich Output Support**:
- **PIL Images**: Auto-displayed in browser
- **Matplotlib plots**: Rendered as PNG
- **File downloads**: Single or multiple files with streaming
- **JSON/text**: Formatted with copy-to-clipboard

**UX Improvements**:
- Dark mode with theme persistence
- Keyboard shortcuts (Ctrl+Enter to submit)
- Auto-focus first field
- Toast notifications
- Upload progress with speed indicators

**Current stats:**
- 180+ GitHub stars (The chinese community is sharing it too!)
- 454 unit tests
- Published on PyPI: `pip install func-to-web`
- 20+ runnable examples
- Used daily for internal tools at multiple companies

**Other improvements:**
- **Modular architecture**: Code separated by responsibilities (analysis, validation, form building...)
- **Comprehensive documentation**: Every function and class documented
- **Detailed changelog**: Track all improvements and breaking changes

I've tried to make this as professional and production-ready as possible while keeping the simple API.

Still focused on internal tools and rapid prototyping, not replacing proper web frameworks.

GitHub: https://github.com/offerrall/FuncToWeb

The community feedback really shaped these improvements. Thank you again! Keep the suggestions coming.",2025-10-21T08:05:06.141566
1obxzya,https://www.reddit.com/r/Python/comments/1obxzya/tuesday_daily_thread_advanced_questions/,Tuesday Daily Thread: Advanced questions,AutoModerator,2025-10-21 08:00:30,1,0,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about ...","# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",2025-10-21T08:05:35.011466
1obrz11,https://www.reddit.com/r/Python/comments/1obrz11/assemblytominecraftcommandblockcompiler_python/,Assembly-to-Minecraft-Command-Block-Compiler (Python) ‚Äî updated ‚Äî testers & contributors wanted,bowser04410,2025-10-21 03:57:47,2,0,"¬†I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedba...","I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedback, and contributors. Repo:¬†[https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler](https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler)

What My Project Does:

* Parses a tiny assembly-style language (labels, arithmetic, branches, simple I/O) and emits Minecraft command sequences tailored for command blocks.
* Produces low-level, inspectable output so you can see how program logic maps to in-game command-block logic.
* Implemented in Python for readability and easy contribution.

Target Audience:

* Minecraft command-block creators who want to run low-level programs without mods.
* Hobbyist compiler writers and learners looking for a compact Python codegen example.
* Contributors interested in parsing, code generation, testing strategies, or command optimization.
* This is an educational/hobby tool for small demos and experiments ‚Äî not a production compiler for large-scale programs.

Comparison (how it differs from alternatives):

* Assembly-focused: unlike high-level language‚ÜíMinecraft tools, it targets an assembly-like input so outputs are low-level and easy to debug in command blocks.
* Python-first and lightweight: prioritizes clarity and contributor-friendliness over performance.
* Command-block oriented: designed to work with vanilla in-game command blocks (does not target datapacks or mods).

How to help:

* Test: run examples, try outputs in a world, and note Minecraft version and exact steps when something fails.
* Report: open issues with minimal reproduction files and steps.
* Contribute: PRs welcome for bug fixes, examples, optimizations, docs, or tests ‚Äî look for good-first-issue.",2025-10-21T08:05:35.011561
1obqtmz,https://www.reddit.com/r/Python/comments/1obqtmz/has_any_library_emerged_as_the_replacement_for/,Has any library emerged as the replacement for Poliastro?,KerPop42,2025-10-21 03:15:23,2,1,"I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-...","I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-go. Even if you restrict yourself to 3.11 you *also* have to go back to pip <24.1 because of how some package requirements are written. I've looked around and can't find any other orbital dynamics libraries that are more than personal projects. Is the field just dead in python?",2025-10-21T08:05:35.011629
1obprx2,https://www.reddit.com/r/Python/comments/1obprx2/building_an_opensource_observability_tool_for/,Building an open-source observability tool for multi-agent systems - looking for feedback,Standard_Career_8603,2025-10-21 02:35:45,4,4,"I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-sour...","I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-source observability tool.   
  
**What it does**:  
\- Tracks information flow between agents   
\- Shows which tools are being called with what parameters   
\- Monitors how prompt changes affect agent behavior   
\- Works in both development and production   
  
**The gap I'm trying to fill**: Existing tools (LangSmith, LangFuse, AgentOps) are great at LLM observability (tokens, costs, latency), but I feel like they don't help much with multi-agent coordination. They show you **what** happened but not **why** agents failed to coordinate.   
  
  
**Looking for feedback**:  
1. Have you built multi-agent systems? What do you use for debugging?   
2. Does this solve a real problem or am I overengineering?   
3. What features would actually make this useful for you? Still early days, but happy to share the repo if folks are interested.",2025-10-21T08:05:35.011656
1obpjnf,https://www.reddit.com/r/Python/comments/1obpjnf/i_built_a_tool_that_runs_your_python_function_on/,i built a tool that runs your python function on 10k vms in parallel with one line of code.,Ok_Post_149,2025-10-21 02:25:33,2,6,"# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to ...","# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to hand it over to DevOps, the backlog would grow, and overall throughput would tank.

So I built **Burla**, the simplest cluster compute software that lets even Python beginners run code on massive clusters in the cloud. It‚Äôs one function with two parameters: the function and the inputs. You can bring your own Docker image, set hardware requirements, and run jobs as background tasks so you can fire and forget. Responses are fast, and you can call a million simple functions in just a few seconds.

Burla is built for embarrassingly parallel workloads like preprocessing data, hyperparameter tuning, and batch inference.

# Target Audience

Engineers, data scientists, and analysts who want to scale their code in production or research environments without dealing with infrastructure.

# Comparison

Unlike Ray or Dask, Burla doesn‚Äôt require cluster setup, orchestration, or YAML configs. It‚Äôs just:

    from burla import remote_parallel_map
    remote_parallel_map(func, inputs)
    

That‚Äôs it. It automatically handles distribution, retries, logging, and scaling across up to 10,000 VMs.

# Open Source & Free Credits

Burla is open source, and I‚Äôm improving the installation process. I also created managed versions for testing. If you want to try it, I‚Äôll cover 1,000 CPU hours and 100 GPU hours. Email me at [joe@burla.dev]() if interested.

Here‚Äôs a short intro video:  
[https://www.youtube.com/watch?v=9d22y\_kWjyE](https://www.youtube.com/watch?v=9d22y_kWjyE)

GitHub ‚Üí¬†[https://github.com/Burla-Cloud/burla](https://github.com/Burla-Cloud/burla)  
Docs ‚Üí¬†[https://docs.burla.dev](https://docs.burla.dev/)",2025-10-21T08:05:35.011694
1oborpj,https://www.reddit.com/r/Python/comments/1oborpj/i_made_a_python_bot_that_turns_your_text_images/,I made a Python bot that turns your text & images into diagrams right in Telegram.,No_Mongoose_8139,2025-10-21 01:51:22,0,5,"https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project ...","https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project structure, a mind map, or just explain a concept. Every time, I had to open heavy editors like Miro or Figma, which felt like overkill.

So, I decided to build a tool that lives right inside the app I use for communication all day: Telegram.

I'm excited to share my side project: **Diagrammer Bot**. It's a simple yet powerful bot in Python that lets you create diagrams on the fly.

**Here are the key features:**
*   **Text & Image Nodes:** You can create blocks not just from text, but from any image you send.
*   **Full Editing:** Create, connect, edit, and delete both nodes and edges.
*   **Project System:** Save your diagrams with custom names, load them later, or start new ones.
*   **Themes & Export:** Switch between a sleek dark mode and a clean light mode. Export your final diagram as a high-quality PNG.
*   **Open-Source:** The entire project is available on GitHub!

**Tech Stack:** Python, `python-telegram-bot`, `Graphviz` for rendering, and `Pillow` for watermarking.

I would be incredibly grateful for any feedback, feature ideas, or bug reports. And of course, a star ‚≠ê on GitHub would make my day!

*   **Try the bot here:** [https://t.me/diagrammer_robot](https://t.me/diagrammer_robot)
*   **Check out the code on GitHub:** [https://github.com/Lixher/Diagrammer-bot](https://github.com/Lixher/Diagrammer-Bot)",2025-10-21T08:05:35.011954
1oborib,https://www.reddit.com/r/Python/comments/1oborib/i_built_a_persistent_kv_store_in_pure_python/,I built a Persistent KV Store in Pure Python,vollhard-natta,2025-10-21 01:51:07,26,1,"Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been work...","Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been working on for the past few months. It is a lightweight, persistent key-value storage engine in Python, built from scratch to understand and implement the Log-Structured Merge-tree (LSM-tree) architecture. The project, which is fully open-source, is explicitly optimized for write-heavy workloads. 



# Core Architecture:

The engine implements the three fundamental LSM components: the **Write Ahead Log (WAL)** for durability, an in-memory **Memtable** (using `SortedDict` for sorted writes), and immutable persistent **SSTables (Sorted String Tables)**.

Some features that I'm proud of:

* **Async Compaction**: Merging and compaction are handled by a **separate background worker thread**. The process itself takes a hybrid approach.
* **Client/Server Model**: The entire storage engine runs behind a **FastAPI server**. This allows multiple clients to connect via REST APIs or the included CLI tool.
* **Efficient Range Queries**: Added full support for range queries from `start_key` to `end_key`. This is achieved via a memory-efficient **k-way merge iterator** that combines results from the Memtable and all SSTables. The FastAPI server delivers the results using a `StreamingResponse` to prevent memory exhaustion for large result sets.
* **Bloom Filter**: Implemented a **Bloom Filter** for each SSTable to drastically reduce disk I/O by confirming that a key definitely does not exist before attempting a disk seek.
* **Binary Storage**: SSTables now use **Msgpack binary format** instead of JSON for smaller file sizes and reduced CPU load during serialization/deserialization.

My favourite part of the project is that I actually got to see a practical implementation of [Merge Sorted Arrays - GeeksforGeeks](https://www.geeksforgeeks.org/dsa/merge-k-sorted-arrays/). This is a pretty popular interview question and to see DSA being actually implemented is a crazy moment.

# Get Started

    pip install lsm_storage_engine_key_value_store

**Usage via CLI/Server:**

1. **Terminal 1 (Server):** `lsm-server`
2. **Terminal 2 (Client):** `lsm-cli` (Follow the CLI help for commands).

# Looking for Feedback

I'd love to hear your thoughts about this implementation and how I can make it better and what features I can add in later versions. Ideas and constructive criticism are always welcome. I'm also looking for contributors, if anyone is interested, please feel free to PM and we can discuss.

Repo link: [Shashank1985/storage-engine](https://github.com/Shashank1985/storage-engine)  
Thanks!!",2025-10-21T08:05:35.012016
1obo3rg,https://www.reddit.com/r/Python/comments/1obo3rg/kryypto_an_open_source_python_text_editor/,Kryypto an open source python text editor.,SxxVe,2025-10-21 01:21:30,3,5,"Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
*...","Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
* Full Keyboard Support ‚Äì no need for the mouse, every feature is accessible via hotkeys
* Discord presence
* Live MarkDown Preview
* Session Restore
* Custom Styling
   * `config\configuration.cfg` for editor settings
   * CSS for theme and style customization
* Editing Tools
   * Find text in file
   * Jump to line
   * Adjustable cursor (color & width)
   * Configurable animations (types & duration)
* Git & GitHub Integration
   * View total commits
   * See last commit message & date
   * Track file changes directly inside the editor
* Productivity Features
   * Autocompleter
   * Builtin Terminal
   * Docstring panel (hover to see function/class docstring)
   * Tab-based file switching
   * Bookmarking lines
   * Custom title bar
* Syntax Highlighting for
   * Python
   * CSS
   * JSON
   * Config files
   * Markdown

Target Audience

* Developers who prefer keyboard-driven workflows (no mouse required)
* Users looking for a lightweight alternative to heavier IDEs
* People who want to customize their editor with CSS and configuration settings
* Anyone experimenting with Python-based editors or open-source text editing tools

# Comparison:

* Lightweight ‚Äì minimal overhead, focused on speed
* Highly customizable ‚Äì styling via CSS and config files
* Keyboard-centric ‚Äì designed to be fully usable without a mouse

  
github repo: [https://github.com/NaturalCapsule/Kryypto](https://github.com/NaturalCapsule/Kryypto)

  
website: [https://naturalcapsule.github.io/Kryypto/](https://naturalcapsule.github.io/Kryypto/)",2025-10-21T08:05:35.012090
1obo0ze,https://www.reddit.com/r/Python/comments/1obo0ze/forgetting_python/,Forgetting Python,Ashamed-Society-2875,2025-10-21 01:17:52,0,4,"I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping f...","I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping for college exams , now when i come back to python it feels i have lost my level and my touch i feel like fkn loser , all those hrs spent in 8th grade for nothing , i forgot a lot , is it common or just me???",2025-10-21T08:05:35.012148
1obmzbm,https://www.reddit.com/r/Python/comments/1obmzbm/functoweb_is_now_much_better_thanks_for_the/,func-to-web is now much better ‚Äì Thanks for the feedback!,drboom9,2025-10-21 00:27:41,7,0,"15 days ago I shared func-to-web here and got amazing feedback (150+ upvotes, thank you!). Since then, I've been working hard on the suggestions and a...","15 days ago I shared func-to-web here and got amazing feedback (150+ upvotes, thank you!). Since then, I've been working hard on the suggestions and added some major features.

**What it does (quick reminder):**
Turn any Python function into a web UI with zero boilerplate:

```python
from func_to_web import run

def divide(a: int, b: int):
    return a / b

run(divide)  # Web form at localhost:8000
```

**Major updates since v0.1:**

**Dynamic Lists** ‚Äì Add/remove items with advanced validation:
```python
def process_data(
    # Dynamic lists with add/remove buttons
    images: list[ImageFile],                      # Multiple file uploads
    
    # Dual validation: list size AND individual items
    scores: Annotated[
        list[Annotated[int, Field(ge=0, le=100)]], 
        Field(min_length=3, max_length=10)
    ],  # 3-10 items required, each 0-100
    
    # Optional fields with toggle switches
    notes: str | None = None,                     # Optional text
    tags: list[str] | None = None                 # Optional list
):
    return FileResponse(generate_pdf(), ""report.pdf"")  # Auto-download
```

**High-Performance File Handling** ‚Äì Optimized streaming for large files:
- **Upload**: Real-time progress bars, 8MB chunks, handles GB+ files
- **Download**: Return `FileResponse(data, filename)` for auto-downloads
- **Performance**: ~237 MB/s localhost, ~115 MB/s over Gigabit Ethernet
- **Memory efficient**: Constant usage regardless of file size
- **Any format**: PDF, Excel, ZIP, images, binary data

**Optional Fields** ‚Äì `Type | None` creates toggle switches:
- Fields with defaults start enabled, without defaults start disabled
- Explicit control: `Type | OptionalEnabled/OptionalDisabled`
- Works with all types, constraints, and lists

**Dynamic Dropdowns** ‚Äì Runtime-generated options:
```python
def get_themes(): return fetch_from_database()

def configure(theme: Literal[get_themes]): pass  # Fresh options each request
```

**Rich Output Support**:
- **PIL Images**: Auto-displayed in browser
- **Matplotlib plots**: Rendered as PNG
- **File downloads**: Single or multiple files with streaming
- **JSON/text**: Formatted with copy-to-clipboard

**UX Improvements**:
- Dark mode with theme persistence
- Keyboard shortcuts (Ctrl+Enter to submit)
- Auto-focus first field
- Toast notifications
- Upload progress with speed indicators

**Current stats:**
- 180+ GitHub stars (The chinese community is sharing it too!)
- 454 unit tests
- Published on PyPI: `pip install func-to-web`
- 20+ runnable examples
- Used daily for internal tools at multiple companies

**Other improvements:**
- **Modular architecture**: Code separated by responsibilities (analysis, validation, form building...)
- **Comprehensive documentation**: Every function and class documented
- **Detailed changelog**: Track all improvements and breaking changes

I've tried to make this as professional and production-ready as possible while keeping the simple API.

Still focused on internal tools and rapid prototyping, not replacing proper web frameworks.

GitHub: https://github.com/offerrall/FuncToWeb

The community feedback really shaped these improvements. Thank you again! Keep the suggestions coming.",2025-10-21T08:05:35.012170
1oborpj,https://www.reddit.com/r/Python/comments/1oborpj/i_made_a_python_bot_that_turns_your_text_images/,I made a Python bot that turns your text & images into diagrams right in Telegram.,No_Mongoose_8139,2025-10-21 01:51:22,0,5,"https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project ...","https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project structure, a mind map, or just explain a concept. Every time, I had to open heavy editors like Miro or Figma, which felt like overkill.

So, I decided to build a tool that lives right inside the app I use for communication all day: Telegram.

I'm excited to share my side project: **Diagrammer Bot**. It's a simple yet powerful bot in Python that lets you create diagrams on the fly.

**Here are the key features:**
*   **Text & Image Nodes:** You can create blocks not just from text, but from any image you send.
*   **Full Editing:** Create, connect, edit, and delete both nodes and edges.
*   **Project System:** Save your diagrams with custom names, load them later, or start new ones.
*   **Themes & Export:** Switch between a sleek dark mode and a clean light mode. Export your final diagram as a high-quality PNG.
*   **Open-Source:** The entire project is available on GitHub!

**Tech Stack:** Python, `python-telegram-bot`, `Graphviz` for rendering, and `Pillow` for watermarking.

I would be incredibly grateful for any feedback, feature ideas, or bug reports. And of course, a star ‚≠ê on GitHub would make my day!

*   **Try the bot here:** [https://t.me/diagrammer_robot](https://t.me/diagrammer_robot)
*   **Check out the code on GitHub:** [https://github.com/Lixher/Diagrammer-bot](https://github.com/Lixher/Diagrammer-Bot)",2025-10-21T08:05:37.648271
1oborib,https://www.reddit.com/r/Python/comments/1oborib/i_built_a_persistent_kv_store_in_pure_python/,I built a Persistent KV Store in Pure Python,vollhard-natta,2025-10-21 01:51:07,24,1,"Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been work...","Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been working on for the past few months. It is a lightweight, persistent key-value storage engine in Python, built from scratch to understand and implement the Log-Structured Merge-tree (LSM-tree) architecture. The project, which is fully open-source, is explicitly optimized for write-heavy workloads. 



# Core Architecture:

The engine implements the three fundamental LSM components: the **Write Ahead Log (WAL)** for durability, an in-memory **Memtable** (using `SortedDict` for sorted writes), and immutable persistent **SSTables (Sorted String Tables)**.

Some features that I'm proud of:

* **Async Compaction**: Merging and compaction are handled by a **separate background worker thread**. The process itself takes a hybrid approach.
* **Client/Server Model**: The entire storage engine runs behind a **FastAPI server**. This allows multiple clients to connect via REST APIs or the included CLI tool.
* **Efficient Range Queries**: Added full support for range queries from `start_key` to `end_key`. This is achieved via a memory-efficient **k-way merge iterator** that combines results from the Memtable and all SSTables. The FastAPI server delivers the results using a `StreamingResponse` to prevent memory exhaustion for large result sets.
* **Bloom Filter**: Implemented a **Bloom Filter** for each SSTable to drastically reduce disk I/O by confirming that a key definitely does not exist before attempting a disk seek.
* **Binary Storage**: SSTables now use **Msgpack binary format** instead of JSON for smaller file sizes and reduced CPU load during serialization/deserialization.

My favourite part of the project is that I actually got to see a practical implementation of [Merge Sorted Arrays - GeeksforGeeks](https://www.geeksforgeeks.org/dsa/merge-k-sorted-arrays/). This is a pretty popular interview question and to see DSA being actually implemented is a crazy moment.

# Get Started

    pip install lsm_storage_engine_key_value_store

**Usage via CLI/Server:**

1. **Terminal 1 (Server):** `lsm-server`
2. **Terminal 2 (Client):** `lsm-cli` (Follow the CLI help for commands).

# Looking for Feedback

I'd love to hear your thoughts about this implementation and how I can make it better and what features I can add in later versions. Ideas and constructive criticism are always welcome. I'm also looking for contributors, if anyone is interested, please feel free to PM and we can discuss.

Repo link: [Shashank1985/storage-engine](https://github.com/Shashank1985/storage-engine)  
Thanks!!",2025-10-21T08:05:37.648353
1obo3rg,https://www.reddit.com/r/Python/comments/1obo3rg/kryypto_an_open_source_python_text_editor/,Kryypto an open source python text editor.,SxxVe,2025-10-21 01:21:30,3,5,"Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
*...","Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
* Full Keyboard Support ‚Äì no need for the mouse, every feature is accessible via hotkeys
* Discord presence
* Live MarkDown Preview
* Session Restore
* Custom Styling
   * `config\configuration.cfg` for editor settings
   * CSS for theme and style customization
* Editing Tools
   * Find text in file
   * Jump to line
   * Adjustable cursor (color & width)
   * Configurable animations (types & duration)
* Git & GitHub Integration
   * View total commits
   * See last commit message & date
   * Track file changes directly inside the editor
* Productivity Features
   * Autocompleter
   * Builtin Terminal
   * Docstring panel (hover to see function/class docstring)
   * Tab-based file switching
   * Bookmarking lines
   * Custom title bar
* Syntax Highlighting for
   * Python
   * CSS
   * JSON
   * Config files
   * Markdown

Target Audience

* Developers who prefer keyboard-driven workflows (no mouse required)
* Users looking for a lightweight alternative to heavier IDEs
* People who want to customize their editor with CSS and configuration settings
* Anyone experimenting with Python-based editors or open-source text editing tools

# Comparison:

* Lightweight ‚Äì minimal overhead, focused on speed
* Highly customizable ‚Äì styling via CSS and config files
* Keyboard-centric ‚Äì designed to be fully usable without a mouse

  
github repo: [https://github.com/NaturalCapsule/Kryypto](https://github.com/NaturalCapsule/Kryypto)

  
website: [https://naturalcapsule.github.io/Kryypto/](https://naturalcapsule.github.io/Kryypto/)",2025-10-21T08:05:37.648430
1obo0ze,https://www.reddit.com/r/Python/comments/1obo0ze/forgetting_python/,Forgetting Python,Ashamed-Society-2875,2025-10-21 01:17:52,0,4,"I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping f...","I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping for college exams , now when i come back to python it feels i have lost my level and my touch i feel like fkn loser , all those hrs spent in 8th grade for nothing , i forgot a lot , is it common or just me???",2025-10-21T08:05:37.648490
1obmzbm,https://www.reddit.com/r/Python/comments/1obmzbm/functoweb_is_now_much_better_thanks_for_the/,func-to-web is now much better ‚Äì Thanks for the feedback!,drboom9,2025-10-21 00:27:41,8,0,"15 days ago I shared func-to-web here and got amazing feedback (150+ upvotes, thank you!). Since then, I've been working hard on the suggestions and a...","15 days ago I shared func-to-web here and got amazing feedback (150+ upvotes, thank you!). Since then, I've been working hard on the suggestions and added some major features.

**What it does (quick reminder):**
Turn any Python function into a web UI with zero boilerplate:

```python
from func_to_web import run

def divide(a: int, b: int):
    return a / b

run(divide)  # Web form at localhost:8000
```

**Major updates since v0.1:**

**Dynamic Lists** ‚Äì Add/remove items with advanced validation:
```python
def process_data(
    # Dynamic lists with add/remove buttons
    images: list[ImageFile],                      # Multiple file uploads
    
    # Dual validation: list size AND individual items
    scores: Annotated[
        list[Annotated[int, Field(ge=0, le=100)]], 
        Field(min_length=3, max_length=10)
    ],  # 3-10 items required, each 0-100
    
    # Optional fields with toggle switches
    notes: str | None = None,                     # Optional text
    tags: list[str] | None = None                 # Optional list
):
    return FileResponse(generate_pdf(), ""report.pdf"")  # Auto-download
```

**High-Performance File Handling** ‚Äì Optimized streaming for large files:
- **Upload**: Real-time progress bars, 8MB chunks, handles GB+ files
- **Download**: Return `FileResponse(data, filename)` for auto-downloads
- **Performance**: ~237 MB/s localhost, ~115 MB/s over Gigabit Ethernet
- **Memory efficient**: Constant usage regardless of file size
- **Any format**: PDF, Excel, ZIP, images, binary data

**Optional Fields** ‚Äì `Type | None` creates toggle switches:
- Fields with defaults start enabled, without defaults start disabled
- Explicit control: `Type | OptionalEnabled/OptionalDisabled`
- Works with all types, constraints, and lists

**Dynamic Dropdowns** ‚Äì Runtime-generated options:
```python
def get_themes(): return fetch_from_database()

def configure(theme: Literal[get_themes]): pass  # Fresh options each request
```

**Rich Output Support**:
- **PIL Images**: Auto-displayed in browser
- **Matplotlib plots**: Rendered as PNG
- **File downloads**: Single or multiple files with streaming
- **JSON/text**: Formatted with copy-to-clipboard

**UX Improvements**:
- Dark mode with theme persistence
- Keyboard shortcuts (Ctrl+Enter to submit)
- Auto-focus first field
- Toast notifications
- Upload progress with speed indicators

**Current stats:**
- 180+ GitHub stars (The chinese community is sharing it too!)
- 454 unit tests
- Published on PyPI: `pip install func-to-web`
- 20+ runnable examples
- Used daily for internal tools at multiple companies

**Other improvements:**
- **Modular architecture**: Code separated by responsibilities (analysis, validation, form building...)
- **Comprehensive documentation**: Every function and class documented
- **Detailed changelog**: Track all improvements and breaking changes

I've tried to make this as professional and production-ready as possible while keeping the simple API.

Still focused on internal tools and rapid prototyping, not replacing proper web frameworks.

GitHub: https://github.com/offerrall/FuncToWeb

The community feedback really shaped these improvements. Thank you again! Keep the suggestions coming.",2025-10-21T08:05:37.648512
1obxzya,https://www.reddit.com/r/Python/comments/1obxzya/tuesday_daily_thread_advanced_questions/,Tuesday Daily Thread: Advanced questions,AutoModerator,2025-10-21 08:00:30,1,0,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about ...","# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",2025-10-21T08:23:44.367932
1obrz11,https://www.reddit.com/r/Python/comments/1obrz11/assemblytominecraftcommandblockcompiler_python/,Assembly-to-Minecraft-Command-Block-Compiler (Python) ‚Äî updated ‚Äî testers & contributors wanted,bowser04410,2025-10-21 03:57:47,3,0,"¬†I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedba...","I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedback, and contributors. Repo:¬†[https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler](https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler)

What My Project Does:

* Parses a tiny assembly-style language (labels, arithmetic, branches, simple I/O) and emits Minecraft command sequences tailored for command blocks.
* Produces low-level, inspectable output so you can see how program logic maps to in-game command-block logic.
* Implemented in Python for readability and easy contribution.

Target Audience:

* Minecraft command-block creators who want to run low-level programs without mods.
* Hobbyist compiler writers and learners looking for a compact Python codegen example.
* Contributors interested in parsing, code generation, testing strategies, or command optimization.
* This is an educational/hobby tool for small demos and experiments ‚Äî not a production compiler for large-scale programs.

Comparison (how it differs from alternatives):

* Assembly-focused: unlike high-level language‚ÜíMinecraft tools, it targets an assembly-like input so outputs are low-level and easy to debug in command blocks.
* Python-first and lightweight: prioritizes clarity and contributor-friendliness over performance.
* Command-block oriented: designed to work with vanilla in-game command blocks (does not target datapacks or mods).

How to help:

* Test: run examples, try outputs in a world, and note Minecraft version and exact steps when something fails.
* Report: open issues with minimal reproduction files and steps.
* Contribute: PRs welcome for bug fixes, examples, optimizations, docs, or tests ‚Äî look for good-first-issue.",2025-10-21T08:23:44.368106
1obqtmz,https://www.reddit.com/r/Python/comments/1obqtmz/has_any_library_emerged_as_the_replacement_for/,Has any library emerged as the replacement for Poliastro?,KerPop42,2025-10-21 03:15:23,2,1,"I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-...","I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-go. Even if you restrict yourself to 3.11 you *also* have to go back to pip <24.1 because of how some package requirements are written. I've looked around and can't find any other orbital dynamics libraries that are more than personal projects. Is the field just dead in python?",2025-10-21T08:23:44.368234
1obprx2,https://www.reddit.com/r/Python/comments/1obprx2/building_an_opensource_observability_tool_for/,Building an open-source observability tool for multi-agent systems - looking for feedback,Standard_Career_8603,2025-10-21 02:35:45,6,4,"I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-sour...","I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-source observability tool.   
  
**What it does**:  
\- Tracks information flow between agents   
\- Shows which tools are being called with what parameters   
\- Monitors how prompt changes affect agent behavior   
\- Works in both development and production   
  
**The gap I'm trying to fill**: Existing tools (LangSmith, LangFuse, AgentOps) are great at LLM observability (tokens, costs, latency), but I feel like they don't help much with multi-agent coordination. They show you **what** happened but not **why** agents failed to coordinate.   
  
  
**Looking for feedback**:  
1. Have you built multi-agent systems? What do you use for debugging?   
2. Does this solve a real problem or am I overengineering?   
3. What features would actually make this useful for you? Still early days, but happy to share the repo if folks are interested.",2025-10-21T08:23:44.368283
1obpjnf,https://www.reddit.com/r/Python/comments/1obpjnf/i_built_a_tool_that_runs_your_python_function_on/,i built a tool that runs your python function on 10k vms in parallel with one line of code.,Ok_Post_149,2025-10-21 02:25:33,3,6,"# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to ...","# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to hand it over to DevOps, the backlog would grow, and overall throughput would tank.

So I built **Burla**, the simplest cluster compute software that lets even Python beginners run code on massive clusters in the cloud. It‚Äôs one function with two parameters: the function and the inputs. You can bring your own Docker image, set hardware requirements, and run jobs as background tasks so you can fire and forget. Responses are fast, and you can call a million simple functions in just a few seconds.

Burla is built for embarrassingly parallel workloads like preprocessing data, hyperparameter tuning, and batch inference.

# Target Audience

Engineers, data scientists, and analysts who want to scale their code in production or research environments without dealing with infrastructure.

# Comparison

Unlike Ray or Dask, Burla doesn‚Äôt require cluster setup, orchestration, or YAML configs. It‚Äôs just:

    from burla import remote_parallel_map
    remote_parallel_map(func, inputs)
    

That‚Äôs it. It automatically handles distribution, retries, logging, and scaling across up to 10,000 VMs.

# Open Source & Free Credits

Burla is open source, and I‚Äôm improving the installation process. I also created managed versions for testing. If you want to try it, I‚Äôll cover 1,000 CPU hours and 100 GPU hours. Email me at [joe@burla.dev]() if interested.

Here‚Äôs a short intro video:  
[https://www.youtube.com/watch?v=9d22y\_kWjyE](https://www.youtube.com/watch?v=9d22y_kWjyE)

GitHub ‚Üí¬†[https://github.com/Burla-Cloud/burla](https://github.com/Burla-Cloud/burla)  
Docs ‚Üí¬†[https://docs.burla.dev](https://docs.burla.dev/)",2025-10-21T08:23:44.368353
1oborpj,https://www.reddit.com/r/Python/comments/1oborpj/i_made_a_python_bot_that_turns_your_text_images/,I made a Python bot that turns your text & images into diagrams right in Telegram.,No_Mongoose_8139,2025-10-21 01:51:22,0,5,"https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project ...","https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project structure, a mind map, or just explain a concept. Every time, I had to open heavy editors like Miro or Figma, which felt like overkill.

So, I decided to build a tool that lives right inside the app I use for communication all day: Telegram.

I'm excited to share my side project: **Diagrammer Bot**. It's a simple yet powerful bot in Python that lets you create diagrams on the fly.

**Here are the key features:**
*   **Text & Image Nodes:** You can create blocks not just from text, but from any image you send.
*   **Full Editing:** Create, connect, edit, and delete both nodes and edges.
*   **Project System:** Save your diagrams with custom names, load them later, or start new ones.
*   **Themes & Export:** Switch between a sleek dark mode and a clean light mode. Export your final diagram as a high-quality PNG.
*   **Open-Source:** The entire project is available on GitHub!

**Tech Stack:** Python, `python-telegram-bot`, `Graphviz` for rendering, and `Pillow` for watermarking.

I would be incredibly grateful for any feedback, feature ideas, or bug reports. And of course, a star ‚≠ê on GitHub would make my day!

*   **Try the bot here:** [https://t.me/diagrammer_robot](https://t.me/diagrammer_robot)
*   **Check out the code on GitHub:** [https://github.com/Lixher/Diagrammer-bot](https://github.com/Lixher/Diagrammer-Bot)",2025-10-21T08:23:44.368796
1oborib,https://www.reddit.com/r/Python/comments/1oborib/i_built_a_persistent_kv_store_in_pure_python/,I built a Persistent KV Store in Pure Python,vollhard-natta,2025-10-21 01:51:07,27,1,"Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been work...","Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been working on for the past few months. It is a lightweight, persistent key-value storage engine in Python, built from scratch to understand and implement the Log-Structured Merge-tree (LSM-tree) architecture. The project, which is fully open-source, is explicitly optimized for write-heavy workloads. 



# Core Architecture:

The engine implements the three fundamental LSM components: the **Write Ahead Log (WAL)** for durability, an in-memory **Memtable** (using `SortedDict` for sorted writes), and immutable persistent **SSTables (Sorted String Tables)**.

Some features that I'm proud of:

* **Async Compaction**: Merging and compaction are handled by a **separate background worker thread**. The process itself takes a hybrid approach.
* **Client/Server Model**: The entire storage engine runs behind a **FastAPI server**. This allows multiple clients to connect via REST APIs or the included CLI tool.
* **Efficient Range Queries**: Added full support for range queries from `start_key` to `end_key`. This is achieved via a memory-efficient **k-way merge iterator** that combines results from the Memtable and all SSTables. The FastAPI server delivers the results using a `StreamingResponse` to prevent memory exhaustion for large result sets.
* **Bloom Filter**: Implemented a **Bloom Filter** for each SSTable to drastically reduce disk I/O by confirming that a key definitely does not exist before attempting a disk seek.
* **Binary Storage**: SSTables now use **Msgpack binary format** instead of JSON for smaller file sizes and reduced CPU load during serialization/deserialization.

My favourite part of the project is that I actually got to see a practical implementation of [Merge Sorted Arrays - GeeksforGeeks](https://www.geeksforgeeks.org/dsa/merge-k-sorted-arrays/). This is a pretty popular interview question and to see DSA being actually implemented is a crazy moment.

# Get Started

    pip install lsm_storage_engine_key_value_store

**Usage via CLI/Server:**

1. **Terminal 1 (Server):** `lsm-server`
2. **Terminal 2 (Client):** `lsm-cli` (Follow the CLI help for commands).

# Looking for Feedback

I'd love to hear your thoughts about this implementation and how I can make it better and what features I can add in later versions. Ideas and constructive criticism are always welcome. I'm also looking for contributors, if anyone is interested, please feel free to PM and we can discuss.

Repo link: [Shashank1985/storage-engine](https://github.com/Shashank1985/storage-engine)  
Thanks!!",2025-10-21T08:23:44.368915
1obo3rg,https://www.reddit.com/r/Python/comments/1obo3rg/kryypto_an_open_source_python_text_editor/,Kryypto an open source python text editor.,SxxVe,2025-10-21 01:21:30,3,5,"Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
*...","Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
* Full Keyboard Support ‚Äì no need for the mouse, every feature is accessible via hotkeys
* Discord presence
* Live MarkDown Preview
* Session Restore
* Custom Styling
   * `config\configuration.cfg` for editor settings
   * CSS for theme and style customization
* Editing Tools
   * Find text in file
   * Jump to line
   * Adjustable cursor (color & width)
   * Configurable animations (types & duration)
* Git & GitHub Integration
   * View total commits
   * See last commit message & date
   * Track file changes directly inside the editor
* Productivity Features
   * Autocompleter
   * Builtin Terminal
   * Docstring panel (hover to see function/class docstring)
   * Tab-based file switching
   * Bookmarking lines
   * Custom title bar
* Syntax Highlighting for
   * Python
   * CSS
   * JSON
   * Config files
   * Markdown

Target Audience

* Developers who prefer keyboard-driven workflows (no mouse required)
* Users looking for a lightweight alternative to heavier IDEs
* People who want to customize their editor with CSS and configuration settings
* Anyone experimenting with Python-based editors or open-source text editing tools

# Comparison:

* Lightweight ‚Äì minimal overhead, focused on speed
* Highly customizable ‚Äì styling via CSS and config files
* Keyboard-centric ‚Äì designed to be fully usable without a mouse

  
github repo: [https://github.com/NaturalCapsule/Kryypto](https://github.com/NaturalCapsule/Kryypto)

  
website: [https://naturalcapsule.github.io/Kryypto/](https://naturalcapsule.github.io/Kryypto/)",2025-10-21T08:23:44.369053
1obo0ze,https://www.reddit.com/r/Python/comments/1obo0ze/forgetting_python/,Forgetting Python,Ashamed-Society-2875,2025-10-21 01:17:52,0,4,"I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping f...","I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping for college exams , now when i come back to python it feels i have lost my level and my touch i feel like fkn loser , all those hrs spent in 8th grade for nothing , i forgot a lot , is it common or just me???",2025-10-21T08:23:44.369162
1obmzbm,https://www.reddit.com/r/Python/comments/1obmzbm/functoweb_is_now_much_better_thanks_for_the/,func-to-web is now much better ‚Äì Thanks for the feedback!,drboom9,2025-10-21 00:27:41,8,0,"15 days ago I shared func-to-web here and got amazing feedback (150+ upvotes, thank you!). Since then, I've been working hard on the suggestions and a...","15 days ago I shared func-to-web here and got amazing feedback (150+ upvotes, thank you!). Since then, I've been working hard on the suggestions and added some major features.

**What it does (quick reminder):**
Turn any Python function into a web UI with zero boilerplate:

```python
from func_to_web import run

def divide(a: int, b: int):
    return a / b

run(divide)  # Web form at localhost:8000
```

**Major updates since v0.1:**

**Dynamic Lists** ‚Äì Add/remove items with advanced validation:
```python
def process_data(
    # Dynamic lists with add/remove buttons
    images: list[ImageFile],                      # Multiple file uploads
    
    # Dual validation: list size AND individual items
    scores: Annotated[
        list[Annotated[int, Field(ge=0, le=100)]], 
        Field(min_length=3, max_length=10)
    ],  # 3-10 items required, each 0-100
    
    # Optional fields with toggle switches
    notes: str | None = None,                     # Optional text
    tags: list[str] | None = None                 # Optional list
):
    return FileResponse(generate_pdf(), ""report.pdf"")  # Auto-download
```

**High-Performance File Handling** ‚Äì Optimized streaming for large files:
- **Upload**: Real-time progress bars, 8MB chunks, handles GB+ files
- **Download**: Return `FileResponse(data, filename)` for auto-downloads
- **Performance**: ~237 MB/s localhost, ~115 MB/s over Gigabit Ethernet
- **Memory efficient**: Constant usage regardless of file size
- **Any format**: PDF, Excel, ZIP, images, binary data

**Optional Fields** ‚Äì `Type | None` creates toggle switches:
- Fields with defaults start enabled, without defaults start disabled
- Explicit control: `Type | OptionalEnabled/OptionalDisabled`
- Works with all types, constraints, and lists

**Dynamic Dropdowns** ‚Äì Runtime-generated options:
```python
def get_themes(): return fetch_from_database()

def configure(theme: Literal[get_themes]): pass  # Fresh options each request
```

**Rich Output Support**:
- **PIL Images**: Auto-displayed in browser
- **Matplotlib plots**: Rendered as PNG
- **File downloads**: Single or multiple files with streaming
- **JSON/text**: Formatted with copy-to-clipboard

**UX Improvements**:
- Dark mode with theme persistence
- Keyboard shortcuts (Ctrl+Enter to submit)
- Auto-focus first field
- Toast notifications
- Upload progress with speed indicators

**Current stats:**
- 180+ GitHub stars (The chinese community is sharing it too!)
- 454 unit tests
- Published on PyPI: `pip install func-to-web`
- 20+ runnable examples
- Used daily for internal tools at multiple companies

**Other improvements:**
- **Modular architecture**: Code separated by responsibilities (analysis, validation, form building...)
- **Comprehensive documentation**: Every function and class documented
- **Detailed changelog**: Track all improvements and breaking changes

I've tried to make this as professional and production-ready as possible while keeping the simple API.

Still focused on internal tools and rapid prototyping, not replacing proper web frameworks.

GitHub: https://github.com/offerrall/FuncToWeb

The community feedback really shaped these improvements. Thank you again! Keep the suggestions coming.",2025-10-21T08:23:44.369202
1obxzya,https://www.reddit.com/r/Python/comments/1obxzya/tuesday_daily_thread_advanced_questions/,Tuesday Daily Thread: Advanced questions,AutoModerator,2025-10-21 08:00:30,1,0,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about ...","# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",2025-10-21T08:33:20.522760
1obrz11,https://www.reddit.com/r/Python/comments/1obrz11/assemblytominecraftcommandblockcompiler_python/,Assembly-to-Minecraft-Command-Block-Compiler (Python) ‚Äî updated ‚Äî testers & contributors wanted,bowser04410,2025-10-21 03:57:47,3,0,"¬†I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedba...","I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedback, and contributors. Repo:¬†[https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler](https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler)

What My Project Does:

* Parses a tiny assembly-style language (labels, arithmetic, branches, simple I/O) and emits Minecraft command sequences tailored for command blocks.
* Produces low-level, inspectable output so you can see how program logic maps to in-game command-block logic.
* Implemented in Python for readability and easy contribution.

Target Audience:

* Minecraft command-block creators who want to run low-level programs without mods.
* Hobbyist compiler writers and learners looking for a compact Python codegen example.
* Contributors interested in parsing, code generation, testing strategies, or command optimization.
* This is an educational/hobby tool for small demos and experiments ‚Äî not a production compiler for large-scale programs.

Comparison (how it differs from alternatives):

* Assembly-focused: unlike high-level language‚ÜíMinecraft tools, it targets an assembly-like input so outputs are low-level and easy to debug in command blocks.
* Python-first and lightweight: prioritizes clarity and contributor-friendliness over performance.
* Command-block oriented: designed to work with vanilla in-game command blocks (does not target datapacks or mods).

How to help:

* Test: run examples, try outputs in a world, and note Minecraft version and exact steps when something fails.
* Report: open issues with minimal reproduction files and steps.
* Contribute: PRs welcome for bug fixes, examples, optimizations, docs, or tests ‚Äî look for good-first-issue.",2025-10-21T08:33:20.522960
1obqtmz,https://www.reddit.com/r/Python/comments/1obqtmz/has_any_library_emerged_as_the_replacement_for/,Has any library emerged as the replacement for Poliastro?,KerPop42,2025-10-21 03:15:23,2,1,"I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-...","I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-go. Even if you restrict yourself to 3.11 you *also* have to go back to pip <24.1 because of how some package requirements are written. I've looked around and can't find any other orbital dynamics libraries that are more than personal projects. Is the field just dead in python?",2025-10-21T08:33:20.523101
1obprx2,https://www.reddit.com/r/Python/comments/1obprx2/building_an_opensource_observability_tool_for/,Building an open-source observability tool for multi-agent systems - looking for feedback,Standard_Career_8603,2025-10-21 02:35:45,4,4,"I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-sour...","I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-source observability tool.   
  
**What it does**:  
\- Tracks information flow between agents   
\- Shows which tools are being called with what parameters   
\- Monitors how prompt changes affect agent behavior   
\- Works in both development and production   
  
**The gap I'm trying to fill**: Existing tools (LangSmith, LangFuse, AgentOps) are great at LLM observability (tokens, costs, latency), but I feel like they don't help much with multi-agent coordination. They show you **what** happened but not **why** agents failed to coordinate.   
  
  
**Looking for feedback**:  
1. Have you built multi-agent systems? What do you use for debugging?   
2. Does this solve a real problem or am I overengineering?   
3. What features would actually make this useful for you? Still early days, but happy to share the repo if folks are interested.",2025-10-21T08:33:20.523154
1obpjnf,https://www.reddit.com/r/Python/comments/1obpjnf/i_built_a_tool_that_runs_your_python_function_on/,i built a tool that runs your python function on 10k vms in parallel with one line of code.,Ok_Post_149,2025-10-21 02:25:33,5,6,"# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to ...","# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to hand it over to DevOps, the backlog would grow, and overall throughput would tank.

So I built **Burla**, the simplest cluster compute software that lets even Python beginners run code on massive clusters in the cloud. It‚Äôs one function with two parameters: the function and the inputs. You can bring your own Docker image, set hardware requirements, and run jobs as background tasks so you can fire and forget. Responses are fast, and you can call a million simple functions in just a few seconds.

Burla is built for embarrassingly parallel workloads like preprocessing data, hyperparameter tuning, and batch inference.

# Target Audience

Engineers, data scientists, and analysts who want to scale their code in production or research environments without dealing with infrastructure.

# Comparison

Unlike Ray or Dask, Burla doesn‚Äôt require cluster setup, orchestration, or YAML configs. It‚Äôs just:

    from burla import remote_parallel_map
    remote_parallel_map(func, inputs)
    

That‚Äôs it. It automatically handles distribution, retries, logging, and scaling across up to 10,000 VMs.

# Open Source & Free Credits

Burla is open source, and I‚Äôm improving the installation process. I also created managed versions for testing. If you want to try it, I‚Äôll cover 1,000 CPU hours and 100 GPU hours. Email me at [joe@burla.dev]() if interested.

Here‚Äôs a short intro video:  
[https://www.youtube.com/watch?v=9d22y\_kWjyE](https://www.youtube.com/watch?v=9d22y_kWjyE)

GitHub ‚Üí¬†[https://github.com/Burla-Cloud/burla](https://github.com/Burla-Cloud/burla)  
Docs ‚Üí¬†[https://docs.burla.dev](https://docs.burla.dev/)",2025-10-21T08:33:20.523226
1oborpj,https://www.reddit.com/r/Python/comments/1oborpj/i_made_a_python_bot_that_turns_your_text_images/,I made a Python bot that turns your text & images into diagrams right in Telegram.,No_Mongoose_8139,2025-10-21 01:51:22,0,5,"https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project ...","https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project structure, a mind map, or just explain a concept. Every time, I had to open heavy editors like Miro or Figma, which felt like overkill.

So, I decided to build a tool that lives right inside the app I use for communication all day: Telegram.

I'm excited to share my side project: **Diagrammer Bot**. It's a simple yet powerful bot in Python that lets you create diagrams on the fly.

**Here are the key features:**
*   **Text & Image Nodes:** You can create blocks not just from text, but from any image you send.
*   **Full Editing:** Create, connect, edit, and delete both nodes and edges.
*   **Project System:** Save your diagrams with custom names, load them later, or start new ones.
*   **Themes & Export:** Switch between a sleek dark mode and a clean light mode. Export your final diagram as a high-quality PNG.
*   **Open-Source:** The entire project is available on GitHub!

**Tech Stack:** Python, `python-telegram-bot`, `Graphviz` for rendering, and `Pillow` for watermarking.

I would be incredibly grateful for any feedback, feature ideas, or bug reports. And of course, a star ‚≠ê on GitHub would make my day!

*   **Try the bot here:** [https://t.me/diagrammer_robot](https://t.me/diagrammer_robot)
*   **Check out the code on GitHub:** [https://github.com/Lixher/Diagrammer-bot](https://github.com/Lixher/Diagrammer-Bot)",2025-10-21T08:33:20.523659
1oborib,https://www.reddit.com/r/Python/comments/1oborib/i_built_a_persistent_kv_store_in_pure_python/,I built a Persistent KV Store in Pure Python,vollhard-natta,2025-10-21 01:51:07,27,1,"Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been work...","Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been working on for the past few months. It is a lightweight, persistent key-value storage engine in Python, built from scratch to understand and implement the Log-Structured Merge-tree (LSM-tree) architecture. The project, which is fully open-source, is explicitly optimized for write-heavy workloads. 



# Core Architecture:

The engine implements the three fundamental LSM components: the **Write Ahead Log (WAL)** for durability, an in-memory **Memtable** (using `SortedDict` for sorted writes), and immutable persistent **SSTables (Sorted String Tables)**.

Some features that I'm proud of:

* **Async Compaction**: Merging and compaction are handled by a **separate background worker thread**. The process itself takes a hybrid approach.
* **Client/Server Model**: The entire storage engine runs behind a **FastAPI server**. This allows multiple clients to connect via REST APIs or the included CLI tool.
* **Efficient Range Queries**: Added full support for range queries from `start_key` to `end_key`. This is achieved via a memory-efficient **k-way merge iterator** that combines results from the Memtable and all SSTables. The FastAPI server delivers the results using a `StreamingResponse` to prevent memory exhaustion for large result sets.
* **Bloom Filter**: Implemented a **Bloom Filter** for each SSTable to drastically reduce disk I/O by confirming that a key definitely does not exist before attempting a disk seek.
* **Binary Storage**: SSTables now use **Msgpack binary format** instead of JSON for smaller file sizes and reduced CPU load during serialization/deserialization.

My favourite part of the project is that I actually got to see a practical implementation of [Merge Sorted Arrays - GeeksforGeeks](https://www.geeksforgeeks.org/dsa/merge-k-sorted-arrays/). This is a pretty popular interview question and to see DSA being actually implemented is a crazy moment.

# Get Started

    pip install lsm_storage_engine_key_value_store

**Usage via CLI/Server:**

1. **Terminal 1 (Server):** `lsm-server`
2. **Terminal 2 (Client):** `lsm-cli` (Follow the CLI help for commands).

# Looking for Feedback

I'd love to hear your thoughts about this implementation and how I can make it better and what features I can add in later versions. Ideas and constructive criticism are always welcome. I'm also looking for contributors, if anyone is interested, please feel free to PM and we can discuss.

Repo link: [Shashank1985/storage-engine](https://github.com/Shashank1985/storage-engine)  
Thanks!!",2025-10-21T08:33:20.523779
1obo3rg,https://www.reddit.com/r/Python/comments/1obo3rg/kryypto_an_open_source_python_text_editor/,Kryypto an open source python text editor.,SxxVe,2025-10-21 01:21:30,3,5,"Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
*...","Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
* Full Keyboard Support ‚Äì no need for the mouse, every feature is accessible via hotkeys
* Discord presence
* Live MarkDown Preview
* Session Restore
* Custom Styling
   * `config\configuration.cfg` for editor settings
   * CSS for theme and style customization
* Editing Tools
   * Find text in file
   * Jump to line
   * Adjustable cursor (color & width)
   * Configurable animations (types & duration)
* Git & GitHub Integration
   * View total commits
   * See last commit message & date
   * Track file changes directly inside the editor
* Productivity Features
   * Autocompleter
   * Builtin Terminal
   * Docstring panel (hover to see function/class docstring)
   * Tab-based file switching
   * Bookmarking lines
   * Custom title bar
* Syntax Highlighting for
   * Python
   * CSS
   * JSON
   * Config files
   * Markdown

Target Audience

* Developers who prefer keyboard-driven workflows (no mouse required)
* Users looking for a lightweight alternative to heavier IDEs
* People who want to customize their editor with CSS and configuration settings
* Anyone experimenting with Python-based editors or open-source text editing tools

# Comparison:

* Lightweight ‚Äì minimal overhead, focused on speed
* Highly customizable ‚Äì styling via CSS and config files
* Keyboard-centric ‚Äì designed to be fully usable without a mouse

  
github repo: [https://github.com/NaturalCapsule/Kryypto](https://github.com/NaturalCapsule/Kryypto)

  
website: [https://naturalcapsule.github.io/Kryypto/](https://naturalcapsule.github.io/Kryypto/)",2025-10-21T08:33:20.523923
1obo0ze,https://www.reddit.com/r/Python/comments/1obo0ze/forgetting_python/,Forgetting Python,Ashamed-Society-2875,2025-10-21 01:17:52,0,4,"I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping f...","I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping for college exams , now when i come back to python it feels i have lost my level and my touch i feel like fkn loser , all those hrs spent in 8th grade for nothing , i forgot a lot , is it common or just me???",2025-10-21T08:33:20.524037
1obmzbm,https://www.reddit.com/r/Python/comments/1obmzbm/functoweb_is_now_much_better_thanks_for_the/,func-to-web is now much better ‚Äì Thanks for the feedback!,drboom9,2025-10-21 00:27:41,7,0,"15 days ago I shared func-to-web here and got amazing feedback (150+ upvotes, thank you!). Since then, I've been working hard on the suggestions and a...","15 days ago I shared func-to-web here and got amazing feedback (150+ upvotes, thank you!). Since then, I've been working hard on the suggestions and added some major features.

**What it does (quick reminder):**
Turn any Python function into a web UI with zero boilerplate:

```python
from func_to_web import run

def divide(a: int, b: int):
    return a / b

run(divide)  # Web form at localhost:8000
```

**Major updates since v0.1:**

**Dynamic Lists** ‚Äì Add/remove items with advanced validation:
```python
def process_data(
    # Dynamic lists with add/remove buttons
    images: list[ImageFile],                      # Multiple file uploads
    
    # Dual validation: list size AND individual items
    scores: Annotated[
        list[Annotated[int, Field(ge=0, le=100)]], 
        Field(min_length=3, max_length=10)
    ],  # 3-10 items required, each 0-100
    
    # Optional fields with toggle switches
    notes: str | None = None,                     # Optional text
    tags: list[str] | None = None                 # Optional list
):
    return FileResponse(generate_pdf(), ""report.pdf"")  # Auto-download
```

**High-Performance File Handling** ‚Äì Optimized streaming for large files:
- **Upload**: Real-time progress bars, 8MB chunks, handles GB+ files
- **Download**: Return `FileResponse(data, filename)` for auto-downloads
- **Performance**: ~237 MB/s localhost, ~115 MB/s over Gigabit Ethernet
- **Memory efficient**: Constant usage regardless of file size
- **Any format**: PDF, Excel, ZIP, images, binary data

**Optional Fields** ‚Äì `Type | None` creates toggle switches:
- Fields with defaults start enabled, without defaults start disabled
- Explicit control: `Type | OptionalEnabled/OptionalDisabled`
- Works with all types, constraints, and lists

**Dynamic Dropdowns** ‚Äì Runtime-generated options:
```python
def get_themes(): return fetch_from_database()

def configure(theme: Literal[get_themes]): pass  # Fresh options each request
```

**Rich Output Support**:
- **PIL Images**: Auto-displayed in browser
- **Matplotlib plots**: Rendered as PNG
- **File downloads**: Single or multiple files with streaming
- **JSON/text**: Formatted with copy-to-clipboard

**UX Improvements**:
- Dark mode with theme persistence
- Keyboard shortcuts (Ctrl+Enter to submit)
- Auto-focus first field
- Toast notifications
- Upload progress with speed indicators

**Current stats:**
- 180+ GitHub stars (The chinese community is sharing it too!)
- 454 unit tests
- Published on PyPI: `pip install func-to-web`
- 20+ runnable examples
- Used daily for internal tools at multiple companies

**Other improvements:**
- **Modular architecture**: Code separated by responsibilities (analysis, validation, form building...)
- **Comprehensive documentation**: Every function and class documented
- **Detailed changelog**: Track all improvements and breaking changes

I've tried to make this as professional and production-ready as possible while keeping the simple API.

Still focused on internal tools and rapid prototyping, not replacing proper web frameworks.

GitHub: https://github.com/offerrall/FuncToWeb

The community feedback really shaped these improvements. Thank you again! Keep the suggestions coming.",2025-10-21T08:33:20.524080
1obxzya,https://www.reddit.com/r/Python/comments/1obxzya/tuesday_daily_thread_advanced_questions/,Tuesday Daily Thread: Advanced questions,AutoModerator,2025-10-21 08:00:30,1,0,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about ...","# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",2025-10-21T08:33:29.394986
1obrz11,https://www.reddit.com/r/Python/comments/1obrz11/assemblytominecraftcommandblockcompiler_python/,Assembly-to-Minecraft-Command-Block-Compiler (Python) ‚Äî updated ‚Äî testers & contributors wanted,bowser04410,2025-10-21 03:57:47,4,0,"¬†I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedba...","I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedback, and contributors. Repo:¬†[https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler](https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler)

What My Project Does:

* Parses a tiny assembly-style language (labels, arithmetic, branches, simple I/O) and emits Minecraft command sequences tailored for command blocks.
* Produces low-level, inspectable output so you can see how program logic maps to in-game command-block logic.
* Implemented in Python for readability and easy contribution.

Target Audience:

* Minecraft command-block creators who want to run low-level programs without mods.
* Hobbyist compiler writers and learners looking for a compact Python codegen example.
* Contributors interested in parsing, code generation, testing strategies, or command optimization.
* This is an educational/hobby tool for small demos and experiments ‚Äî not a production compiler for large-scale programs.

Comparison (how it differs from alternatives):

* Assembly-focused: unlike high-level language‚ÜíMinecraft tools, it targets an assembly-like input so outputs are low-level and easy to debug in command blocks.
* Python-first and lightweight: prioritizes clarity and contributor-friendliness over performance.
* Command-block oriented: designed to work with vanilla in-game command blocks (does not target datapacks or mods).

How to help:

* Test: run examples, try outputs in a world, and note Minecraft version and exact steps when something fails.
* Report: open issues with minimal reproduction files and steps.
* Contribute: PRs welcome for bug fixes, examples, optimizations, docs, or tests ‚Äî look for good-first-issue.",2025-10-21T08:33:29.395151
1obqtmz,https://www.reddit.com/r/Python/comments/1obqtmz/has_any_library_emerged_as_the_replacement_for/,Has any library emerged as the replacement for Poliastro?,KerPop42,2025-10-21 03:15:23,2,1,"I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-...","I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-go. Even if you restrict yourself to 3.11 you *also* have to go back to pip <24.1 because of how some package requirements are written. I've looked around and can't find any other orbital dynamics libraries that are more than personal projects. Is the field just dead in python?",2025-10-21T08:33:29.395281
1obprx2,https://www.reddit.com/r/Python/comments/1obprx2/building_an_opensource_observability_tool_for/,Building an open-source observability tool for multi-agent systems - looking for feedback,Standard_Career_8603,2025-10-21 02:35:45,4,4,"I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-sour...","I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-source observability tool.   
  
**What it does**:  
\- Tracks information flow between agents   
\- Shows which tools are being called with what parameters   
\- Monitors how prompt changes affect agent behavior   
\- Works in both development and production   
  
**The gap I'm trying to fill**: Existing tools (LangSmith, LangFuse, AgentOps) are great at LLM observability (tokens, costs, latency), but I feel like they don't help much with multi-agent coordination. They show you **what** happened but not **why** agents failed to coordinate.   
  
  
**Looking for feedback**:  
1. Have you built multi-agent systems? What do you use for debugging?   
2. Does this solve a real problem or am I overengineering?   
3. What features would actually make this useful for you? Still early days, but happy to share the repo if folks are interested.",2025-10-21T08:33:29.395330
1obpjnf,https://www.reddit.com/r/Python/comments/1obpjnf/i_built_a_tool_that_runs_your_python_function_on/,i built a tool that runs your python function on 10k vms in parallel with one line of code.,Ok_Post_149,2025-10-21 02:25:33,6,6,"# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to ...","# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to hand it over to DevOps, the backlog would grow, and overall throughput would tank.

So I built **Burla**, the simplest cluster compute software that lets even Python beginners run code on massive clusters in the cloud. It‚Äôs one function with two parameters: the function and the inputs. You can bring your own Docker image, set hardware requirements, and run jobs as background tasks so you can fire and forget. Responses are fast, and you can call a million simple functions in just a few seconds.

Burla is built for embarrassingly parallel workloads like preprocessing data, hyperparameter tuning, and batch inference.

# Target Audience

Engineers, data scientists, and analysts who want to scale their code in production or research environments without dealing with infrastructure.

# Comparison

Unlike Ray or Dask, Burla doesn‚Äôt require cluster setup, orchestration, or YAML configs. It‚Äôs just:

    from burla import remote_parallel_map
    remote_parallel_map(func, inputs)
    

That‚Äôs it. It automatically handles distribution, retries, logging, and scaling across up to 10,000 VMs.

# Open Source & Free Credits

Burla is open source, and I‚Äôm improving the installation process. I also created managed versions for testing. If you want to try it, I‚Äôll cover 1,000 CPU hours and 100 GPU hours. Email me at [joe@burla.dev]() if interested.

Here‚Äôs a short intro video:  
[https://www.youtube.com/watch?v=9d22y\_kWjyE](https://www.youtube.com/watch?v=9d22y_kWjyE)

GitHub ‚Üí¬†[https://github.com/Burla-Cloud/burla](https://github.com/Burla-Cloud/burla)  
Docs ‚Üí¬†[https://docs.burla.dev](https://docs.burla.dev/)",2025-10-21T08:33:29.395405
1oborpj,https://www.reddit.com/r/Python/comments/1oborpj/i_made_a_python_bot_that_turns_your_text_images/,I made a Python bot that turns your text & images into diagrams right in Telegram.,No_Mongoose_8139,2025-10-21 01:51:22,0,5,"https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project ...","https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project structure, a mind map, or just explain a concept. Every time, I had to open heavy editors like Miro or Figma, which felt like overkill.

So, I decided to build a tool that lives right inside the app I use for communication all day: Telegram.

I'm excited to share my side project: **Diagrammer Bot**. It's a simple yet powerful bot in Python that lets you create diagrams on the fly.

**Here are the key features:**
*   **Text & Image Nodes:** You can create blocks not just from text, but from any image you send.
*   **Full Editing:** Create, connect, edit, and delete both nodes and edges.
*   **Project System:** Save your diagrams with custom names, load them later, or start new ones.
*   **Themes & Export:** Switch between a sleek dark mode and a clean light mode. Export your final diagram as a high-quality PNG.
*   **Open-Source:** The entire project is available on GitHub!

**Tech Stack:** Python, `python-telegram-bot`, `Graphviz` for rendering, and `Pillow` for watermarking.

I would be incredibly grateful for any feedback, feature ideas, or bug reports. And of course, a star ‚≠ê on GitHub would make my day!

*   **Try the bot here:** [https://t.me/diagrammer_robot](https://t.me/diagrammer_robot)
*   **Check out the code on GitHub:** [https://github.com/Lixher/Diagrammer-bot](https://github.com/Lixher/Diagrammer-Bot)",2025-10-21T08:33:29.395798
1oborib,https://www.reddit.com/r/Python/comments/1oborib/i_built_a_persistent_kv_store_in_pure_python/,I built a Persistent KV Store in Pure Python,vollhard-natta,2025-10-21 01:51:07,26,1,"Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been work...","Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been working on for the past few months. It is a lightweight, persistent key-value storage engine in Python, built from scratch to understand and implement the Log-Structured Merge-tree (LSM-tree) architecture. The project, which is fully open-source, is explicitly optimized for write-heavy workloads. 



# Core Architecture:

The engine implements the three fundamental LSM components: the **Write Ahead Log (WAL)** for durability, an in-memory **Memtable** (using `SortedDict` for sorted writes), and immutable persistent **SSTables (Sorted String Tables)**.

Some features that I'm proud of:

* **Async Compaction**: Merging and compaction are handled by a **separate background worker thread**. The process itself takes a hybrid approach.
* **Client/Server Model**: The entire storage engine runs behind a **FastAPI server**. This allows multiple clients to connect via REST APIs or the included CLI tool.
* **Efficient Range Queries**: Added full support for range queries from `start_key` to `end_key`. This is achieved via a memory-efficient **k-way merge iterator** that combines results from the Memtable and all SSTables. The FastAPI server delivers the results using a `StreamingResponse` to prevent memory exhaustion for large result sets.
* **Bloom Filter**: Implemented a **Bloom Filter** for each SSTable to drastically reduce disk I/O by confirming that a key definitely does not exist before attempting a disk seek.
* **Binary Storage**: SSTables now use **Msgpack binary format** instead of JSON for smaller file sizes and reduced CPU load during serialization/deserialization.

My favourite part of the project is that I actually got to see a practical implementation of [Merge Sorted Arrays - GeeksforGeeks](https://www.geeksforgeeks.org/dsa/merge-k-sorted-arrays/). This is a pretty popular interview question and to see DSA being actually implemented is a crazy moment.

# Get Started

    pip install lsm_storage_engine_key_value_store

**Usage via CLI/Server:**

1. **Terminal 1 (Server):** `lsm-server`
2. **Terminal 2 (Client):** `lsm-cli` (Follow the CLI help for commands).

# Looking for Feedback

I'd love to hear your thoughts about this implementation and how I can make it better and what features I can add in later versions. Ideas and constructive criticism are always welcome. I'm also looking for contributors, if anyone is interested, please feel free to PM and we can discuss.

Repo link: [Shashank1985/storage-engine](https://github.com/Shashank1985/storage-engine)  
Thanks!!",2025-10-21T08:33:29.395913
1obo3rg,https://www.reddit.com/r/Python/comments/1obo3rg/kryypto_an_open_source_python_text_editor/,Kryypto an open source python text editor.,SxxVe,2025-10-21 01:21:30,3,5,"Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
*...","Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
* Full Keyboard Support ‚Äì no need for the mouse, every feature is accessible via hotkeys
* Discord presence
* Live MarkDown Preview
* Session Restore
* Custom Styling
   * `config\configuration.cfg` for editor settings
   * CSS for theme and style customization
* Editing Tools
   * Find text in file
   * Jump to line
   * Adjustable cursor (color & width)
   * Configurable animations (types & duration)
* Git & GitHub Integration
   * View total commits
   * See last commit message & date
   * Track file changes directly inside the editor
* Productivity Features
   * Autocompleter
   * Builtin Terminal
   * Docstring panel (hover to see function/class docstring)
   * Tab-based file switching
   * Bookmarking lines
   * Custom title bar
* Syntax Highlighting for
   * Python
   * CSS
   * JSON
   * Config files
   * Markdown

Target Audience

* Developers who prefer keyboard-driven workflows (no mouse required)
* Users looking for a lightweight alternative to heavier IDEs
* People who want to customize their editor with CSS and configuration settings
* Anyone experimenting with Python-based editors or open-source text editing tools

# Comparison:

* Lightweight ‚Äì minimal overhead, focused on speed
* Highly customizable ‚Äì styling via CSS and config files
* Keyboard-centric ‚Äì designed to be fully usable without a mouse

  
github repo: [https://github.com/NaturalCapsule/Kryypto](https://github.com/NaturalCapsule/Kryypto)

  
website: [https://naturalcapsule.github.io/Kryypto/](https://naturalcapsule.github.io/Kryypto/)",2025-10-21T08:33:29.396059
1obo0ze,https://www.reddit.com/r/Python/comments/1obo0ze/forgetting_python/,Forgetting Python,Ashamed-Society-2875,2025-10-21 01:17:52,0,4,"I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping f...","I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping for college exams , now when i come back to python it feels i have lost my level and my touch i feel like fkn loser , all those hrs spent in 8th grade for nothing , i forgot a lot , is it common or just me???",2025-10-21T08:33:29.396178
1obmzbm,https://www.reddit.com/r/Python/comments/1obmzbm/functoweb_is_now_much_better_thanks_for_the/,func-to-web is now much better ‚Äì Thanks for the feedback!,drboom9,2025-10-21 00:27:41,9,0,"15 days ago I shared func-to-web here and got amazing feedback (150+ upvotes, thank you!). Since then, I've been working hard on the suggestions and a...","15 days ago I shared func-to-web here and got amazing feedback (150+ upvotes, thank you!). Since then, I've been working hard on the suggestions and added some major features.

**What it does (quick reminder):**
Turn any Python function into a web UI with zero boilerplate:

```python
from func_to_web import run

def divide(a: int, b: int):
    return a / b

run(divide)  # Web form at localhost:8000
```

**Major updates since v0.1:**

**Dynamic Lists** ‚Äì Add/remove items with advanced validation:
```python
def process_data(
    # Dynamic lists with add/remove buttons
    images: list[ImageFile],                      # Multiple file uploads
    
    # Dual validation: list size AND individual items
    scores: Annotated[
        list[Annotated[int, Field(ge=0, le=100)]], 
        Field(min_length=3, max_length=10)
    ],  # 3-10 items required, each 0-100
    
    # Optional fields with toggle switches
    notes: str | None = None,                     # Optional text
    tags: list[str] | None = None                 # Optional list
):
    return FileResponse(generate_pdf(), ""report.pdf"")  # Auto-download
```

**High-Performance File Handling** ‚Äì Optimized streaming for large files:
- **Upload**: Real-time progress bars, 8MB chunks, handles GB+ files
- **Download**: Return `FileResponse(data, filename)` for auto-downloads
- **Performance**: ~237 MB/s localhost, ~115 MB/s over Gigabit Ethernet
- **Memory efficient**: Constant usage regardless of file size
- **Any format**: PDF, Excel, ZIP, images, binary data

**Optional Fields** ‚Äì `Type | None` creates toggle switches:
- Fields with defaults start enabled, without defaults start disabled
- Explicit control: `Type | OptionalEnabled/OptionalDisabled`
- Works with all types, constraints, and lists

**Dynamic Dropdowns** ‚Äì Runtime-generated options:
```python
def get_themes(): return fetch_from_database()

def configure(theme: Literal[get_themes]): pass  # Fresh options each request
```

**Rich Output Support**:
- **PIL Images**: Auto-displayed in browser
- **Matplotlib plots**: Rendered as PNG
- **File downloads**: Single or multiple files with streaming
- **JSON/text**: Formatted with copy-to-clipboard

**UX Improvements**:
- Dark mode with theme persistence
- Keyboard shortcuts (Ctrl+Enter to submit)
- Auto-focus first field
- Toast notifications
- Upload progress with speed indicators

**Current stats:**
- 180+ GitHub stars (The chinese community is sharing it too!)
- 454 unit tests
- Published on PyPI: `pip install func-to-web`
- 20+ runnable examples
- Used daily for internal tools at multiple companies

**Other improvements:**
- **Modular architecture**: Code separated by responsibilities (analysis, validation, form building...)
- **Comprehensive documentation**: Every function and class documented
- **Detailed changelog**: Track all improvements and breaking changes

I've tried to make this as professional and production-ready as possible while keeping the simple API.

Still focused on internal tools and rapid prototyping, not replacing proper web frameworks.

GitHub: https://github.com/offerrall/FuncToWeb

The community feedback really shaped these improvements. Thank you again! Keep the suggestions coming.",2025-10-21T08:33:29.396218
1obxzya,https://www.reddit.com/r/Python/comments/1obxzya/tuesday_daily_thread_advanced_questions/,Tuesday Daily Thread: Advanced questions,AutoModerator,2025-10-21 08:00:30,1,0,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about ...","# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",2025-10-21T08:43:38.557416
1obrz11,https://www.reddit.com/r/Python/comments/1obrz11/assemblytominecraftcommandblockcompiler_python/,Assembly-to-Minecraft-Command-Block-Compiler (Python) ‚Äî updated ‚Äî testers & contributors wanted,bowser04410,2025-10-21 03:57:47,5,0,"I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedbac...","I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedback, and contributors. Repo:¬†[https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler](https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler)

What My Project Does:

* Parses a tiny assembly-style language (labels, arithmetic, branches, simple I/O) and emits Minecraft command sequences tailored for command blocks.
* Produces low-level, inspectable output so you can see how program logic maps to in-game command-block logic.
* Implemented in Python for readability and easy contribution.

Target Audience:

* Minecraft command-block creators who want to run low-level programs without mods.
* Hobbyist compiler writers and learners looking for a compact Python codegen example.
* Contributors interested in parsing, code generation, testing strategies, or command optimization.
* This is an educational/hobby tool for small demos and experiments ‚Äî not a production compiler for large-scale programs.

Comparison (how it differs from alternatives):

* Assembly-focused: unlike high-level language‚ÜíMinecraft tools, it targets an assembly-like input so outputs are low-level and easy to debug in command blocks.
* Python-first and lightweight: prioritizes clarity and contributor-friendliness over performance.
* Command-block oriented: designed to work with vanilla in-game command blocks (does not target datapacks or mods).

How to help:

* Test: run examples, try outputs in a world, and note Minecraft version and exact steps when something fails.
* Report: open issues with minimal reproduction files and steps.
* Contribute: PRs welcome for bug fixes, examples, optimizations, docs, or tests ‚Äî look for good-first-issue.",2025-10-21T08:43:38.557603
1obqtmz,https://www.reddit.com/r/Python/comments/1obqtmz/has_any_library_emerged_as_the_replacement_for/,Has any library emerged as the replacement for Poliastro?,KerPop42,2025-10-21 03:15:23,2,1,"I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-...","I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-go. Even if you restrict yourself to 3.11 you *also* have to go back to pip <24.1 because of how some package requirements are written. I've looked around and can't find any other orbital dynamics libraries that are more than personal projects. Is the field just dead in python?",2025-10-21T08:43:38.557725
1obprx2,https://www.reddit.com/r/Python/comments/1obprx2/building_an_opensource_observability_tool_for/,Building an open-source observability tool for multi-agent systems - looking for feedback,Standard_Career_8603,2025-10-21 02:35:45,6,4,"I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-sour...","I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-source observability tool.   
  
**What it does**:  
\- Tracks information flow between agents   
\- Shows which tools are being called with what parameters   
\- Monitors how prompt changes affect agent behavior   
\- Works in both development and production   
  
**The gap I'm trying to fill**: Existing tools (LangSmith, LangFuse, AgentOps) are great at LLM observability (tokens, costs, latency), but I feel like they don't help much with multi-agent coordination. They show you **what** happened but not **why** agents failed to coordinate.   
  
  
**Looking for feedback**:  
1. Have you built multi-agent systems? What do you use for debugging?   
2. Does this solve a real problem or am I overengineering?   
3. What features would actually make this useful for you? Still early days, but happy to share the repo if folks are interested.",2025-10-21T08:43:38.557772
1obpjnf,https://www.reddit.com/r/Python/comments/1obpjnf/i_built_a_tool_that_runs_your_python_function_on/,i built a tool that runs your python function on 10k vms in parallel with one line of code.,Ok_Post_149,2025-10-21 02:25:33,2,7,"# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to ...","# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to hand it over to DevOps, the backlog would grow, and overall throughput would tank.

So I built **Burla**, the simplest cluster compute software that lets even Python beginners run code on massive clusters in the cloud. It‚Äôs one function with two parameters: the function and the inputs. You can bring your own Docker image, set hardware requirements, and run jobs as background tasks so you can fire and forget. Responses are fast, and you can call a million simple functions in just a few seconds.

Burla is built for embarrassingly parallel workloads like preprocessing data, hyperparameter tuning, and batch inference.

# Target Audience

Engineers, data scientists, and analysts who want to scale their code in production or research environments without dealing with infrastructure.

# Comparison

Unlike Ray or Dask, Burla doesn‚Äôt require cluster setup, orchestration, or YAML configs. It‚Äôs just:

    from burla import remote_parallel_map
    remote_parallel_map(func, inputs)
    

That‚Äôs it. It automatically handles distribution, retries, logging, and scaling across up to 10,000 VMs.

# Open Source & Free Credits

Burla is open source, and I‚Äôm improving the installation process. I also created managed versions for testing. If you want to try it, I‚Äôll cover 1,000 CPU hours and 100 GPU hours. Email me at [joe@burla.dev]() if interested.

Here‚Äôs a short intro video:  
[https://www.youtube.com/watch?v=9d22y\_kWjyE](https://www.youtube.com/watch?v=9d22y_kWjyE)

GitHub ‚Üí¬†[https://github.com/Burla-Cloud/burla](https://github.com/Burla-Cloud/burla)  
Docs ‚Üí¬†[https://docs.burla.dev](https://docs.burla.dev/)",2025-10-21T08:43:38.557839
1oborpj,https://www.reddit.com/r/Python/comments/1oborpj/i_made_a_python_bot_that_turns_your_text_images/,I made a Python bot that turns your text & images into diagrams right in Telegram.,No_Mongoose_8139,2025-10-21 01:51:22,0,5,"https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project ...","https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project structure, a mind map, or just explain a concept. Every time, I had to open heavy editors like Miro or Figma, which felt like overkill.

So, I decided to build a tool that lives right inside the app I use for communication all day: Telegram.

I'm excited to share my side project: **Diagrammer Bot**. It's a simple yet powerful bot in Python that lets you create diagrams on the fly.

**Here are the key features:**
*   **Text & Image Nodes:** You can create blocks not just from text, but from any image you send.
*   **Full Editing:** Create, connect, edit, and delete both nodes and edges.
*   **Project System:** Save your diagrams with custom names, load them later, or start new ones.
*   **Themes & Export:** Switch between a sleek dark mode and a clean light mode. Export your final diagram as a high-quality PNG.
*   **Open-Source:** The entire project is available on GitHub!

**Tech Stack:** Python, `python-telegram-bot`, `Graphviz` for rendering, and `Pillow` for watermarking.

I would be incredibly grateful for any feedback, feature ideas, or bug reports. And of course, a star ‚≠ê on GitHub would make my day!

*   **Try the bot here:** [https://t.me/diagrammer_robot](https://t.me/diagrammer_robot)
*   **Check out the code on GitHub:** [https://github.com/Lixher/Diagrammer-bot](https://github.com/Lixher/Diagrammer-Bot)",2025-10-21T08:43:38.558209
1oborib,https://www.reddit.com/r/Python/comments/1oborib/i_built_a_persistent_kv_store_in_pure_python/,I built a Persistent KV Store in Pure Python,vollhard-natta,2025-10-21 01:51:07,26,1,"Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been work...","Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been working on for the past few months. It is a lightweight, persistent key-value storage engine in Python, built from scratch to understand and implement the Log-Structured Merge-tree (LSM-tree) architecture. The project, which is fully open-source, is explicitly optimized for write-heavy workloads. 



# Core Architecture:

The engine implements the three fundamental LSM components: the **Write Ahead Log (WAL)** for durability, an in-memory **Memtable** (using `SortedDict` for sorted writes), and immutable persistent **SSTables (Sorted String Tables)**.

Some features that I'm proud of:

* **Async Compaction**: Merging and compaction are handled by a **separate background worker thread**. The process itself takes a hybrid approach.
* **Client/Server Model**: The entire storage engine runs behind a **FastAPI server**. This allows multiple clients to connect via REST APIs or the included CLI tool.
* **Efficient Range Queries**: Added full support for range queries from `start_key` to `end_key`. This is achieved via a memory-efficient **k-way merge iterator** that combines results from the Memtable and all SSTables. The FastAPI server delivers the results using a `StreamingResponse` to prevent memory exhaustion for large result sets.
* **Bloom Filter**: Implemented a **Bloom Filter** for each SSTable to drastically reduce disk I/O by confirming that a key definitely does not exist before attempting a disk seek.
* **Binary Storage**: SSTables now use **Msgpack binary format** instead of JSON for smaller file sizes and reduced CPU load during serialization/deserialization.

My favourite part of the project is that I actually got to see a practical implementation of [Merge Sorted Arrays - GeeksforGeeks](https://www.geeksforgeeks.org/dsa/merge-k-sorted-arrays/). This is a pretty popular interview question and to see DSA being actually implemented is a crazy moment.

# Get Started

    pip install lsm_storage_engine_key_value_store

**Usage via CLI/Server:**

1. **Terminal 1 (Server):** `lsm-server`
2. **Terminal 2 (Client):** `lsm-cli` (Follow the CLI help for commands).

# Looking for Feedback

I'd love to hear your thoughts about this implementation and how I can make it better and what features I can add in later versions. Ideas and constructive criticism are always welcome. I'm also looking for contributors, if anyone is interested, please feel free to PM and we can discuss.

Repo link: [Shashank1985/storage-engine](https://github.com/Shashank1985/storage-engine)  
Thanks!!",2025-10-21T08:43:38.558313
1obo3rg,https://www.reddit.com/r/Python/comments/1obo3rg/kryypto_an_open_source_python_text_editor/,Kryypto an open source python text editor.,SxxVe,2025-10-21 01:21:30,3,5,"Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
*...","Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
* Full Keyboard Support ‚Äì no need for the mouse, every feature is accessible via hotkeys
* Discord presence
* Live MarkDown Preview
* Session Restore
* Custom Styling
   * `config\configuration.cfg` for editor settings
   * CSS for theme and style customization
* Editing Tools
   * Find text in file
   * Jump to line
   * Adjustable cursor (color & width)
   * Configurable animations (types & duration)
* Git & GitHub Integration
   * View total commits
   * See last commit message & date
   * Track file changes directly inside the editor
* Productivity Features
   * Autocompleter
   * Builtin Terminal
   * Docstring panel (hover to see function/class docstring)
   * Tab-based file switching
   * Bookmarking lines
   * Custom title bar
* Syntax Highlighting for
   * Python
   * CSS
   * JSON
   * Config files
   * Markdown

Target Audience

* Developers who prefer keyboard-driven workflows (no mouse required)
* Users looking for a lightweight alternative to heavier IDEs
* People who want to customize their editor with CSS and configuration settings
* Anyone experimenting with Python-based editors or open-source text editing tools

# Comparison:

* Lightweight ‚Äì minimal overhead, focused on speed
* Highly customizable ‚Äì styling via CSS and config files
* Keyboard-centric ‚Äì designed to be fully usable without a mouse

  
github repo: [https://github.com/NaturalCapsule/Kryypto](https://github.com/NaturalCapsule/Kryypto)

  
website: [https://naturalcapsule.github.io/Kryypto/](https://naturalcapsule.github.io/Kryypto/)",2025-10-21T08:43:38.558442
1obo0ze,https://www.reddit.com/r/Python/comments/1obo0ze/forgetting_python/,Forgetting Python,Ashamed-Society-2875,2025-10-21 01:17:52,0,4,"I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping f...","I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping for college exams , now when i come back to python it feels i have lost my level and my touch i feel like fkn loser , all those hrs spent in 8th grade for nothing , i forgot a lot , is it common or just me???",2025-10-21T08:43:38.558544
1obmzbm,https://www.reddit.com/r/Python/comments/1obmzbm/functoweb_is_now_much_better_thanks_for_the/,func-to-web is now much better ‚Äì Thanks for the feedback!,drboom9,2025-10-21 00:27:41,8,0,"15 days ago I shared func-to-web here and got amazing feedback (150+ upvotes, thank you!). Since then, I've been working hard on the suggestions and a...","15 days ago I shared func-to-web here and got amazing feedback (150+ upvotes, thank you!). Since then, I've been working hard on the suggestions and added some major features.

**What it does (quick reminder):**
Turn any Python function into a web UI with zero boilerplate:

```python
from func_to_web import run

def divide(a: int, b: int):
    return a / b

run(divide)  # Web form at localhost:8000
```

**Major updates since v0.1:**

**Dynamic Lists** ‚Äì Add/remove items with advanced validation:
```python
def process_data(
    # Dynamic lists with add/remove buttons
    images: list[ImageFile],                      # Multiple file uploads
    
    # Dual validation: list size AND individual items
    scores: Annotated[
        list[Annotated[int, Field(ge=0, le=100)]], 
        Field(min_length=3, max_length=10)
    ],  # 3-10 items required, each 0-100
    
    # Optional fields with toggle switches
    notes: str | None = None,                     # Optional text
    tags: list[str] | None = None                 # Optional list
):
    return FileResponse(generate_pdf(), ""report.pdf"")  # Auto-download
```

**High-Performance File Handling** ‚Äì Optimized streaming for large files:
- **Upload**: Real-time progress bars, 8MB chunks, handles GB+ files
- **Download**: Return `FileResponse(data, filename)` for auto-downloads
- **Performance**: ~237 MB/s localhost, ~115 MB/s over Gigabit Ethernet
- **Memory efficient**: Constant usage regardless of file size
- **Any format**: PDF, Excel, ZIP, images, binary data

**Optional Fields** ‚Äì `Type | None` creates toggle switches:
- Fields with defaults start enabled, without defaults start disabled
- Explicit control: `Type | OptionalEnabled/OptionalDisabled`
- Works with all types, constraints, and lists

**Dynamic Dropdowns** ‚Äì Runtime-generated options:
```python
def get_themes(): return fetch_from_database()

def configure(theme: Literal[get_themes]): pass  # Fresh options each request
```

**Rich Output Support**:
- **PIL Images**: Auto-displayed in browser
- **Matplotlib plots**: Rendered as PNG
- **File downloads**: Single or multiple files with streaming
- **JSON/text**: Formatted with copy-to-clipboard

**UX Improvements**:
- Dark mode with theme persistence
- Keyboard shortcuts (Ctrl+Enter to submit)
- Auto-focus first field
- Toast notifications
- Upload progress with speed indicators

**Current stats:**
- 180+ GitHub stars (The chinese community is sharing it too!)
- 454 unit tests
- Published on PyPI: `pip install func-to-web`
- 20+ runnable examples
- Used daily for internal tools at multiple companies

**Other improvements:**
- **Modular architecture**: Code separated by responsibilities (analysis, validation, form building...)
- **Comprehensive documentation**: Every function and class documented
- **Detailed changelog**: Track all improvements and breaking changes

I've tried to make this as professional and production-ready as possible while keeping the simple API.

Still focused on internal tools and rapid prototyping, not replacing proper web frameworks.

GitHub: https://github.com/offerrall/FuncToWeb

The community feedback really shaped these improvements. Thank you again! Keep the suggestions coming.",2025-10-21T08:43:38.558582
1obxzya,https://www.reddit.com/r/Python/comments/1obxzya/tuesday_daily_thread_advanced_questions/,Tuesday Daily Thread: Advanced questions,AutoModerator,2025-10-21 08:00:30,1,0,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about ...","# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",2025-10-21T08:43:46.847456
1obrz11,https://www.reddit.com/r/Python/comments/1obrz11/assemblytominecraftcommandblockcompiler_python/,Assembly-to-Minecraft-Command-Block-Compiler (Python) ‚Äî updated ‚Äî testers & contributors wanted,bowser04410,2025-10-21 03:57:47,2,0,"¬†I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedba...","I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedback, and contributors. Repo:¬†[https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler](https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler)

What My Project Does:

* Parses a tiny assembly-style language (labels, arithmetic, branches, simple I/O) and emits Minecraft command sequences tailored for command blocks.
* Produces low-level, inspectable output so you can see how program logic maps to in-game command-block logic.
* Implemented in Python for readability and easy contribution.

Target Audience:

* Minecraft command-block creators who want to run low-level programs without mods.
* Hobbyist compiler writers and learners looking for a compact Python codegen example.
* Contributors interested in parsing, code generation, testing strategies, or command optimization.
* This is an educational/hobby tool for small demos and experiments ‚Äî not a production compiler for large-scale programs.

Comparison (how it differs from alternatives):

* Assembly-focused: unlike high-level language‚ÜíMinecraft tools, it targets an assembly-like input so outputs are low-level and easy to debug in command blocks.
* Python-first and lightweight: prioritizes clarity and contributor-friendliness over performance.
* Command-block oriented: designed to work with vanilla in-game command blocks (does not target datapacks or mods).

How to help:

* Test: run examples, try outputs in a world, and note Minecraft version and exact steps when something fails.
* Report: open issues with minimal reproduction files and steps.
* Contribute: PRs welcome for bug fixes, examples, optimizations, docs, or tests ‚Äî look for good-first-issue.",2025-10-21T08:43:46.847573
1obqtmz,https://www.reddit.com/r/Python/comments/1obqtmz/has_any_library_emerged_as_the_replacement_for/,Has any library emerged as the replacement for Poliastro?,KerPop42,2025-10-21 03:15:23,2,1,"I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-...","I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-go. Even if you restrict yourself to 3.11 you *also* have to go back to pip <24.1 because of how some package requirements are written. I've looked around and can't find any other orbital dynamics libraries that are more than personal projects. Is the field just dead in python?",2025-10-21T08:43:46.847643
1obprx2,https://www.reddit.com/r/Python/comments/1obprx2/building_an_opensource_observability_tool_for/,Building an open-source observability tool for multi-agent systems - looking for feedback,Standard_Career_8603,2025-10-21 02:35:45,3,4,"I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-sour...","I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-source observability tool.   
  
**What it does**:  
\- Tracks information flow between agents   
\- Shows which tools are being called with what parameters   
\- Monitors how prompt changes affect agent behavior   
\- Works in both development and production   
  
**The gap I'm trying to fill**: Existing tools (LangSmith, LangFuse, AgentOps) are great at LLM observability (tokens, costs, latency), but I feel like they don't help much with multi-agent coordination. They show you **what** happened but not **why** agents failed to coordinate.   
  
  
**Looking for feedback**:  
1. Have you built multi-agent systems? What do you use for debugging?   
2. Does this solve a real problem or am I overengineering?   
3. What features would actually make this useful for you? Still early days, but happy to share the repo if folks are interested.",2025-10-21T08:43:46.847671
1obpjnf,https://www.reddit.com/r/Python/comments/1obpjnf/i_built_a_tool_that_runs_your_python_function_on/,i built a tool that runs your python function on 10k vms in parallel with one line of code.,Ok_Post_149,2025-10-21 02:25:33,5,7,"# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to ...","# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to hand it over to DevOps, the backlog would grow, and overall throughput would tank.

So I built **Burla**, the simplest cluster compute software that lets even Python beginners run code on massive clusters in the cloud. It‚Äôs one function with two parameters: the function and the inputs. You can bring your own Docker image, set hardware requirements, and run jobs as background tasks so you can fire and forget. Responses are fast, and you can call a million simple functions in just a few seconds.

Burla is built for embarrassingly parallel workloads like preprocessing data, hyperparameter tuning, and batch inference.

# Target Audience

Engineers, data scientists, and analysts who want to scale their code in production or research environments without dealing with infrastructure.

# Comparison

Unlike Ray or Dask, Burla doesn‚Äôt require cluster setup, orchestration, or YAML configs. It‚Äôs just:

    from burla import remote_parallel_map
    remote_parallel_map(func, inputs)
    

That‚Äôs it. It automatically handles distribution, retries, logging, and scaling across up to 10,000 VMs.

# Open Source & Free Credits

Burla is open source, and I‚Äôm improving the installation process. I also created managed versions for testing. If you want to try it, I‚Äôll cover 1,000 CPU hours and 100 GPU hours. Email me at [joe@burla.dev]() if interested.

Here‚Äôs a short intro video:  
[https://www.youtube.com/watch?v=9d22y\_kWjyE](https://www.youtube.com/watch?v=9d22y_kWjyE)

GitHub ‚Üí¬†[https://github.com/Burla-Cloud/burla](https://github.com/Burla-Cloud/burla)  
Docs ‚Üí¬†[https://docs.burla.dev](https://docs.burla.dev/)",2025-10-21T08:43:46.847711
1oborpj,https://www.reddit.com/r/Python/comments/1oborpj/i_made_a_python_bot_that_turns_your_text_images/,I made a Python bot that turns your text & images into diagrams right in Telegram.,No_Mongoose_8139,2025-10-21 01:51:22,0,5,"https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project ...","https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project structure, a mind map, or just explain a concept. Every time, I had to open heavy editors like Miro or Figma, which felt like overkill.

So, I decided to build a tool that lives right inside the app I use for communication all day: Telegram.

I'm excited to share my side project: **Diagrammer Bot**. It's a simple yet powerful bot in Python that lets you create diagrams on the fly.

**Here are the key features:**
*   **Text & Image Nodes:** You can create blocks not just from text, but from any image you send.
*   **Full Editing:** Create, connect, edit, and delete both nodes and edges.
*   **Project System:** Save your diagrams with custom names, load them later, or start new ones.
*   **Themes & Export:** Switch between a sleek dark mode and a clean light mode. Export your final diagram as a high-quality PNG.
*   **Open-Source:** The entire project is available on GitHub!

**Tech Stack:** Python, `python-telegram-bot`, `Graphviz` for rendering, and `Pillow` for watermarking.

I would be incredibly grateful for any feedback, feature ideas, or bug reports. And of course, a star ‚≠ê on GitHub would make my day!

*   **Try the bot here:** [https://t.me/diagrammer_robot](https://t.me/diagrammer_robot)
*   **Check out the code on GitHub:** [https://github.com/Lixher/Diagrammer-bot](https://github.com/Lixher/Diagrammer-Bot)",2025-10-21T08:43:46.847981
1oborib,https://www.reddit.com/r/Python/comments/1oborib/i_built_a_persistent_kv_store_in_pure_python/,I built a Persistent KV Store in Pure Python,vollhard-natta,2025-10-21 01:51:07,24,1,"Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been work...","Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been working on for the past few months. It is a lightweight, persistent key-value storage engine in Python, built from scratch to understand and implement the Log-Structured Merge-tree (LSM-tree) architecture. The project, which is fully open-source, is explicitly optimized for write-heavy workloads. 



# Core Architecture:

The engine implements the three fundamental LSM components: the **Write Ahead Log (WAL)** for durability, an in-memory **Memtable** (using `SortedDict` for sorted writes), and immutable persistent **SSTables (Sorted String Tables)**.

Some features that I'm proud of:

* **Async Compaction**: Merging and compaction are handled by a **separate background worker thread**. The process itself takes a hybrid approach.
* **Client/Server Model**: The entire storage engine runs behind a **FastAPI server**. This allows multiple clients to connect via REST APIs or the included CLI tool.
* **Efficient Range Queries**: Added full support for range queries from `start_key` to `end_key`. This is achieved via a memory-efficient **k-way merge iterator** that combines results from the Memtable and all SSTables. The FastAPI server delivers the results using a `StreamingResponse` to prevent memory exhaustion for large result sets.
* **Bloom Filter**: Implemented a **Bloom Filter** for each SSTable to drastically reduce disk I/O by confirming that a key definitely does not exist before attempting a disk seek.
* **Binary Storage**: SSTables now use **Msgpack binary format** instead of JSON for smaller file sizes and reduced CPU load during serialization/deserialization.

My favourite part of the project is that I actually got to see a practical implementation of [Merge Sorted Arrays - GeeksforGeeks](https://www.geeksforgeeks.org/dsa/merge-k-sorted-arrays/). This is a pretty popular interview question and to see DSA being actually implemented is a crazy moment.

# Get Started

    pip install lsm_storage_engine_key_value_store

**Usage via CLI/Server:**

1. **Terminal 1 (Server):** `lsm-server`
2. **Terminal 2 (Client):** `lsm-cli` (Follow the CLI help for commands).

# Looking for Feedback

I'd love to hear your thoughts about this implementation and how I can make it better and what features I can add in later versions. Ideas and constructive criticism are always welcome. I'm also looking for contributors, if anyone is interested, please feel free to PM and we can discuss.

Repo link: [Shashank1985/storage-engine](https://github.com/Shashank1985/storage-engine)  
Thanks!!",2025-10-21T08:43:46.848044
1obo3rg,https://www.reddit.com/r/Python/comments/1obo3rg/kryypto_an_open_source_python_text_editor/,Kryypto an open source python text editor.,SxxVe,2025-10-21 01:21:30,3,5,"Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
*...","Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
* Full Keyboard Support ‚Äì no need for the mouse, every feature is accessible via hotkeys
* Discord presence
* Live MarkDown Preview
* Session Restore
* Custom Styling
   * `config\configuration.cfg` for editor settings
   * CSS for theme and style customization
* Editing Tools
   * Find text in file
   * Jump to line
   * Adjustable cursor (color & width)
   * Configurable animations (types & duration)
* Git & GitHub Integration
   * View total commits
   * See last commit message & date
   * Track file changes directly inside the editor
* Productivity Features
   * Autocompleter
   * Builtin Terminal
   * Docstring panel (hover to see function/class docstring)
   * Tab-based file switching
   * Bookmarking lines
   * Custom title bar
* Syntax Highlighting for
   * Python
   * CSS
   * JSON
   * Config files
   * Markdown

Target Audience

* Developers who prefer keyboard-driven workflows (no mouse required)
* Users looking for a lightweight alternative to heavier IDEs
* People who want to customize their editor with CSS and configuration settings
* Anyone experimenting with Python-based editors or open-source text editing tools

# Comparison:

* Lightweight ‚Äì minimal overhead, focused on speed
* Highly customizable ‚Äì styling via CSS and config files
* Keyboard-centric ‚Äì designed to be fully usable without a mouse

  
github repo: [https://github.com/NaturalCapsule/Kryypto](https://github.com/NaturalCapsule/Kryypto)

  
website: [https://naturalcapsule.github.io/Kryypto/](https://naturalcapsule.github.io/Kryypto/)",2025-10-21T08:43:46.848133
1obo0ze,https://www.reddit.com/r/Python/comments/1obo0ze/forgetting_python/,Forgetting Python,Ashamed-Society-2875,2025-10-21 01:17:52,0,4,"I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping f...","I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping for college exams , now when i come back to python it feels i have lost my level and my touch i feel like fkn loser , all those hrs spent in 8th grade for nothing , i forgot a lot , is it common or just me???",2025-10-21T08:43:46.848197
1obmzbm,https://www.reddit.com/r/Python/comments/1obmzbm/functoweb_is_now_much_better_thanks_for_the/,func-to-web is now much better ‚Äì Thanks for the feedback!,drboom9,2025-10-21 00:27:41,8,0,"15 days ago I shared func-to-web here and got amazing feedback (150+ upvotes, thank you!). Since then, I've been working hard on the suggestions and a...","15 days ago I shared func-to-web here and got amazing feedback (150+ upvotes, thank you!). Since then, I've been working hard on the suggestions and added some major features.

**What it does (quick reminder):**
Turn any Python function into a web UI with zero boilerplate:

```python
from func_to_web import run

def divide(a: int, b: int):
    return a / b

run(divide)  # Web form at localhost:8000
```

**Major updates since v0.1:**

**Dynamic Lists** ‚Äì Add/remove items with advanced validation:
```python
def process_data(
    # Dynamic lists with add/remove buttons
    images: list[ImageFile],                      # Multiple file uploads
    
    # Dual validation: list size AND individual items
    scores: Annotated[
        list[Annotated[int, Field(ge=0, le=100)]], 
        Field(min_length=3, max_length=10)
    ],  # 3-10 items required, each 0-100
    
    # Optional fields with toggle switches
    notes: str | None = None,                     # Optional text
    tags: list[str] | None = None                 # Optional list
):
    return FileResponse(generate_pdf(), ""report.pdf"")  # Auto-download
```

**High-Performance File Handling** ‚Äì Optimized streaming for large files:
- **Upload**: Real-time progress bars, 8MB chunks, handles GB+ files
- **Download**: Return `FileResponse(data, filename)` for auto-downloads
- **Performance**: ~237 MB/s localhost, ~115 MB/s over Gigabit Ethernet
- **Memory efficient**: Constant usage regardless of file size
- **Any format**: PDF, Excel, ZIP, images, binary data

**Optional Fields** ‚Äì `Type | None` creates toggle switches:
- Fields with defaults start enabled, without defaults start disabled
- Explicit control: `Type | OptionalEnabled/OptionalDisabled`
- Works with all types, constraints, and lists

**Dynamic Dropdowns** ‚Äì Runtime-generated options:
```python
def get_themes(): return fetch_from_database()

def configure(theme: Literal[get_themes]): pass  # Fresh options each request
```

**Rich Output Support**:
- **PIL Images**: Auto-displayed in browser
- **Matplotlib plots**: Rendered as PNG
- **File downloads**: Single or multiple files with streaming
- **JSON/text**: Formatted with copy-to-clipboard

**UX Improvements**:
- Dark mode with theme persistence
- Keyboard shortcuts (Ctrl+Enter to submit)
- Auto-focus first field
- Toast notifications
- Upload progress with speed indicators

**Current stats:**
- 180+ GitHub stars (The chinese community is sharing it too!)
- 454 unit tests
- Published on PyPI: `pip install func-to-web`
- 20+ runnable examples
- Used daily for internal tools at multiple companies

**Other improvements:**
- **Modular architecture**: Code separated by responsibilities (analysis, validation, form building...)
- **Comprehensive documentation**: Every function and class documented
- **Detailed changelog**: Track all improvements and breaking changes

I've tried to make this as professional and production-ready as possible while keeping the simple API.

Still focused on internal tools and rapid prototyping, not replacing proper web frameworks.

GitHub: https://github.com/offerrall/FuncToWeb

The community feedback really shaped these improvements. Thank you again! Keep the suggestions coming.",2025-10-21T08:43:46.848237
1obxzya,https://www.reddit.com/r/Python/comments/1obxzya/tuesday_daily_thread_advanced_questions/,Tuesday Daily Thread: Advanced questions,AutoModerator,2025-10-21 08:00:30,1,0,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about ...","# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",2025-10-21T08:45:15.912724
1obrz11,https://www.reddit.com/r/Python/comments/1obrz11/assemblytominecraftcommandblockcompiler_python/,Assembly-to-Minecraft-Command-Block-Compiler (Python) ‚Äî updated ‚Äî testers & contributors wanted,bowser04410,2025-10-21 03:57:47,2,0,"¬†I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedba...","I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedback, and contributors. Repo:¬†[https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler](https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler)

What My Project Does:

* Parses a tiny assembly-style language (labels, arithmetic, branches, simple I/O) and emits Minecraft command sequences tailored for command blocks.
* Produces low-level, inspectable output so you can see how program logic maps to in-game command-block logic.
* Implemented in Python for readability and easy contribution.

Target Audience:

* Minecraft command-block creators who want to run low-level programs without mods.
* Hobbyist compiler writers and learners looking for a compact Python codegen example.
* Contributors interested in parsing, code generation, testing strategies, or command optimization.
* This is an educational/hobby tool for small demos and experiments ‚Äî not a production compiler for large-scale programs.

Comparison (how it differs from alternatives):

* Assembly-focused: unlike high-level language‚ÜíMinecraft tools, it targets an assembly-like input so outputs are low-level and easy to debug in command blocks.
* Python-first and lightweight: prioritizes clarity and contributor-friendliness over performance.
* Command-block oriented: designed to work with vanilla in-game command blocks (does not target datapacks or mods).

How to help:

* Test: run examples, try outputs in a world, and note Minecraft version and exact steps when something fails.
* Report: open issues with minimal reproduction files and steps.
* Contribute: PRs welcome for bug fixes, examples, optimizations, docs, or tests ‚Äî look for good-first-issue.",2025-10-21T08:45:15.912882
1obqtmz,https://www.reddit.com/r/Python/comments/1obqtmz/has_any_library_emerged_as_the_replacement_for/,Has any library emerged as the replacement for Poliastro?,KerPop42,2025-10-21 03:15:23,2,1,"I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-...","I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-go. Even if you restrict yourself to 3.11 you *also* have to go back to pip <24.1 because of how some package requirements are written. I've looked around and can't find any other orbital dynamics libraries that are more than personal projects. Is the field just dead in python?",2025-10-21T08:45:15.913000
1obprx2,https://www.reddit.com/r/Python/comments/1obprx2/building_an_opensource_observability_tool_for/,Building an open-source observability tool for multi-agent systems - looking for feedback,Standard_Career_8603,2025-10-21 02:35:45,5,4,"I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-sour...","I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-source observability tool.   
  
**What it does**:  
\- Tracks information flow between agents   
\- Shows which tools are being called with what parameters   
\- Monitors how prompt changes affect agent behavior   
\- Works in both development and production   
  
**The gap I'm trying to fill**: Existing tools (LangSmith, LangFuse, AgentOps) are great at LLM observability (tokens, costs, latency), but I feel like they don't help much with multi-agent coordination. They show you **what** happened but not **why** agents failed to coordinate.   
  
  
**Looking for feedback**:  
1. Have you built multi-agent systems? What do you use for debugging?   
2. Does this solve a real problem or am I overengineering?   
3. What features would actually make this useful for you? Still early days, but happy to share the repo if folks are interested.",2025-10-21T08:45:15.913046
1obpjnf,https://www.reddit.com/r/Python/comments/1obpjnf/i_built_a_tool_that_runs_your_python_function_on/,i built a tool that runs your python function on 10k vms in parallel with one line of code.,Ok_Post_149,2025-10-21 02:25:33,6,7,"# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to ...","# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to hand it over to DevOps, the backlog would grow, and overall throughput would tank.

So I built **Burla**, the simplest cluster compute software that lets even Python beginners run code on massive clusters in the cloud. It‚Äôs one function with two parameters: the function and the inputs. You can bring your own Docker image, set hardware requirements, and run jobs as background tasks so you can fire and forget. Responses are fast, and you can call a million simple functions in just a few seconds.

Burla is built for embarrassingly parallel workloads like preprocessing data, hyperparameter tuning, and batch inference.

# Target Audience

Engineers, data scientists, and analysts who want to scale their code in production or research environments without dealing with infrastructure.

# Comparison

Unlike Ray or Dask, Burla doesn‚Äôt require cluster setup, orchestration, or YAML configs. It‚Äôs just:

    from burla import remote_parallel_map
    remote_parallel_map(func, inputs)
    

That‚Äôs it. It automatically handles distribution, retries, logging, and scaling across up to 10,000 VMs.

# Open Source & Free Credits

Burla is open source, and I‚Äôm improving the installation process. I also created managed versions for testing. If you want to try it, I‚Äôll cover 1,000 CPU hours and 100 GPU hours. Email me at [joe@burla.dev]() if interested.

Here‚Äôs a short intro video:  
[https://www.youtube.com/watch?v=9d22y\_kWjyE](https://www.youtube.com/watch?v=9d22y_kWjyE)

GitHub ‚Üí¬†[https://github.com/Burla-Cloud/burla](https://github.com/Burla-Cloud/burla)  
Docs ‚Üí¬†[https://docs.burla.dev](https://docs.burla.dev/)",2025-10-21T08:45:15.913115
1oborpj,https://www.reddit.com/r/Python/comments/1oborpj/i_made_a_python_bot_that_turns_your_text_images/,I made a Python bot that turns your text & images into diagrams right in Telegram.,No_Mongoose_8139,2025-10-21 01:51:22,0,5,"https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project ...","https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project structure, a mind map, or just explain a concept. Every time, I had to open heavy editors like Miro or Figma, which felt like overkill.

So, I decided to build a tool that lives right inside the app I use for communication all day: Telegram.

I'm excited to share my side project: **Diagrammer Bot**. It's a simple yet powerful bot in Python that lets you create diagrams on the fly.

**Here are the key features:**
*   **Text & Image Nodes:** You can create blocks not just from text, but from any image you send.
*   **Full Editing:** Create, connect, edit, and delete both nodes and edges.
*   **Project System:** Save your diagrams with custom names, load them later, or start new ones.
*   **Themes & Export:** Switch between a sleek dark mode and a clean light mode. Export your final diagram as a high-quality PNG.
*   **Open-Source:** The entire project is available on GitHub!

**Tech Stack:** Python, `python-telegram-bot`, `Graphviz` for rendering, and `Pillow` for watermarking.

I would be incredibly grateful for any feedback, feature ideas, or bug reports. And of course, a star ‚≠ê on GitHub would make my day!

*   **Try the bot here:** [https://t.me/diagrammer_robot](https://t.me/diagrammer_robot)
*   **Check out the code on GitHub:** [https://github.com/Lixher/Diagrammer-bot](https://github.com/Lixher/Diagrammer-Bot)",2025-10-21T08:45:15.913459
1oborib,https://www.reddit.com/r/Python/comments/1oborib/i_built_a_persistent_kv_store_in_pure_python/,I built a Persistent KV Store in Pure Python,vollhard-natta,2025-10-21 01:51:07,27,1,"Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been work...","Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been working on for the past few months. It is a lightweight, persistent key-value storage engine in Python, built from scratch to understand and implement the Log-Structured Merge-tree (LSM-tree) architecture. The project, which is fully open-source, is explicitly optimized for write-heavy workloads. 



# Core Architecture:

The engine implements the three fundamental LSM components: the **Write Ahead Log (WAL)** for durability, an in-memory **Memtable** (using `SortedDict` for sorted writes), and immutable persistent **SSTables (Sorted String Tables)**.

Some features that I'm proud of:

* **Async Compaction**: Merging and compaction are handled by a **separate background worker thread**. The process itself takes a hybrid approach.
* **Client/Server Model**: The entire storage engine runs behind a **FastAPI server**. This allows multiple clients to connect via REST APIs or the included CLI tool.
* **Efficient Range Queries**: Added full support for range queries from `start_key` to `end_key`. This is achieved via a memory-efficient **k-way merge iterator** that combines results from the Memtable and all SSTables. The FastAPI server delivers the results using a `StreamingResponse` to prevent memory exhaustion for large result sets.
* **Bloom Filter**: Implemented a **Bloom Filter** for each SSTable to drastically reduce disk I/O by confirming that a key definitely does not exist before attempting a disk seek.
* **Binary Storage**: SSTables now use **Msgpack binary format** instead of JSON for smaller file sizes and reduced CPU load during serialization/deserialization.

My favourite part of the project is that I actually got to see a practical implementation of [Merge Sorted Arrays - GeeksforGeeks](https://www.geeksforgeeks.org/dsa/merge-k-sorted-arrays/). This is a pretty popular interview question and to see DSA being actually implemented is a crazy moment.

# Get Started

    pip install lsm_storage_engine_key_value_store

**Usage via CLI/Server:**

1. **Terminal 1 (Server):** `lsm-server`
2. **Terminal 2 (Client):** `lsm-cli` (Follow the CLI help for commands).

# Looking for Feedback

I'd love to hear your thoughts about this implementation and how I can make it better and what features I can add in later versions. Ideas and constructive criticism are always welcome. I'm also looking for contributors, if anyone is interested, please feel free to PM and we can discuss.

Repo link: [Shashank1985/storage-engine](https://github.com/Shashank1985/storage-engine)  
Thanks!!",2025-10-21T08:45:15.913569
1obo3rg,https://www.reddit.com/r/Python/comments/1obo3rg/kryypto_an_open_source_python_text_editor/,Kryypto an open source python text editor.,SxxVe,2025-10-21 01:21:30,3,5,"Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
*...","Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
* Full Keyboard Support ‚Äì no need for the mouse, every feature is accessible via hotkeys
* Discord presence
* Live MarkDown Preview
* Session Restore
* Custom Styling
   * `config\configuration.cfg` for editor settings
   * CSS for theme and style customization
* Editing Tools
   * Find text in file
   * Jump to line
   * Adjustable cursor (color & width)
   * Configurable animations (types & duration)
* Git & GitHub Integration
   * View total commits
   * See last commit message & date
   * Track file changes directly inside the editor
* Productivity Features
   * Autocompleter
   * Builtin Terminal
   * Docstring panel (hover to see function/class docstring)
   * Tab-based file switching
   * Bookmarking lines
   * Custom title bar
* Syntax Highlighting for
   * Python
   * CSS
   * JSON
   * Config files
   * Markdown

Target Audience

* Developers who prefer keyboard-driven workflows (no mouse required)
* Users looking for a lightweight alternative to heavier IDEs
* People who want to customize their editor with CSS and configuration settings
* Anyone experimenting with Python-based editors or open-source text editing tools

# Comparison:

* Lightweight ‚Äì minimal overhead, focused on speed
* Highly customizable ‚Äì styling via CSS and config files
* Keyboard-centric ‚Äì designed to be fully usable without a mouse

  
github repo: [https://github.com/NaturalCapsule/Kryypto](https://github.com/NaturalCapsule/Kryypto)

  
website: [https://naturalcapsule.github.io/Kryypto/](https://naturalcapsule.github.io/Kryypto/)",2025-10-21T08:45:15.913696
1obo0ze,https://www.reddit.com/r/Python/comments/1obo0ze/forgetting_python/,Forgetting Python,Ashamed-Society-2875,2025-10-21 01:17:52,0,4,"I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping f...","I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping for college exams , now when i come back to python it feels i have lost my level and my touch i feel like fkn loser , all those hrs spent in 8th grade for nothing , i forgot a lot , is it common or just me???",2025-10-21T08:45:15.913802
1obmzbm,https://www.reddit.com/r/Python/comments/1obmzbm/functoweb_is_now_much_better_thanks_for_the/,func-to-web is now much better ‚Äì Thanks for the feedback!,drboom9,2025-10-21 00:27:41,7,0,"15 days ago I shared func-to-web here and got amazing feedback (150+ upvotes, thank you!). Since then, I've been working hard on the suggestions and a...","15 days ago I shared func-to-web here and got amazing feedback (150+ upvotes, thank you!). Since then, I've been working hard on the suggestions and added some major features.

**What it does (quick reminder):**
Turn any Python function into a web UI with zero boilerplate:

```python
from func_to_web import run

def divide(a: int, b: int):
    return a / b

run(divide)  # Web form at localhost:8000
```

**Major updates since v0.1:**

**Dynamic Lists** ‚Äì Add/remove items with advanced validation:
```python
def process_data(
    # Dynamic lists with add/remove buttons
    images: list[ImageFile],                      # Multiple file uploads
    
    # Dual validation: list size AND individual items
    scores: Annotated[
        list[Annotated[int, Field(ge=0, le=100)]], 
        Field(min_length=3, max_length=10)
    ],  # 3-10 items required, each 0-100
    
    # Optional fields with toggle switches
    notes: str | None = None,                     # Optional text
    tags: list[str] | None = None                 # Optional list
):
    return FileResponse(generate_pdf(), ""report.pdf"")  # Auto-download
```

**High-Performance File Handling** ‚Äì Optimized streaming for large files:
- **Upload**: Real-time progress bars, 8MB chunks, handles GB+ files
- **Download**: Return `FileResponse(data, filename)` for auto-downloads
- **Performance**: ~237 MB/s localhost, ~115 MB/s over Gigabit Ethernet
- **Memory efficient**: Constant usage regardless of file size
- **Any format**: PDF, Excel, ZIP, images, binary data

**Optional Fields** ‚Äì `Type | None` creates toggle switches:
- Fields with defaults start enabled, without defaults start disabled
- Explicit control: `Type | OptionalEnabled/OptionalDisabled`
- Works with all types, constraints, and lists

**Dynamic Dropdowns** ‚Äì Runtime-generated options:
```python
def get_themes(): return fetch_from_database()

def configure(theme: Literal[get_themes]): pass  # Fresh options each request
```

**Rich Output Support**:
- **PIL Images**: Auto-displayed in browser
- **Matplotlib plots**: Rendered as PNG
- **File downloads**: Single or multiple files with streaming
- **JSON/text**: Formatted with copy-to-clipboard

**UX Improvements**:
- Dark mode with theme persistence
- Keyboard shortcuts (Ctrl+Enter to submit)
- Auto-focus first field
- Toast notifications
- Upload progress with speed indicators

**Current stats:**
- 180+ GitHub stars (The chinese community is sharing it too!)
- 454 unit tests
- Published on PyPI: `pip install func-to-web`
- 20+ runnable examples
- Used daily for internal tools at multiple companies

**Other improvements:**
- **Modular architecture**: Code separated by responsibilities (analysis, validation, form building...)
- **Comprehensive documentation**: Every function and class documented
- **Detailed changelog**: Track all improvements and breaking changes

I've tried to make this as professional and production-ready as possible while keeping the simple API.

Still focused on internal tools and rapid prototyping, not replacing proper web frameworks.

GitHub: https://github.com/offerrall/FuncToWeb

The community feedback really shaped these improvements. Thank you again! Keep the suggestions coming.",2025-10-21T08:45:15.913839
1obxzya,https://www.reddit.com/r/Python/comments/1obxzya/tuesday_daily_thread_advanced_questions/,Tuesday Daily Thread: Advanced questions,AutoModerator,2025-10-21 08:00:30,1,0,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about ...","# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",2025-10-21T08:46:46.794900
1obrz11,https://www.reddit.com/r/Python/comments/1obrz11/assemblytominecraftcommandblockcompiler_python/,Assembly-to-Minecraft-Command-Block-Compiler (Python) ‚Äî updated ‚Äî testers & contributors wanted,bowser04410,2025-10-21 03:57:47,3,0,"¬†I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedba...","I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedback, and contributors. Repo:¬†[https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler](https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler)

What My Project Does:

* Parses a tiny assembly-style language (labels, arithmetic, branches, simple I/O) and emits Minecraft command sequences tailored for command blocks.
* Produces low-level, inspectable output so you can see how program logic maps to in-game command-block logic.
* Implemented in Python for readability and easy contribution.

Target Audience:

* Minecraft command-block creators who want to run low-level programs without mods.
* Hobbyist compiler writers and learners looking for a compact Python codegen example.
* Contributors interested in parsing, code generation, testing strategies, or command optimization.
* This is an educational/hobby tool for small demos and experiments ‚Äî not a production compiler for large-scale programs.

Comparison (how it differs from alternatives):

* Assembly-focused: unlike high-level language‚ÜíMinecraft tools, it targets an assembly-like input so outputs are low-level and easy to debug in command blocks.
* Python-first and lightweight: prioritizes clarity and contributor-friendliness over performance.
* Command-block oriented: designed to work with vanilla in-game command blocks (does not target datapacks or mods).

How to help:

* Test: run examples, try outputs in a world, and note Minecraft version and exact steps when something fails.
* Report: open issues with minimal reproduction files and steps.
* Contribute: PRs welcome for bug fixes, examples, optimizations, docs, or tests ‚Äî look for good-first-issue.",2025-10-21T08:46:46.795038
1obqtmz,https://www.reddit.com/r/Python/comments/1obqtmz/has_any_library_emerged_as_the_replacement_for/,Has any library emerged as the replacement for Poliastro?,KerPop42,2025-10-21 03:15:23,2,1,"I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-...","I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-go. Even if you restrict yourself to 3.11 you *also* have to go back to pip <24.1 because of how some package requirements are written. I've looked around and can't find any other orbital dynamics libraries that are more than personal projects. Is the field just dead in python?",2025-10-21T08:46:46.795155
1obprx2,https://www.reddit.com/r/Python/comments/1obprx2/building_an_opensource_observability_tool_for/,Building an open-source observability tool for multi-agent systems - looking for feedback,Standard_Career_8603,2025-10-21 02:35:45,3,4,"I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-sour...","I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-source observability tool.   
  
**What it does**:  
\- Tracks information flow between agents   
\- Shows which tools are being called with what parameters   
\- Monitors how prompt changes affect agent behavior   
\- Works in both development and production   
  
**The gap I'm trying to fill**: Existing tools (LangSmith, LangFuse, AgentOps) are great at LLM observability (tokens, costs, latency), but I feel like they don't help much with multi-agent coordination. They show you **what** happened but not **why** agents failed to coordinate.   
  
  
**Looking for feedback**:  
1. Have you built multi-agent systems? What do you use for debugging?   
2. Does this solve a real problem or am I overengineering?   
3. What features would actually make this useful for you? Still early days, but happy to share the repo if folks are interested.",2025-10-21T08:46:46.795200
1obpjnf,https://www.reddit.com/r/Python/comments/1obpjnf/i_built_a_tool_that_runs_your_python_function_on/,i built a tool that runs your python function on 10k vms in parallel with one line of code.,Ok_Post_149,2025-10-21 02:25:33,4,7,"# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to ...","# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to hand it over to DevOps, the backlog would grow, and overall throughput would tank.

So I built **Burla**, the simplest cluster compute software that lets even Python beginners run code on massive clusters in the cloud. It‚Äôs one function with two parameters: the function and the inputs. You can bring your own Docker image, set hardware requirements, and run jobs as background tasks so you can fire and forget. Responses are fast, and you can call a million simple functions in just a few seconds.

Burla is built for embarrassingly parallel workloads like preprocessing data, hyperparameter tuning, and batch inference.

# Target Audience

Engineers, data scientists, and analysts who want to scale their code in production or research environments without dealing with infrastructure.

# Comparison

Unlike Ray or Dask, Burla doesn‚Äôt require cluster setup, orchestration, or YAML configs. It‚Äôs just:

    from burla import remote_parallel_map
    remote_parallel_map(func, inputs)
    

That‚Äôs it. It automatically handles distribution, retries, logging, and scaling across up to 10,000 VMs.

# Open Source & Free Credits

Burla is open source, and I‚Äôm improving the installation process. I also created managed versions for testing. If you want to try it, I‚Äôll cover 1,000 CPU hours and 100 GPU hours. Email me at [joe@burla.dev]() if interested.

Here‚Äôs a short intro video:  
[https://www.youtube.com/watch?v=9d22y\_kWjyE](https://www.youtube.com/watch?v=9d22y_kWjyE)

GitHub ‚Üí¬†[https://github.com/Burla-Cloud/burla](https://github.com/Burla-Cloud/burla)  
Docs ‚Üí¬†[https://docs.burla.dev](https://docs.burla.dev/)",2025-10-21T08:46:46.795265
1oborpj,https://www.reddit.com/r/Python/comments/1oborpj/i_made_a_python_bot_that_turns_your_text_images/,I made a Python bot that turns your text & images into diagrams right in Telegram.,No_Mongoose_8139,2025-10-21 01:51:22,0,5,"https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project ...","https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project structure, a mind map, or just explain a concept. Every time, I had to open heavy editors like Miro or Figma, which felt like overkill.

So, I decided to build a tool that lives right inside the app I use for communication all day: Telegram.

I'm excited to share my side project: **Diagrammer Bot**. It's a simple yet powerful bot in Python that lets you create diagrams on the fly.

**Here are the key features:**
*   **Text & Image Nodes:** You can create blocks not just from text, but from any image you send.
*   **Full Editing:** Create, connect, edit, and delete both nodes and edges.
*   **Project System:** Save your diagrams with custom names, load them later, or start new ones.
*   **Themes & Export:** Switch between a sleek dark mode and a clean light mode. Export your final diagram as a high-quality PNG.
*   **Open-Source:** The entire project is available on GitHub!

**Tech Stack:** Python, `python-telegram-bot`, `Graphviz` for rendering, and `Pillow` for watermarking.

I would be incredibly grateful for any feedback, feature ideas, or bug reports. And of course, a star ‚≠ê on GitHub would make my day!

*   **Try the bot here:** [https://t.me/diagrammer_robot](https://t.me/diagrammer_robot)
*   **Check out the code on GitHub:** [https://github.com/Lixher/Diagrammer-bot](https://github.com/Lixher/Diagrammer-Bot)",2025-10-21T08:46:46.795713
1oborib,https://www.reddit.com/r/Python/comments/1oborib/i_built_a_persistent_kv_store_in_pure_python/,I built a Persistent KV Store in Pure Python,vollhard-natta,2025-10-21 01:51:07,25,1,"Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been work...","Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been working on for the past few months. It is a lightweight, persistent key-value storage engine in Python, built from scratch to understand and implement the Log-Structured Merge-tree (LSM-tree) architecture. The project, which is fully open-source, is explicitly optimized for write-heavy workloads. 



# Core Architecture:

The engine implements the three fundamental LSM components: the **Write Ahead Log (WAL)** for durability, an in-memory **Memtable** (using `SortedDict` for sorted writes), and immutable persistent **SSTables (Sorted String Tables)**.

Some features that I'm proud of:

* **Async Compaction**: Merging and compaction are handled by a **separate background worker thread**. The process itself takes a hybrid approach.
* **Client/Server Model**: The entire storage engine runs behind a **FastAPI server**. This allows multiple clients to connect via REST APIs or the included CLI tool.
* **Efficient Range Queries**: Added full support for range queries from `start_key` to `end_key`. This is achieved via a memory-efficient **k-way merge iterator** that combines results from the Memtable and all SSTables. The FastAPI server delivers the results using a `StreamingResponse` to prevent memory exhaustion for large result sets.
* **Bloom Filter**: Implemented a **Bloom Filter** for each SSTable to drastically reduce disk I/O by confirming that a key definitely does not exist before attempting a disk seek.
* **Binary Storage**: SSTables now use **Msgpack binary format** instead of JSON for smaller file sizes and reduced CPU load during serialization/deserialization.

My favourite part of the project is that I actually got to see a practical implementation of [Merge Sorted Arrays - GeeksforGeeks](https://www.geeksforgeeks.org/dsa/merge-k-sorted-arrays/). This is a pretty popular interview question and to see DSA being actually implemented is a crazy moment.

# Get Started

    pip install lsm_storage_engine_key_value_store

**Usage via CLI/Server:**

1. **Terminal 1 (Server):** `lsm-server`
2. **Terminal 2 (Client):** `lsm-cli` (Follow the CLI help for commands).

# Looking for Feedback

I'd love to hear your thoughts about this implementation and how I can make it better and what features I can add in later versions. Ideas and constructive criticism are always welcome. I'm also looking for contributors, if anyone is interested, please feel free to PM and we can discuss.

Repo link: [Shashank1985/storage-engine](https://github.com/Shashank1985/storage-engine)  
Thanks!!",2025-10-21T08:46:46.795828
1obo3rg,https://www.reddit.com/r/Python/comments/1obo3rg/kryypto_an_open_source_python_text_editor/,Kryypto an open source python text editor.,SxxVe,2025-10-21 01:21:30,3,5,"Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
*...","Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
* Full Keyboard Support ‚Äì no need for the mouse, every feature is accessible via hotkeys
* Discord presence
* Live MarkDown Preview
* Session Restore
* Custom Styling
   * `config\configuration.cfg` for editor settings
   * CSS for theme and style customization
* Editing Tools
   * Find text in file
   * Jump to line
   * Adjustable cursor (color & width)
   * Configurable animations (types & duration)
* Git & GitHub Integration
   * View total commits
   * See last commit message & date
   * Track file changes directly inside the editor
* Productivity Features
   * Autocompleter
   * Builtin Terminal
   * Docstring panel (hover to see function/class docstring)
   * Tab-based file switching
   * Bookmarking lines
   * Custom title bar
* Syntax Highlighting for
   * Python
   * CSS
   * JSON
   * Config files
   * Markdown

Target Audience

* Developers who prefer keyboard-driven workflows (no mouse required)
* Users looking for a lightweight alternative to heavier IDEs
* People who want to customize their editor with CSS and configuration settings
* Anyone experimenting with Python-based editors or open-source text editing tools

# Comparison:

* Lightweight ‚Äì minimal overhead, focused on speed
* Highly customizable ‚Äì styling via CSS and config files
* Keyboard-centric ‚Äì designed to be fully usable without a mouse

  
github repo: [https://github.com/NaturalCapsule/Kryypto](https://github.com/NaturalCapsule/Kryypto)

  
website: [https://naturalcapsule.github.io/Kryypto/](https://naturalcapsule.github.io/Kryypto/)",2025-10-21T08:46:46.795962
1obo0ze,https://www.reddit.com/r/Python/comments/1obo0ze/forgetting_python/,Forgetting Python,Ashamed-Society-2875,2025-10-21 01:17:52,0,4,"I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping f...","I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping for college exams , now when i come back to python it feels i have lost my level and my touch i feel like fkn loser , all those hrs spent in 8th grade for nothing , i forgot a lot , is it common or just me???",2025-10-21T08:46:46.796069
1obmzbm,https://www.reddit.com/r/Python/comments/1obmzbm/functoweb_is_now_much_better_thanks_for_the/,func-to-web is now much better ‚Äì Thanks for the feedback!,drboom9,2025-10-21 00:27:41,7,0,"15 days ago I shared func-to-web here and got amazing feedback (150+ upvotes, thank you!). Since then, I've been working hard on the suggestions and a...","15 days ago I shared func-to-web here and got amazing feedback (150+ upvotes, thank you!). Since then, I've been working hard on the suggestions and added some major features.

**What it does (quick reminder):**
Turn any Python function into a web UI with zero boilerplate:

```python
from func_to_web import run

def divide(a: int, b: int):
    return a / b

run(divide)  # Web form at localhost:8000
```

**Major updates since v0.1:**

**Dynamic Lists** ‚Äì Add/remove items with advanced validation:
```python
def process_data(
    # Dynamic lists with add/remove buttons
    images: list[ImageFile],                      # Multiple file uploads
    
    # Dual validation: list size AND individual items
    scores: Annotated[
        list[Annotated[int, Field(ge=0, le=100)]], 
        Field(min_length=3, max_length=10)
    ],  # 3-10 items required, each 0-100
    
    # Optional fields with toggle switches
    notes: str | None = None,                     # Optional text
    tags: list[str] | None = None                 # Optional list
):
    return FileResponse(generate_pdf(), ""report.pdf"")  # Auto-download
```

**High-Performance File Handling** ‚Äì Optimized streaming for large files:
- **Upload**: Real-time progress bars, 8MB chunks, handles GB+ files
- **Download**: Return `FileResponse(data, filename)` for auto-downloads
- **Performance**: ~237 MB/s localhost, ~115 MB/s over Gigabit Ethernet
- **Memory efficient**: Constant usage regardless of file size
- **Any format**: PDF, Excel, ZIP, images, binary data

**Optional Fields** ‚Äì `Type | None` creates toggle switches:
- Fields with defaults start enabled, without defaults start disabled
- Explicit control: `Type | OptionalEnabled/OptionalDisabled`
- Works with all types, constraints, and lists

**Dynamic Dropdowns** ‚Äì Runtime-generated options:
```python
def get_themes(): return fetch_from_database()

def configure(theme: Literal[get_themes]): pass  # Fresh options each request
```

**Rich Output Support**:
- **PIL Images**: Auto-displayed in browser
- **Matplotlib plots**: Rendered as PNG
- **File downloads**: Single or multiple files with streaming
- **JSON/text**: Formatted with copy-to-clipboard

**UX Improvements**:
- Dark mode with theme persistence
- Keyboard shortcuts (Ctrl+Enter to submit)
- Auto-focus first field
- Toast notifications
- Upload progress with speed indicators

**Current stats:**
- 180+ GitHub stars (The chinese community is sharing it too!)
- 454 unit tests
- Published on PyPI: `pip install func-to-web`
- 20+ runnable examples
- Used daily for internal tools at multiple companies

**Other improvements:**
- **Modular architecture**: Code separated by responsibilities (analysis, validation, form building...)
- **Comprehensive documentation**: Every function and class documented
- **Detailed changelog**: Track all improvements and breaking changes

I've tried to make this as professional and production-ready as possible while keeping the simple API.

Still focused on internal tools and rapid prototyping, not replacing proper web frameworks.

GitHub: https://github.com/offerrall/FuncToWeb

The community feedback really shaped these improvements. Thank you again! Keep the suggestions coming.",2025-10-21T08:46:46.796115
1obxzya,https://www.reddit.com/r/Python/comments/1obxzya/tuesday_daily_thread_advanced_questions/,Tuesday Daily Thread: Advanced questions,AutoModerator,2025-10-21 08:00:30,1,0,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about ...","# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",2025-10-21T08:48:17.009453
1obrz11,https://www.reddit.com/r/Python/comments/1obrz11/assemblytominecraftcommandblockcompiler_python/,Assembly-to-Minecraft-Command-Block-Compiler (Python) ‚Äî updated ‚Äî testers & contributors wanted,bowser04410,2025-10-21 03:57:47,5,0,"¬†I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedba...","I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedback, and contributors. Repo:¬†[https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler](https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler)

What My Project Does:

* Parses a tiny assembly-style language (labels, arithmetic, branches, simple I/O) and emits Minecraft command sequences tailored for command blocks.
* Produces low-level, inspectable output so you can see how program logic maps to in-game command-block logic.
* Implemented in Python for readability and easy contribution.

Target Audience:

* Minecraft command-block creators who want to run low-level programs without mods.
* Hobbyist compiler writers and learners looking for a compact Python codegen example.
* Contributors interested in parsing, code generation, testing strategies, or command optimization.
* This is an educational/hobby tool for small demos and experiments ‚Äî not a production compiler for large-scale programs.

Comparison (how it differs from alternatives):

* Assembly-focused: unlike high-level language‚ÜíMinecraft tools, it targets an assembly-like input so outputs are low-level and easy to debug in command blocks.
* Python-first and lightweight: prioritizes clarity and contributor-friendliness over performance.
* Command-block oriented: designed to work with vanilla in-game command blocks (does not target datapacks or mods).

How to help:

* Test: run examples, try outputs in a world, and note Minecraft version and exact steps when something fails.
* Report: open issues with minimal reproduction files and steps.
* Contribute: PRs welcome for bug fixes, examples, optimizations, docs, or tests ‚Äî look for good-first-issue.",2025-10-21T08:48:17.009588
1obqtmz,https://www.reddit.com/r/Python/comments/1obqtmz/has_any_library_emerged_as_the_replacement_for/,Has any library emerged as the replacement for Poliastro?,KerPop42,2025-10-21 03:15:23,2,1,"I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-...","I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-go. Even if you restrict yourself to 3.11 you *also* have to go back to pip <24.1 because of how some package requirements are written. I've looked around and can't find any other orbital dynamics libraries that are more than personal projects. Is the field just dead in python?",2025-10-21T08:48:17.009699
1obprx2,https://www.reddit.com/r/Python/comments/1obprx2/building_an_opensource_observability_tool_for/,Building an open-source observability tool for multi-agent systems - looking for feedback,Standard_Career_8603,2025-10-21 02:35:45,4,4,"I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-sour...","I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-source observability tool.   
  
**What it does**:  
\- Tracks information flow between agents   
\- Shows which tools are being called with what parameters   
\- Monitors how prompt changes affect agent behavior   
\- Works in both development and production   
  
**The gap I'm trying to fill**: Existing tools (LangSmith, LangFuse, AgentOps) are great at LLM observability (tokens, costs, latency), but I feel like they don't help much with multi-agent coordination. They show you **what** happened but not **why** agents failed to coordinate.   
  
  
**Looking for feedback**:  
1. Have you built multi-agent systems? What do you use for debugging?   
2. Does this solve a real problem or am I overengineering?   
3. What features would actually make this useful for you? Still early days, but happy to share the repo if folks are interested.",2025-10-21T08:48:17.009743
1obpjnf,https://www.reddit.com/r/Python/comments/1obpjnf/i_built_a_tool_that_runs_your_python_function_on/,i built a tool that runs your python function on 10k vms in parallel with one line of code.,Ok_Post_149,2025-10-21 02:25:33,6,7,"# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to ...","# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to hand it over to DevOps, the backlog would grow, and overall throughput would tank.

So I built **Burla**, the simplest cluster compute software that lets even Python beginners run code on massive clusters in the cloud. It‚Äôs one function with two parameters: the function and the inputs. You can bring your own Docker image, set hardware requirements, and run jobs as background tasks so you can fire and forget. Responses are fast, and you can call a million simple functions in just a few seconds.

Burla is built for embarrassingly parallel workloads like preprocessing data, hyperparameter tuning, and batch inference.

# Target Audience

Engineers, data scientists, and analysts who want to scale their code in production or research environments without dealing with infrastructure.

# Comparison

Unlike Ray or Dask, Burla doesn‚Äôt require cluster setup, orchestration, or YAML configs. It‚Äôs just:

    from burla import remote_parallel_map
    remote_parallel_map(func, inputs)
    

That‚Äôs it. It automatically handles distribution, retries, logging, and scaling across up to 10,000 VMs.

# Open Source & Free Credits

Burla is open source, and I‚Äôm improving the installation process. I also created managed versions for testing. If you want to try it, I‚Äôll cover 1,000 CPU hours and 100 GPU hours. Email me at [joe@burla.dev]() if interested.

Here‚Äôs a short intro video:  
[https://www.youtube.com/watch?v=9d22y\_kWjyE](https://www.youtube.com/watch?v=9d22y_kWjyE)

GitHub ‚Üí¬†[https://github.com/Burla-Cloud/burla](https://github.com/Burla-Cloud/burla)  
Docs ‚Üí¬†[https://docs.burla.dev](https://docs.burla.dev/)",2025-10-21T08:48:17.009806
1oborpj,https://www.reddit.com/r/Python/comments/1oborpj/i_made_a_python_bot_that_turns_your_text_images/,I made a Python bot that turns your text & images into diagrams right in Telegram.,No_Mongoose_8139,2025-10-21 01:51:22,0,5,"https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project ...","https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project structure, a mind map, or just explain a concept. Every time, I had to open heavy editors like Miro or Figma, which felt like overkill.

So, I decided to build a tool that lives right inside the app I use for communication all day: Telegram.

I'm excited to share my side project: **Diagrammer Bot**. It's a simple yet powerful bot in Python that lets you create diagrams on the fly.

**Here are the key features:**
*   **Text & Image Nodes:** You can create blocks not just from text, but from any image you send.
*   **Full Editing:** Create, connect, edit, and delete both nodes and edges.
*   **Project System:** Save your diagrams with custom names, load them later, or start new ones.
*   **Themes & Export:** Switch between a sleek dark mode and a clean light mode. Export your final diagram as a high-quality PNG.
*   **Open-Source:** The entire project is available on GitHub!

**Tech Stack:** Python, `python-telegram-bot`, `Graphviz` for rendering, and `Pillow` for watermarking.

I would be incredibly grateful for any feedback, feature ideas, or bug reports. And of course, a star ‚≠ê on GitHub would make my day!

*   **Try the bot here:** [https://t.me/diagrammer_robot](https://t.me/diagrammer_robot)
*   **Check out the code on GitHub:** [https://github.com/Lixher/Diagrammer-bot](https://github.com/Lixher/Diagrammer-Bot)",2025-10-21T08:48:17.010125
1oborib,https://www.reddit.com/r/Python/comments/1oborib/i_built_a_persistent_kv_store_in_pure_python/,I built a Persistent KV Store in Pure Python,vollhard-natta,2025-10-21 01:51:07,27,1,"Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been work...","Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been working on for the past few months. It is a lightweight, persistent key-value storage engine in Python, built from scratch to understand and implement the Log-Structured Merge-tree (LSM-tree) architecture. The project, which is fully open-source, is explicitly optimized for write-heavy workloads. 



# Core Architecture:

The engine implements the three fundamental LSM components: the **Write Ahead Log (WAL)** for durability, an in-memory **Memtable** (using `SortedDict` for sorted writes), and immutable persistent **SSTables (Sorted String Tables)**.

Some features that I'm proud of:

* **Async Compaction**: Merging and compaction are handled by a **separate background worker thread**. The process itself takes a hybrid approach.
* **Client/Server Model**: The entire storage engine runs behind a **FastAPI server**. This allows multiple clients to connect via REST APIs or the included CLI tool.
* **Efficient Range Queries**: Added full support for range queries from `start_key` to `end_key`. This is achieved via a memory-efficient **k-way merge iterator** that combines results from the Memtable and all SSTables. The FastAPI server delivers the results using a `StreamingResponse` to prevent memory exhaustion for large result sets.
* **Bloom Filter**: Implemented a **Bloom Filter** for each SSTable to drastically reduce disk I/O by confirming that a key definitely does not exist before attempting a disk seek.
* **Binary Storage**: SSTables now use **Msgpack binary format** instead of JSON for smaller file sizes and reduced CPU load during serialization/deserialization.

My favourite part of the project is that I actually got to see a practical implementation of [Merge Sorted Arrays - GeeksforGeeks](https://www.geeksforgeeks.org/dsa/merge-k-sorted-arrays/). This is a pretty popular interview question and to see DSA being actually implemented is a crazy moment.

# Get Started

    pip install lsm_storage_engine_key_value_store

**Usage via CLI/Server:**

1. **Terminal 1 (Server):** `lsm-server`
2. **Terminal 2 (Client):** `lsm-cli` (Follow the CLI help for commands).

# Looking for Feedback

I'd love to hear your thoughts about this implementation and how I can make it better and what features I can add in later versions. Ideas and constructive criticism are always welcome. I'm also looking for contributors, if anyone is interested, please feel free to PM and we can discuss.

Repo link: [Shashank1985/storage-engine](https://github.com/Shashank1985/storage-engine)  
Thanks!!",2025-10-21T08:48:17.010240
1obo3rg,https://www.reddit.com/r/Python/comments/1obo3rg/kryypto_an_open_source_python_text_editor/,Kryypto an open source python text editor.,SxxVe,2025-10-21 01:21:30,3,5,"Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
*...","Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
* Full Keyboard Support ‚Äì no need for the mouse, every feature is accessible via hotkeys
* Discord presence
* Live MarkDown Preview
* Session Restore
* Custom Styling
   * `config\configuration.cfg` for editor settings
   * CSS for theme and style customization
* Editing Tools
   * Find text in file
   * Jump to line
   * Adjustable cursor (color & width)
   * Configurable animations (types & duration)
* Git & GitHub Integration
   * View total commits
   * See last commit message & date
   * Track file changes directly inside the editor
* Productivity Features
   * Autocompleter
   * Builtin Terminal
   * Docstring panel (hover to see function/class docstring)
   * Tab-based file switching
   * Bookmarking lines
   * Custom title bar
* Syntax Highlighting for
   * Python
   * CSS
   * JSON
   * Config files
   * Markdown

Target Audience

* Developers who prefer keyboard-driven workflows (no mouse required)
* Users looking for a lightweight alternative to heavier IDEs
* People who want to customize their editor with CSS and configuration settings
* Anyone experimenting with Python-based editors or open-source text editing tools

# Comparison:

* Lightweight ‚Äì minimal overhead, focused on speed
* Highly customizable ‚Äì styling via CSS and config files
* Keyboard-centric ‚Äì designed to be fully usable without a mouse

  
github repo: [https://github.com/NaturalCapsule/Kryypto](https://github.com/NaturalCapsule/Kryypto)

  
website: [https://naturalcapsule.github.io/Kryypto/](https://naturalcapsule.github.io/Kryypto/)",2025-10-21T08:48:17.010369
1obo0ze,https://www.reddit.com/r/Python/comments/1obo0ze/forgetting_python/,Forgetting Python,Ashamed-Society-2875,2025-10-21 01:17:52,0,4,"I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping f...","I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping for college exams , now when i come back to python it feels i have lost my level and my touch i feel like fkn loser , all those hrs spent in 8th grade for nothing , i forgot a lot , is it common or just me???",2025-10-21T08:48:17.010459
1obmzbm,https://www.reddit.com/r/Python/comments/1obmzbm/functoweb_is_now_much_better_thanks_for_the/,func-to-web is now much better ‚Äì Thanks for the feedback!,drboom9,2025-10-21 00:27:41,9,0,"15 days ago I shared func-to-web here and got amazing feedback (150+ upvotes, thank you!). Since then, I've been working hard on the suggestions and a...","15 days ago I shared func-to-web here and got amazing feedback (150+ upvotes, thank you!). Since then, I've been working hard on the suggestions and added some major features.

**What it does (quick reminder):**
Turn any Python function into a web UI with zero boilerplate:

```python
from func_to_web import run

def divide(a: int, b: int):
    return a / b

run(divide)  # Web form at localhost:8000
```

**Major updates since v0.1:**

**Dynamic Lists** ‚Äì Add/remove items with advanced validation:
```python
def process_data(
    # Dynamic lists with add/remove buttons
    images: list[ImageFile],                      # Multiple file uploads
    
    # Dual validation: list size AND individual items
    scores: Annotated[
        list[Annotated[int, Field(ge=0, le=100)]], 
        Field(min_length=3, max_length=10)
    ],  # 3-10 items required, each 0-100
    
    # Optional fields with toggle switches
    notes: str | None = None,                     # Optional text
    tags: list[str] | None = None                 # Optional list
):
    return FileResponse(generate_pdf(), ""report.pdf"")  # Auto-download
```

**High-Performance File Handling** ‚Äì Optimized streaming for large files:
- **Upload**: Real-time progress bars, 8MB chunks, handles GB+ files
- **Download**: Return `FileResponse(data, filename)` for auto-downloads
- **Performance**: ~237 MB/s localhost, ~115 MB/s over Gigabit Ethernet
- **Memory efficient**: Constant usage regardless of file size
- **Any format**: PDF, Excel, ZIP, images, binary data

**Optional Fields** ‚Äì `Type | None` creates toggle switches:
- Fields with defaults start enabled, without defaults start disabled
- Explicit control: `Type | OptionalEnabled/OptionalDisabled`
- Works with all types, constraints, and lists

**Dynamic Dropdowns** ‚Äì Runtime-generated options:
```python
def get_themes(): return fetch_from_database()

def configure(theme: Literal[get_themes]): pass  # Fresh options each request
```

**Rich Output Support**:
- **PIL Images**: Auto-displayed in browser
- **Matplotlib plots**: Rendered as PNG
- **File downloads**: Single or multiple files with streaming
- **JSON/text**: Formatted with copy-to-clipboard

**UX Improvements**:
- Dark mode with theme persistence
- Keyboard shortcuts (Ctrl+Enter to submit)
- Auto-focus first field
- Toast notifications
- Upload progress with speed indicators

**Current stats:**
- 180+ GitHub stars (The chinese community is sharing it too!)
- 454 unit tests
- Published on PyPI: `pip install func-to-web`
- 20+ runnable examples
- Used daily for internal tools at multiple companies

**Other improvements:**
- **Modular architecture**: Code separated by responsibilities (analysis, validation, form building...)
- **Comprehensive documentation**: Every function and class documented
- **Detailed changelog**: Track all improvements and breaking changes

I've tried to make this as professional and production-ready as possible while keeping the simple API.

Still focused on internal tools and rapid prototyping, not replacing proper web frameworks.

GitHub: https://github.com/offerrall/FuncToWeb

The community feedback really shaped these improvements. Thank you again! Keep the suggestions coming.",2025-10-21T08:48:17.010505
1obxzya,https://www.reddit.com/r/Python/comments/1obxzya/tuesday_daily_thread_advanced_questions/,Tuesday Daily Thread: Advanced questions,AutoModerator,2025-10-21 08:00:30,1,0,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about ...","# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",2025-10-21T08:49:47.087031
1obrz11,https://www.reddit.com/r/Python/comments/1obrz11/assemblytominecraftcommandblockcompiler_python/,Assembly-to-Minecraft-Command-Block-Compiler (Python) ‚Äî updated ‚Äî testers & contributors wanted,bowser04410,2025-10-21 03:57:47,2,0,"¬†I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedba...","I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedback, and contributors. Repo:¬†[https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler](https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler)

What My Project Does:

* Parses a tiny assembly-style language (labels, arithmetic, branches, simple I/O) and emits Minecraft command sequences tailored for command blocks.
* Produces low-level, inspectable output so you can see how program logic maps to in-game command-block logic.
* Implemented in Python for readability and easy contribution.

Target Audience:

* Minecraft command-block creators who want to run low-level programs without mods.
* Hobbyist compiler writers and learners looking for a compact Python codegen example.
* Contributors interested in parsing, code generation, testing strategies, or command optimization.
* This is an educational/hobby tool for small demos and experiments ‚Äî not a production compiler for large-scale programs.

Comparison (how it differs from alternatives):

* Assembly-focused: unlike high-level language‚ÜíMinecraft tools, it targets an assembly-like input so outputs are low-level and easy to debug in command blocks.
* Python-first and lightweight: prioritizes clarity and contributor-friendliness over performance.
* Command-block oriented: designed to work with vanilla in-game command blocks (does not target datapacks or mods).

How to help:

* Test: run examples, try outputs in a world, and note Minecraft version and exact steps when something fails.
* Report: open issues with minimal reproduction files and steps.
* Contribute: PRs welcome for bug fixes, examples, optimizations, docs, or tests ‚Äî look for good-first-issue.",2025-10-21T08:49:47.087188
1obqtmz,https://www.reddit.com/r/Python/comments/1obqtmz/has_any_library_emerged_as_the_replacement_for/,Has any library emerged as the replacement for Poliastro?,KerPop42,2025-10-21 03:15:23,2,1,"I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-...","I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-go. Even if you restrict yourself to 3.11 you *also* have to go back to pip <24.1 because of how some package requirements are written. I've looked around and can't find any other orbital dynamics libraries that are more than personal projects. Is the field just dead in python?",2025-10-21T08:49:47.087259
1obprx2,https://www.reddit.com/r/Python/comments/1obprx2/building_an_opensource_observability_tool_for/,Building an open-source observability tool for multi-agent systems - looking for feedback,Standard_Career_8603,2025-10-21 02:35:45,4,4,"I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-sour...","I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-source observability tool.   
  
**What it does**:  
\- Tracks information flow between agents   
\- Shows which tools are being called with what parameters   
\- Monitors how prompt changes affect agent behavior   
\- Works in both development and production   
  
**The gap I'm trying to fill**: Existing tools (LangSmith, LangFuse, AgentOps) are great at LLM observability (tokens, costs, latency), but I feel like they don't help much with multi-agent coordination. They show you **what** happened but not **why** agents failed to coordinate.   
  
  
**Looking for feedback**:  
1. Have you built multi-agent systems? What do you use for debugging?   
2. Does this solve a real problem or am I overengineering?   
3. What features would actually make this useful for you? Still early days, but happy to share the repo if folks are interested.",2025-10-21T08:49:47.087287
1obpjnf,https://www.reddit.com/r/Python/comments/1obpjnf/i_built_a_tool_that_runs_your_python_function_on/,i built a tool that runs your python function on 10k vms in parallel with one line of code.,Ok_Post_149,2025-10-21 02:25:33,5,7,"# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to ...","# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to hand it over to DevOps, the backlog would grow, and overall throughput would tank.

So I built **Burla**, the simplest cluster compute software that lets even Python beginners run code on massive clusters in the cloud. It‚Äôs one function with two parameters: the function and the inputs. You can bring your own Docker image, set hardware requirements, and run jobs as background tasks so you can fire and forget. Responses are fast, and you can call a million simple functions in just a few seconds.

Burla is built for embarrassingly parallel workloads like preprocessing data, hyperparameter tuning, and batch inference.

# Target Audience

Engineers, data scientists, and analysts who want to scale their code in production or research environments without dealing with infrastructure.

# Comparison

Unlike Ray or Dask, Burla doesn‚Äôt require cluster setup, orchestration, or YAML configs. It‚Äôs just:

    from burla import remote_parallel_map
    remote_parallel_map(func, inputs)
    

That‚Äôs it. It automatically handles distribution, retries, logging, and scaling across up to 10,000 VMs.

# Open Source & Free Credits

Burla is open source, and I‚Äôm improving the installation process. I also created managed versions for testing. If you want to try it, I‚Äôll cover 1,000 CPU hours and 100 GPU hours. Email me at [joe@burla.dev]() if interested.

Here‚Äôs a short intro video:  
[https://www.youtube.com/watch?v=9d22y\_kWjyE](https://www.youtube.com/watch?v=9d22y_kWjyE)

GitHub ‚Üí¬†[https://github.com/Burla-Cloud/burla](https://github.com/Burla-Cloud/burla)  
Docs ‚Üí¬†[https://docs.burla.dev](https://docs.burla.dev/)",2025-10-21T08:49:47.087324
1oborpj,https://www.reddit.com/r/Python/comments/1oborpj/i_made_a_python_bot_that_turns_your_text_images/,I made a Python bot that turns your text & images into diagrams right in Telegram.,No_Mongoose_8139,2025-10-21 01:51:22,0,5,"https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project ...","https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project structure, a mind map, or just explain a concept. Every time, I had to open heavy editors like Miro or Figma, which felt like overkill.

So, I decided to build a tool that lives right inside the app I use for communication all day: Telegram.

I'm excited to share my side project: **Diagrammer Bot**. It's a simple yet powerful bot in Python that lets you create diagrams on the fly.

**Here are the key features:**
*   **Text & Image Nodes:** You can create blocks not just from text, but from any image you send.
*   **Full Editing:** Create, connect, edit, and delete both nodes and edges.
*   **Project System:** Save your diagrams with custom names, load them later, or start new ones.
*   **Themes & Export:** Switch between a sleek dark mode and a clean light mode. Export your final diagram as a high-quality PNG.
*   **Open-Source:** The entire project is available on GitHub!

**Tech Stack:** Python, `python-telegram-bot`, `Graphviz` for rendering, and `Pillow` for watermarking.

I would be incredibly grateful for any feedback, feature ideas, or bug reports. And of course, a star ‚≠ê on GitHub would make my day!

*   **Try the bot here:** [https://t.me/diagrammer_robot](https://t.me/diagrammer_robot)
*   **Check out the code on GitHub:** [https://github.com/Lixher/Diagrammer-bot](https://github.com/Lixher/Diagrammer-Bot)",2025-10-21T08:49:47.087634
1oborib,https://www.reddit.com/r/Python/comments/1oborib/i_built_a_persistent_kv_store_in_pure_python/,I built a Persistent KV Store in Pure Python,vollhard-natta,2025-10-21 01:51:07,24,1,"Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been work...","Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been working on for the past few months. It is a lightweight, persistent key-value storage engine in Python, built from scratch to understand and implement the Log-Structured Merge-tree (LSM-tree) architecture. The project, which is fully open-source, is explicitly optimized for write-heavy workloads. 



# Core Architecture:

The engine implements the three fundamental LSM components: the **Write Ahead Log (WAL)** for durability, an in-memory **Memtable** (using `SortedDict` for sorted writes), and immutable persistent **SSTables (Sorted String Tables)**.

Some features that I'm proud of:

* **Async Compaction**: Merging and compaction are handled by a **separate background worker thread**. The process itself takes a hybrid approach.
* **Client/Server Model**: The entire storage engine runs behind a **FastAPI server**. This allows multiple clients to connect via REST APIs or the included CLI tool.
* **Efficient Range Queries**: Added full support for range queries from `start_key` to `end_key`. This is achieved via a memory-efficient **k-way merge iterator** that combines results from the Memtable and all SSTables. The FastAPI server delivers the results using a `StreamingResponse` to prevent memory exhaustion for large result sets.
* **Bloom Filter**: Implemented a **Bloom Filter** for each SSTable to drastically reduce disk I/O by confirming that a key definitely does not exist before attempting a disk seek.
* **Binary Storage**: SSTables now use **Msgpack binary format** instead of JSON for smaller file sizes and reduced CPU load during serialization/deserialization.

My favourite part of the project is that I actually got to see a practical implementation of [Merge Sorted Arrays - GeeksforGeeks](https://www.geeksforgeeks.org/dsa/merge-k-sorted-arrays/). This is a pretty popular interview question and to see DSA being actually implemented is a crazy moment.

# Get Started

    pip install lsm_storage_engine_key_value_store

**Usage via CLI/Server:**

1. **Terminal 1 (Server):** `lsm-server`
2. **Terminal 2 (Client):** `lsm-cli` (Follow the CLI help for commands).

# Looking for Feedback

I'd love to hear your thoughts about this implementation and how I can make it better and what features I can add in later versions. Ideas and constructive criticism are always welcome. I'm also looking for contributors, if anyone is interested, please feel free to PM and we can discuss.

Repo link: [Shashank1985/storage-engine](https://github.com/Shashank1985/storage-engine)  
Thanks!!",2025-10-21T08:49:47.087696
1obo3rg,https://www.reddit.com/r/Python/comments/1obo3rg/kryypto_an_open_source_python_text_editor/,Kryypto an open source python text editor.,SxxVe,2025-10-21 01:21:30,3,5,"Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
*...","Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
* Full Keyboard Support ‚Äì no need for the mouse, every feature is accessible via hotkeys
* Discord presence
* Live MarkDown Preview
* Session Restore
* Custom Styling
   * `config\configuration.cfg` for editor settings
   * CSS for theme and style customization
* Editing Tools
   * Find text in file
   * Jump to line
   * Adjustable cursor (color & width)
   * Configurable animations (types & duration)
* Git & GitHub Integration
   * View total commits
   * See last commit message & date
   * Track file changes directly inside the editor
* Productivity Features
   * Autocompleter
   * Builtin Terminal
   * Docstring panel (hover to see function/class docstring)
   * Tab-based file switching
   * Bookmarking lines
   * Custom title bar
* Syntax Highlighting for
   * Python
   * CSS
   * JSON
   * Config files
   * Markdown

Target Audience

* Developers who prefer keyboard-driven workflows (no mouse required)
* Users looking for a lightweight alternative to heavier IDEs
* People who want to customize their editor with CSS and configuration settings
* Anyone experimenting with Python-based editors or open-source text editing tools

# Comparison:

* Lightweight ‚Äì minimal overhead, focused on speed
* Highly customizable ‚Äì styling via CSS and config files
* Keyboard-centric ‚Äì designed to be fully usable without a mouse

  
github repo: [https://github.com/NaturalCapsule/Kryypto](https://github.com/NaturalCapsule/Kryypto)

  
website: [https://naturalcapsule.github.io/Kryypto/](https://naturalcapsule.github.io/Kryypto/)",2025-10-21T08:49:47.087770
1obo0ze,https://www.reddit.com/r/Python/comments/1obo0ze/forgetting_python/,Forgetting Python,Ashamed-Society-2875,2025-10-21 01:17:52,0,4,"I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping f...","I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping for college exams , now when i come back to python it feels i have lost my level and my touch i feel like fkn loser , all those hrs spent in 8th grade for nothing , i forgot a lot , is it common or just me???",2025-10-21T08:49:47.087831
1obmzbm,https://www.reddit.com/r/Python/comments/1obmzbm/functoweb_is_now_much_better_thanks_for_the/,func-to-web is now much better ‚Äì Thanks for the feedback!,drboom9,2025-10-21 00:27:41,7,0,"15 days ago I shared func-to-web here and got amazing feedback (150+ upvotes, thank you!). Since then, I've been working hard on the suggestions and a...","15 days ago I shared func-to-web here and got amazing feedback (150+ upvotes, thank you!). Since then, I've been working hard on the suggestions and added some major features.

**What it does (quick reminder):**
Turn any Python function into a web UI with zero boilerplate:

```python
from func_to_web import run

def divide(a: int, b: int):
    return a / b

run(divide)  # Web form at localhost:8000
```

**Major updates since v0.1:**

**Dynamic Lists** ‚Äì Add/remove items with advanced validation:
```python
def process_data(
    # Dynamic lists with add/remove buttons
    images: list[ImageFile],                      # Multiple file uploads
    
    # Dual validation: list size AND individual items
    scores: Annotated[
        list[Annotated[int, Field(ge=0, le=100)]], 
        Field(min_length=3, max_length=10)
    ],  # 3-10 items required, each 0-100
    
    # Optional fields with toggle switches
    notes: str | None = None,                     # Optional text
    tags: list[str] | None = None                 # Optional list
):
    return FileResponse(generate_pdf(), ""report.pdf"")  # Auto-download
```

**High-Performance File Handling** ‚Äì Optimized streaming for large files:
- **Upload**: Real-time progress bars, 8MB chunks, handles GB+ files
- **Download**: Return `FileResponse(data, filename)` for auto-downloads
- **Performance**: ~237 MB/s localhost, ~115 MB/s over Gigabit Ethernet
- **Memory efficient**: Constant usage regardless of file size
- **Any format**: PDF, Excel, ZIP, images, binary data

**Optional Fields** ‚Äì `Type | None` creates toggle switches:
- Fields with defaults start enabled, without defaults start disabled
- Explicit control: `Type | OptionalEnabled/OptionalDisabled`
- Works with all types, constraints, and lists

**Dynamic Dropdowns** ‚Äì Runtime-generated options:
```python
def get_themes(): return fetch_from_database()

def configure(theme: Literal[get_themes]): pass  # Fresh options each request
```

**Rich Output Support**:
- **PIL Images**: Auto-displayed in browser
- **Matplotlib plots**: Rendered as PNG
- **File downloads**: Single or multiple files with streaming
- **JSON/text**: Formatted with copy-to-clipboard

**UX Improvements**:
- Dark mode with theme persistence
- Keyboard shortcuts (Ctrl+Enter to submit)
- Auto-focus first field
- Toast notifications
- Upload progress with speed indicators

**Current stats:**
- 180+ GitHub stars (The chinese community is sharing it too!)
- 454 unit tests
- Published on PyPI: `pip install func-to-web`
- 20+ runnable examples
- Used daily for internal tools at multiple companies

**Other improvements:**
- **Modular architecture**: Code separated by responsibilities (analysis, validation, form building...)
- **Comprehensive documentation**: Every function and class documented
- **Detailed changelog**: Track all improvements and breaking changes

I've tried to make this as professional and production-ready as possible while keeping the simple API.

Still focused on internal tools and rapid prototyping, not replacing proper web frameworks.

GitHub: https://github.com/offerrall/FuncToWeb

The community feedback really shaped these improvements. Thank you again! Keep the suggestions coming.",2025-10-21T08:49:47.087853
1obxzya,https://www.reddit.com/r/Python/comments/1obxzya/tuesday_daily_thread_advanced_questions/,Tuesday Daily Thread: Advanced questions,AutoModerator,2025-10-21 08:00:30,1,0,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about ...","# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",2025-10-21T08:51:17.067450
1obrz11,https://www.reddit.com/r/Python/comments/1obrz11/assemblytominecraftcommandblockcompiler_python/,Assembly-to-Minecraft-Command-Block-Compiler (Python) ‚Äî updated ‚Äî testers & contributors wanted,bowser04410,2025-10-21 03:57:47,3,0,"¬†I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedba...","I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedback, and contributors. Repo:¬†[https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler](https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler)

What My Project Does:

* Parses a tiny assembly-style language (labels, arithmetic, branches, simple I/O) and emits Minecraft command sequences tailored for command blocks.
* Produces low-level, inspectable output so you can see how program logic maps to in-game command-block logic.
* Implemented in Python for readability and easy contribution.

Target Audience:

* Minecraft command-block creators who want to run low-level programs without mods.
* Hobbyist compiler writers and learners looking for a compact Python codegen example.
* Contributors interested in parsing, code generation, testing strategies, or command optimization.
* This is an educational/hobby tool for small demos and experiments ‚Äî not a production compiler for large-scale programs.

Comparison (how it differs from alternatives):

* Assembly-focused: unlike high-level language‚ÜíMinecraft tools, it targets an assembly-like input so outputs are low-level and easy to debug in command blocks.
* Python-first and lightweight: prioritizes clarity and contributor-friendliness over performance.
* Command-block oriented: designed to work with vanilla in-game command blocks (does not target datapacks or mods).

How to help:

* Test: run examples, try outputs in a world, and note Minecraft version and exact steps when something fails.
* Report: open issues with minimal reproduction files and steps.
* Contribute: PRs welcome for bug fixes, examples, optimizations, docs, or tests ‚Äî look for good-first-issue.",2025-10-21T08:51:17.067599
1obqtmz,https://www.reddit.com/r/Python/comments/1obqtmz/has_any_library_emerged_as_the_replacement_for/,Has any library emerged as the replacement for Poliastro?,KerPop42,2025-10-21 03:15:23,2,1,"I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-...","I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-go. Even if you restrict yourself to 3.11 you *also* have to go back to pip <24.1 because of how some package requirements are written. I've looked around and can't find any other orbital dynamics libraries that are more than personal projects. Is the field just dead in python?",2025-10-21T08:51:17.067719
1obprx2,https://www.reddit.com/r/Python/comments/1obprx2/building_an_opensource_observability_tool_for/,Building an open-source observability tool for multi-agent systems - looking for feedback,Standard_Career_8603,2025-10-21 02:35:45,4,4,"I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-sour...","I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-source observability tool.   
  
**What it does**:  
\- Tracks information flow between agents   
\- Shows which tools are being called with what parameters   
\- Monitors how prompt changes affect agent behavior   
\- Works in both development and production   
  
**The gap I'm trying to fill**: Existing tools (LangSmith, LangFuse, AgentOps) are great at LLM observability (tokens, costs, latency), but I feel like they don't help much with multi-agent coordination. They show you **what** happened but not **why** agents failed to coordinate.   
  
  
**Looking for feedback**:  
1. Have you built multi-agent systems? What do you use for debugging?   
2. Does this solve a real problem or am I overengineering?   
3. What features would actually make this useful for you? Still early days, but happy to share the repo if folks are interested.",2025-10-21T08:51:17.067765
1obpjnf,https://www.reddit.com/r/Python/comments/1obpjnf/i_built_a_tool_that_runs_your_python_function_on/,i built a tool that runs your python function on 10k vms in parallel with one line of code.,Ok_Post_149,2025-10-21 02:25:33,5,7,"# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to ...","# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to hand it over to DevOps, the backlog would grow, and overall throughput would tank.

So I built **Burla**, the simplest cluster compute software that lets even Python beginners run code on massive clusters in the cloud. It‚Äôs one function with two parameters: the function and the inputs. You can bring your own Docker image, set hardware requirements, and run jobs as background tasks so you can fire and forget. Responses are fast, and you can call a million simple functions in just a few seconds.

Burla is built for embarrassingly parallel workloads like preprocessing data, hyperparameter tuning, and batch inference.

# Target Audience

Engineers, data scientists, and analysts who want to scale their code in production or research environments without dealing with infrastructure.

# Comparison

Unlike Ray or Dask, Burla doesn‚Äôt require cluster setup, orchestration, or YAML configs. It‚Äôs just:

    from burla import remote_parallel_map
    remote_parallel_map(func, inputs)
    

That‚Äôs it. It automatically handles distribution, retries, logging, and scaling across up to 10,000 VMs.

# Open Source & Free Credits

Burla is open source, and I‚Äôm improving the installation process. I also created managed versions for testing. If you want to try it, I‚Äôll cover 1,000 CPU hours and 100 GPU hours. Email me at [joe@burla.dev]() if interested.

Here‚Äôs a short intro video:  
[https://www.youtube.com/watch?v=9d22y\_kWjyE](https://www.youtube.com/watch?v=9d22y_kWjyE)

GitHub ‚Üí¬†[https://github.com/Burla-Cloud/burla](https://github.com/Burla-Cloud/burla)  
Docs ‚Üí¬†[https://docs.burla.dev](https://docs.burla.dev/)",2025-10-21T08:51:17.067835
1oborpj,https://www.reddit.com/r/Python/comments/1oborpj/i_made_a_python_bot_that_turns_your_text_images/,I made a Python bot that turns your text & images into diagrams right in Telegram.,No_Mongoose_8139,2025-10-21 01:51:22,0,5,"https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project ...","https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project structure, a mind map, or just explain a concept. Every time, I had to open heavy editors like Miro or Figma, which felt like overkill.

So, I decided to build a tool that lives right inside the app I use for communication all day: Telegram.

I'm excited to share my side project: **Diagrammer Bot**. It's a simple yet powerful bot in Python that lets you create diagrams on the fly.

**Here are the key features:**
*   **Text & Image Nodes:** You can create blocks not just from text, but from any image you send.
*   **Full Editing:** Create, connect, edit, and delete both nodes and edges.
*   **Project System:** Save your diagrams with custom names, load them later, or start new ones.
*   **Themes & Export:** Switch between a sleek dark mode and a clean light mode. Export your final diagram as a high-quality PNG.
*   **Open-Source:** The entire project is available on GitHub!

**Tech Stack:** Python, `python-telegram-bot`, `Graphviz` for rendering, and `Pillow` for watermarking.

I would be incredibly grateful for any feedback, feature ideas, or bug reports. And of course, a star ‚≠ê on GitHub would make my day!

*   **Try the bot here:** [https://t.me/diagrammer_robot](https://t.me/diagrammer_robot)
*   **Check out the code on GitHub:** [https://github.com/Lixher/Diagrammer-bot](https://github.com/Lixher/Diagrammer-Bot)",2025-10-21T08:51:17.068251
1oborib,https://www.reddit.com/r/Python/comments/1oborib/i_built_a_persistent_kv_store_in_pure_python/,I built a Persistent KV Store in Pure Python,vollhard-natta,2025-10-21 01:51:07,25,1,"Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been work...","Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been working on for the past few months. It is a lightweight, persistent key-value storage engine in Python, built from scratch to understand and implement the Log-Structured Merge-tree (LSM-tree) architecture. The project, which is fully open-source, is explicitly optimized for write-heavy workloads. 



# Core Architecture:

The engine implements the three fundamental LSM components: the **Write Ahead Log (WAL)** for durability, an in-memory **Memtable** (using `SortedDict` for sorted writes), and immutable persistent **SSTables (Sorted String Tables)**.

Some features that I'm proud of:

* **Async Compaction**: Merging and compaction are handled by a **separate background worker thread**. The process itself takes a hybrid approach.
* **Client/Server Model**: The entire storage engine runs behind a **FastAPI server**. This allows multiple clients to connect via REST APIs or the included CLI tool.
* **Efficient Range Queries**: Added full support for range queries from `start_key` to `end_key`. This is achieved via a memory-efficient **k-way merge iterator** that combines results from the Memtable and all SSTables. The FastAPI server delivers the results using a `StreamingResponse` to prevent memory exhaustion for large result sets.
* **Bloom Filter**: Implemented a **Bloom Filter** for each SSTable to drastically reduce disk I/O by confirming that a key definitely does not exist before attempting a disk seek.
* **Binary Storage**: SSTables now use **Msgpack binary format** instead of JSON for smaller file sizes and reduced CPU load during serialization/deserialization.

My favourite part of the project is that I actually got to see a practical implementation of [Merge Sorted Arrays - GeeksforGeeks](https://www.geeksforgeeks.org/dsa/merge-k-sorted-arrays/). This is a pretty popular interview question and to see DSA being actually implemented is a crazy moment.

# Get Started

    pip install lsm_storage_engine_key_value_store

**Usage via CLI/Server:**

1. **Terminal 1 (Server):** `lsm-server`
2. **Terminal 2 (Client):** `lsm-cli` (Follow the CLI help for commands).

# Looking for Feedback

I'd love to hear your thoughts about this implementation and how I can make it better and what features I can add in later versions. Ideas and constructive criticism are always welcome. I'm also looking for contributors, if anyone is interested, please feel free to PM and we can discuss.

Repo link: [Shashank1985/storage-engine](https://github.com/Shashank1985/storage-engine)  
Thanks!!",2025-10-21T08:51:17.068358
1obo3rg,https://www.reddit.com/r/Python/comments/1obo3rg/kryypto_an_open_source_python_text_editor/,Kryypto an open source python text editor.,SxxVe,2025-10-21 01:21:30,3,5,"Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
*...","Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
* Full Keyboard Support ‚Äì no need for the mouse, every feature is accessible via hotkeys
* Discord presence
* Live MarkDown Preview
* Session Restore
* Custom Styling
   * `config\configuration.cfg` for editor settings
   * CSS for theme and style customization
* Editing Tools
   * Find text in file
   * Jump to line
   * Adjustable cursor (color & width)
   * Configurable animations (types & duration)
* Git & GitHub Integration
   * View total commits
   * See last commit message & date
   * Track file changes directly inside the editor
* Productivity Features
   * Autocompleter
   * Builtin Terminal
   * Docstring panel (hover to see function/class docstring)
   * Tab-based file switching
   * Bookmarking lines
   * Custom title bar
* Syntax Highlighting for
   * Python
   * CSS
   * JSON
   * Config files
   * Markdown

Target Audience

* Developers who prefer keyboard-driven workflows (no mouse required)
* Users looking for a lightweight alternative to heavier IDEs
* People who want to customize their editor with CSS and configuration settings
* Anyone experimenting with Python-based editors or open-source text editing tools

# Comparison:

* Lightweight ‚Äì minimal overhead, focused on speed
* Highly customizable ‚Äì styling via CSS and config files
* Keyboard-centric ‚Äì designed to be fully usable without a mouse

  
github repo: [https://github.com/NaturalCapsule/Kryypto](https://github.com/NaturalCapsule/Kryypto)

  
website: [https://naturalcapsule.github.io/Kryypto/](https://naturalcapsule.github.io/Kryypto/)",2025-10-21T08:51:17.068491
1obo0ze,https://www.reddit.com/r/Python/comments/1obo0ze/forgetting_python/,Forgetting Python,Ashamed-Society-2875,2025-10-21 01:17:52,0,4,"I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping f...","I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping for college exams , now when i come back to python it feels i have lost my level and my touch i feel like fkn loser , all those hrs spent in 8th grade for nothing , i forgot a lot , is it common or just me???",2025-10-21T08:51:17.068600
1obmzbm,https://www.reddit.com/r/Python/comments/1obmzbm/functoweb_is_now_much_better_thanks_for_the/,func-to-web is now much better ‚Äì Thanks for the feedback!,drboom9,2025-10-21 00:27:41,5,0,"15 days ago I shared func-to-web here and got amazing feedback (150+ upvotes, thank you!). Since then, I've been working hard on the suggestions and a...","15 days ago I shared func-to-web here and got amazing feedback (150+ upvotes, thank you!). Since then, I've been working hard on the suggestions and added some major features.

**What it does (quick reminder):**
Turn any Python function into a web UI with zero boilerplate:

```python
from func_to_web import run

def divide(a: int, b: int):
    return a / b

run(divide)  # Web form at localhost:8000
```

**Major updates since v0.1:**

**Dynamic Lists** ‚Äì Add/remove items with advanced validation:
```python
def process_data(
    # Dynamic lists with add/remove buttons
    images: list[ImageFile],                      # Multiple file uploads
    
    # Dual validation: list size AND individual items
    scores: Annotated[
        list[Annotated[int, Field(ge=0, le=100)]], 
        Field(min_length=3, max_length=10)
    ],  # 3-10 items required, each 0-100
    
    # Optional fields with toggle switches
    notes: str | None = None,                     # Optional text
    tags: list[str] | None = None                 # Optional list
):
    return FileResponse(generate_pdf(), ""report.pdf"")  # Auto-download
```

**High-Performance File Handling** ‚Äì Optimized streaming for large files:
- **Upload**: Real-time progress bars, 8MB chunks, handles GB+ files
- **Download**: Return `FileResponse(data, filename)` for auto-downloads
- **Performance**: ~237 MB/s localhost, ~115 MB/s over Gigabit Ethernet
- **Memory efficient**: Constant usage regardless of file size
- **Any format**: PDF, Excel, ZIP, images, binary data

**Optional Fields** ‚Äì `Type | None` creates toggle switches:
- Fields with defaults start enabled, without defaults start disabled
- Explicit control: `Type | OptionalEnabled/OptionalDisabled`
- Works with all types, constraints, and lists

**Dynamic Dropdowns** ‚Äì Runtime-generated options:
```python
def get_themes(): return fetch_from_database()

def configure(theme: Literal[get_themes]): pass  # Fresh options each request
```

**Rich Output Support**:
- **PIL Images**: Auto-displayed in browser
- **Matplotlib plots**: Rendered as PNG
- **File downloads**: Single or multiple files with streaming
- **JSON/text**: Formatted with copy-to-clipboard

**UX Improvements**:
- Dark mode with theme persistence
- Keyboard shortcuts (Ctrl+Enter to submit)
- Auto-focus first field
- Toast notifications
- Upload progress with speed indicators

**Current stats:**
- 180+ GitHub stars (The chinese community is sharing it too!)
- 454 unit tests
- Published on PyPI: `pip install func-to-web`
- 20+ runnable examples
- Used daily for internal tools at multiple companies

**Other improvements:**
- **Modular architecture**: Code separated by responsibilities (analysis, validation, form building...)
- **Comprehensive documentation**: Every function and class documented
- **Detailed changelog**: Track all improvements and breaking changes

I've tried to make this as professional and production-ready as possible while keeping the simple API.

Still focused on internal tools and rapid prototyping, not replacing proper web frameworks.

GitHub: https://github.com/offerrall/FuncToWeb

The community feedback really shaped these improvements. Thank you again! Keep the suggestions coming.",2025-10-21T08:51:17.068641
1obxzya,https://www.reddit.com/r/Python/comments/1obxzya/tuesday_daily_thread_advanced_questions/,Tuesday Daily Thread: Advanced questions,AutoModerator,2025-10-21 08:00:30,1,0,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about ...","# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",2025-10-21T08:58:46.530720
1obrz11,https://www.reddit.com/r/Python/comments/1obrz11/assemblytominecraftcommandblockcompiler_python/,Assembly-to-Minecraft-Command-Block-Compiler (Python) ‚Äî updated ‚Äî testers & contributors wanted,bowser04410,2025-10-21 03:57:47,2,0,"I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedbac...","I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedback, and contributors. Repo:¬†[https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler](https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler)

What My Project Does:

* Parses a tiny assembly-style language (labels, arithmetic, branches, simple I/O) and emits Minecraft command sequences tailored for command blocks.
* Produces low-level, inspectable output so you can see how program logic maps to in-game command-block logic.
* Implemented in Python for readability and easy contribution.

Target Audience:

* Minecraft command-block creators who want to run low-level programs without mods.
* Hobbyist compiler writers and learners looking for a compact Python codegen example.
* Contributors interested in parsing, code generation, testing strategies, or command optimization.
* This is an educational/hobby tool for small demos and experiments ‚Äî not a production compiler for large-scale programs.

Comparison (how it differs from alternatives):

* Assembly-focused: unlike high-level language‚ÜíMinecraft tools, it targets an assembly-like input so outputs are low-level and easy to debug in command blocks.
* Python-first and lightweight: prioritizes clarity and contributor-friendliness over performance.
* Command-block oriented: designed to work with vanilla in-game command blocks (does not target datapacks or mods).

How to help:

* Test: run examples, try outputs in a world, and note Minecraft version and exact steps when something fails.
* Report: open issues with minimal reproduction files and steps.
* Contribute: PRs welcome for bug fixes, examples, optimizations, docs, or tests ‚Äî look for good-first-issue.",2025-10-21T08:58:46.530870
1obqtmz,https://www.reddit.com/r/Python/comments/1obqtmz/has_any_library_emerged_as_the_replacement_for/,Has any library emerged as the replacement for Poliastro?,KerPop42,2025-10-21 03:15:23,2,1,"I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-...","I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-go. Even if you restrict yourself to 3.11 you *also* have to go back to pip <24.1 because of how some package requirements are written. I've looked around and can't find any other orbital dynamics libraries that are more than personal projects. Is the field just dead in python?",2025-10-21T08:58:46.530993
1obprx2,https://www.reddit.com/r/Python/comments/1obprx2/building_an_opensource_observability_tool_for/,Building an open-source observability tool for multi-agent systems - looking for feedback,Standard_Career_8603,2025-10-21 02:35:45,5,4,"I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-sour...","I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-source observability tool.   
  
**What it does**:  
\- Tracks information flow between agents   
\- Shows which tools are being called with what parameters   
\- Monitors how prompt changes affect agent behavior   
\- Works in both development and production   
  
**The gap I'm trying to fill**: Existing tools (LangSmith, LangFuse, AgentOps) are great at LLM observability (tokens, costs, latency), but I feel like they don't help much with multi-agent coordination. They show you **what** happened but not **why** agents failed to coordinate.   
  
  
**Looking for feedback**:  
1. Have you built multi-agent systems? What do you use for debugging?   
2. Does this solve a real problem or am I overengineering?   
3. What features would actually make this useful for you? Still early days, but happy to share the repo if folks are interested.",2025-10-21T08:58:46.531041
1obpjnf,https://www.reddit.com/r/Python/comments/1obpjnf/i_built_a_tool_that_runs_your_python_function_on/,i built a tool that runs your python function on 10k vms in parallel with one line of code.,Ok_Post_149,2025-10-21 02:25:33,5,7,"# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to ...","# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to hand it over to DevOps, the backlog would grow, and overall throughput would tank.

So I built **Burla**, the simplest cluster compute software that lets even Python beginners run code on massive clusters in the cloud. It‚Äôs one function with two parameters: the function and the inputs. You can bring your own Docker image, set hardware requirements, and run jobs as background tasks so you can fire and forget. Responses are fast, and you can call a million simple functions in just a few seconds.

Burla is built for embarrassingly parallel workloads like preprocessing data, hyperparameter tuning, and batch inference.

# Target Audience

Engineers, data scientists, and analysts who want to scale their code in production or research environments without dealing with infrastructure.

# Comparison

Unlike Ray or Dask, Burla doesn‚Äôt require cluster setup, orchestration, or YAML configs. It‚Äôs just:

    from burla import remote_parallel_map
    remote_parallel_map(func, inputs)
    

That‚Äôs it. It automatically handles distribution, retries, logging, and scaling across up to 10,000 VMs.

# Open Source & Free Credits

Burla is open source, and I‚Äôm improving the installation process. I also created managed versions for testing. If you want to try it, I‚Äôll cover 1,000 CPU hours and 100 GPU hours. Email me at [joe@burla.dev]() if interested.

Here‚Äôs a short intro video:  
[https://www.youtube.com/watch?v=9d22y\_kWjyE](https://www.youtube.com/watch?v=9d22y_kWjyE)

GitHub ‚Üí¬†[https://github.com/Burla-Cloud/burla](https://github.com/Burla-Cloud/burla)  
Docs ‚Üí¬†[https://docs.burla.dev](https://docs.burla.dev/)",2025-10-21T08:58:46.531111
1oborpj,https://www.reddit.com/r/Python/comments/1oborpj/i_made_a_python_bot_that_turns_your_text_images/,I made a Python bot that turns your text & images into diagrams right in Telegram.,No_Mongoose_8139,2025-10-21 01:51:22,0,5,"https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project ...","https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project structure, a mind map, or just explain a concept. Every time, I had to open heavy editors like Miro or Figma, which felt like overkill.

So, I decided to build a tool that lives right inside the app I use for communication all day: Telegram.

I'm excited to share my side project: **Diagrammer Bot**. It's a simple yet powerful bot in Python that lets you create diagrams on the fly.

**Here are the key features:**
*   **Text & Image Nodes:** You can create blocks not just from text, but from any image you send.
*   **Full Editing:** Create, connect, edit, and delete both nodes and edges.
*   **Project System:** Save your diagrams with custom names, load them later, or start new ones.
*   **Themes & Export:** Switch between a sleek dark mode and a clean light mode. Export your final diagram as a high-quality PNG.
*   **Open-Source:** The entire project is available on GitHub!

**Tech Stack:** Python, `python-telegram-bot`, `Graphviz` for rendering, and `Pillow` for watermarking.

I would be incredibly grateful for any feedback, feature ideas, or bug reports. And of course, a star ‚≠ê on GitHub would make my day!

*   **Try the bot here:** [https://t.me/diagrammer_robot](https://t.me/diagrammer_robot)
*   **Check out the code on GitHub:** [https://github.com/Lixher/Diagrammer-bot](https://github.com/Lixher/Diagrammer-Bot)",2025-10-21T08:58:46.531464
1oborib,https://www.reddit.com/r/Python/comments/1oborib/i_built_a_persistent_kv_store_in_pure_python/,I built a Persistent KV Store in Pure Python,vollhard-natta,2025-10-21 01:51:07,27,1,"Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been work...","Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been working on for the past few months. It is a lightweight, persistent key-value storage engine in Python, built from scratch to understand and implement the Log-Structured Merge-tree (LSM-tree) architecture. The project, which is fully open-source, is explicitly optimized for write-heavy workloads. 



# Core Architecture:

The engine implements the three fundamental LSM components: the **Write Ahead Log (WAL)** for durability, an in-memory **Memtable** (using `SortedDict` for sorted writes), and immutable persistent **SSTables (Sorted String Tables)**.

Some features that I'm proud of:

* **Async Compaction**: Merging and compaction are handled by a **separate background worker thread**. The process itself takes a hybrid approach.
* **Client/Server Model**: The entire storage engine runs behind a **FastAPI server**. This allows multiple clients to connect via REST APIs or the included CLI tool.
* **Efficient Range Queries**: Added full support for range queries from `start_key` to `end_key`. This is achieved via a memory-efficient **k-way merge iterator** that combines results from the Memtable and all SSTables. The FastAPI server delivers the results using a `StreamingResponse` to prevent memory exhaustion for large result sets.
* **Bloom Filter**: Implemented a **Bloom Filter** for each SSTable to drastically reduce disk I/O by confirming that a key definitely does not exist before attempting a disk seek.
* **Binary Storage**: SSTables now use **Msgpack binary format** instead of JSON for smaller file sizes and reduced CPU load during serialization/deserialization.

My favourite part of the project is that I actually got to see a practical implementation of [Merge Sorted Arrays - GeeksforGeeks](https://www.geeksforgeeks.org/dsa/merge-k-sorted-arrays/). This is a pretty popular interview question and to see DSA being actually implemented is a crazy moment.

# Get Started

    pip install lsm_storage_engine_key_value_store

**Usage via CLI/Server:**

1. **Terminal 1 (Server):** `lsm-server`
2. **Terminal 2 (Client):** `lsm-cli` (Follow the CLI help for commands).

# Looking for Feedback

I'd love to hear your thoughts about this implementation and how I can make it better and what features I can add in later versions. Ideas and constructive criticism are always welcome. I'm also looking for contributors, if anyone is interested, please feel free to PM and we can discuss.

Repo link: [Shashank1985/storage-engine](https://github.com/Shashank1985/storage-engine)  
Thanks!!",2025-10-21T08:58:46.531569
1obo3rg,https://www.reddit.com/r/Python/comments/1obo3rg/kryypto_an_open_source_python_text_editor/,Kryypto an open source python text editor.,SxxVe,2025-10-21 01:21:30,3,5,"Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
*...","Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
* Full Keyboard Support ‚Äì no need for the mouse, every feature is accessible via hotkeys
* Discord presence
* Live MarkDown Preview
* Session Restore
* Custom Styling
   * `config\configuration.cfg` for editor settings
   * CSS for theme and style customization
* Editing Tools
   * Find text in file
   * Jump to line
   * Adjustable cursor (color & width)
   * Configurable animations (types & duration)
* Git & GitHub Integration
   * View total commits
   * See last commit message & date
   * Track file changes directly inside the editor
* Productivity Features
   * Autocompleter
   * Builtin Terminal
   * Docstring panel (hover to see function/class docstring)
   * Tab-based file switching
   * Bookmarking lines
   * Custom title bar
* Syntax Highlighting for
   * Python
   * CSS
   * JSON
   * Config files
   * Markdown

Target Audience

* Developers who prefer keyboard-driven workflows (no mouse required)
* Users looking for a lightweight alternative to heavier IDEs
* People who want to customize their editor with CSS and configuration settings
* Anyone experimenting with Python-based editors or open-source text editing tools

# Comparison:

* Lightweight ‚Äì minimal overhead, focused on speed
* Highly customizable ‚Äì styling via CSS and config files
* Keyboard-centric ‚Äì designed to be fully usable without a mouse

  
github repo: [https://github.com/NaturalCapsule/Kryypto](https://github.com/NaturalCapsule/Kryypto)

  
website: [https://naturalcapsule.github.io/Kryypto/](https://naturalcapsule.github.io/Kryypto/)",2025-10-21T08:58:46.531699
1obo0ze,https://www.reddit.com/r/Python/comments/1obo0ze/forgetting_python/,Forgetting Python,Ashamed-Society-2875,2025-10-21 01:17:52,0,4,"I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping f...","I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping for college exams , now when i come back to python it feels i have lost my level and my touch i feel like fkn loser , all those hrs spent in 8th grade for nothing , i forgot a lot , is it common or just me???",2025-10-21T08:58:46.531805
1obmzbm,https://www.reddit.com/r/Python/comments/1obmzbm/functoweb_is_now_much_better_thanks_for_the/,func-to-web is now much better ‚Äì Thanks for the feedback!,drboom9,2025-10-21 00:27:41,9,0,"15 days ago I shared func-to-web here and got amazing feedback (150+ upvotes, thank you!). Since then, I've been working hard on the suggestions and a...","15 days ago I shared func-to-web here and got amazing feedback (150+ upvotes, thank you!). Since then, I've been working hard on the suggestions and added some major features.

**What it does (quick reminder):**
Turn any Python function into a web UI with zero boilerplate:

```python
from func_to_web import run

def divide(a: int, b: int):
    return a / b

run(divide)  # Web form at localhost:8000
```

**Major updates since v0.1:**

**Dynamic Lists** ‚Äì Add/remove items with advanced validation:
```python
def process_data(
    # Dynamic lists with add/remove buttons
    images: list[ImageFile],                      # Multiple file uploads
    
    # Dual validation: list size AND individual items
    scores: Annotated[
        list[Annotated[int, Field(ge=0, le=100)]], 
        Field(min_length=3, max_length=10)
    ],  # 3-10 items required, each 0-100
    
    # Optional fields with toggle switches
    notes: str | None = None,                     # Optional text
    tags: list[str] | None = None                 # Optional list
):
    return FileResponse(generate_pdf(), ""report.pdf"")  # Auto-download
```

**High-Performance File Handling** ‚Äì Optimized streaming for large files:
- **Upload**: Real-time progress bars, 8MB chunks, handles GB+ files
- **Download**: Return `FileResponse(data, filename)` for auto-downloads
- **Performance**: ~237 MB/s localhost, ~115 MB/s over Gigabit Ethernet
- **Memory efficient**: Constant usage regardless of file size
- **Any format**: PDF, Excel, ZIP, images, binary data

**Optional Fields** ‚Äì `Type | None` creates toggle switches:
- Fields with defaults start enabled, without defaults start disabled
- Explicit control: `Type | OptionalEnabled/OptionalDisabled`
- Works with all types, constraints, and lists

**Dynamic Dropdowns** ‚Äì Runtime-generated options:
```python
def get_themes(): return fetch_from_database()

def configure(theme: Literal[get_themes]): pass  # Fresh options each request
```

**Rich Output Support**:
- **PIL Images**: Auto-displayed in browser
- **Matplotlib plots**: Rendered as PNG
- **File downloads**: Single or multiple files with streaming
- **JSON/text**: Formatted with copy-to-clipboard

**UX Improvements**:
- Dark mode with theme persistence
- Keyboard shortcuts (Ctrl+Enter to submit)
- Auto-focus first field
- Toast notifications
- Upload progress with speed indicators

**Current stats:**
- 180+ GitHub stars (The chinese community is sharing it too!)
- 454 unit tests
- Published on PyPI: `pip install func-to-web`
- 20+ runnable examples
- Used daily for internal tools at multiple companies

**Other improvements:**
- **Modular architecture**: Code separated by responsibilities (analysis, validation, form building...)
- **Comprehensive documentation**: Every function and class documented
- **Detailed changelog**: Track all improvements and breaking changes

I've tried to make this as professional and production-ready as possible while keeping the simple API.

Still focused on internal tools and rapid prototyping, not replacing proper web frameworks.

GitHub: https://github.com/offerrall/FuncToWeb

The community feedback really shaped these improvements. Thank you again! Keep the suggestions coming.",2025-10-21T08:58:46.531842
1obxzya,https://www.reddit.com/r/Python/comments/1obxzya/tuesday_daily_thread_advanced_questions/,Tuesday Daily Thread: Advanced questions,AutoModerator,2025-10-21 08:00:30,1,0,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about ...","# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",2025-10-21T08:58:55.931823
1obrz11,https://www.reddit.com/r/Python/comments/1obrz11/assemblytominecraftcommandblockcompiler_python/,Assembly-to-Minecraft-Command-Block-Compiler (Python) ‚Äî updated ‚Äî testers & contributors wanted,bowser04410,2025-10-21 03:57:47,1,0,"¬†I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedba...","I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedback, and contributors. Repo:¬†[https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler](https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler)

What My Project Does:

* Parses a tiny assembly-style language (labels, arithmetic, branches, simple I/O) and emits Minecraft command sequences tailored for command blocks.
* Produces low-level, inspectable output so you can see how program logic maps to in-game command-block logic.
* Implemented in Python for readability and easy contribution.

Target Audience:

* Minecraft command-block creators who want to run low-level programs without mods.
* Hobbyist compiler writers and learners looking for a compact Python codegen example.
* Contributors interested in parsing, code generation, testing strategies, or command optimization.
* This is an educational/hobby tool for small demos and experiments ‚Äî not a production compiler for large-scale programs.

Comparison (how it differs from alternatives):

* Assembly-focused: unlike high-level language‚ÜíMinecraft tools, it targets an assembly-like input so outputs are low-level and easy to debug in command blocks.
* Python-first and lightweight: prioritizes clarity and contributor-friendliness over performance.
* Command-block oriented: designed to work with vanilla in-game command blocks (does not target datapacks or mods).

How to help:

* Test: run examples, try outputs in a world, and note Minecraft version and exact steps when something fails.
* Report: open issues with minimal reproduction files and steps.
* Contribute: PRs welcome for bug fixes, examples, optimizations, docs, or tests ‚Äî look for good-first-issue.",2025-10-21T08:58:55.931964
1obqtmz,https://www.reddit.com/r/Python/comments/1obqtmz/has_any_library_emerged_as_the_replacement_for/,Has any library emerged as the replacement for Poliastro?,KerPop42,2025-10-21 03:15:23,2,1,"I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-...","I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-go. Even if you restrict yourself to 3.11 you *also* have to go back to pip <24.1 because of how some package requirements are written. I've looked around and can't find any other orbital dynamics libraries that are more than personal projects. Is the field just dead in python?",2025-10-21T08:58:55.932078
1obprx2,https://www.reddit.com/r/Python/comments/1obprx2/building_an_opensource_observability_tool_for/,Building an open-source observability tool for multi-agent systems - looking for feedback,Standard_Career_8603,2025-10-21 02:35:45,3,4,"I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-sour...","I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-source observability tool.   
  
**What it does**:  
\- Tracks information flow between agents   
\- Shows which tools are being called with what parameters   
\- Monitors how prompt changes affect agent behavior   
\- Works in both development and production   
  
**The gap I'm trying to fill**: Existing tools (LangSmith, LangFuse, AgentOps) are great at LLM observability (tokens, costs, latency), but I feel like they don't help much with multi-agent coordination. They show you **what** happened but not **why** agents failed to coordinate.   
  
  
**Looking for feedback**:  
1. Have you built multi-agent systems? What do you use for debugging?   
2. Does this solve a real problem or am I overengineering?   
3. What features would actually make this useful for you? Still early days, but happy to share the repo if folks are interested.",2025-10-21T08:58:55.932126
1obpjnf,https://www.reddit.com/r/Python/comments/1obpjnf/i_built_a_tool_that_runs_your_python_function_on/,i built a tool that runs your python function on 10k vms in parallel with one line of code.,Ok_Post_149,2025-10-21 02:25:33,6,7,"# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to ...","# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to hand it over to DevOps, the backlog would grow, and overall throughput would tank.

So I built **Burla**, the simplest cluster compute software that lets even Python beginners run code on massive clusters in the cloud. It‚Äôs one function with two parameters: the function and the inputs. You can bring your own Docker image, set hardware requirements, and run jobs as background tasks so you can fire and forget. Responses are fast, and you can call a million simple functions in just a few seconds.

Burla is built for embarrassingly parallel workloads like preprocessing data, hyperparameter tuning, and batch inference.

# Target Audience

Engineers, data scientists, and analysts who want to scale their code in production or research environments without dealing with infrastructure.

# Comparison

Unlike Ray or Dask, Burla doesn‚Äôt require cluster setup, orchestration, or YAML configs. It‚Äôs just:

    from burla import remote_parallel_map
    remote_parallel_map(func, inputs)
    

That‚Äôs it. It automatically handles distribution, retries, logging, and scaling across up to 10,000 VMs.

# Open Source & Free Credits

Burla is open source, and I‚Äôm improving the installation process. I also created managed versions for testing. If you want to try it, I‚Äôll cover 1,000 CPU hours and 100 GPU hours. Email me at [joe@burla.dev]() if interested.

Here‚Äôs a short intro video:  
[https://www.youtube.com/watch?v=9d22y\_kWjyE](https://www.youtube.com/watch?v=9d22y_kWjyE)

GitHub ‚Üí¬†[https://github.com/Burla-Cloud/burla](https://github.com/Burla-Cloud/burla)  
Docs ‚Üí¬†[https://docs.burla.dev](https://docs.burla.dev/)",2025-10-21T08:58:55.932186
1oborpj,https://www.reddit.com/r/Python/comments/1oborpj/i_made_a_python_bot_that_turns_your_text_images/,I made a Python bot that turns your text & images into diagrams right in Telegram.,No_Mongoose_8139,2025-10-21 01:51:22,0,5,"https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project ...","https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project structure, a mind map, or just explain a concept. Every time, I had to open heavy editors like Miro or Figma, which felt like overkill.

So, I decided to build a tool that lives right inside the app I use for communication all day: Telegram.

I'm excited to share my side project: **Diagrammer Bot**. It's a simple yet powerful bot in Python that lets you create diagrams on the fly.

**Here are the key features:**
*   **Text & Image Nodes:** You can create blocks not just from text, but from any image you send.
*   **Full Editing:** Create, connect, edit, and delete both nodes and edges.
*   **Project System:** Save your diagrams with custom names, load them later, or start new ones.
*   **Themes & Export:** Switch between a sleek dark mode and a clean light mode. Export your final diagram as a high-quality PNG.
*   **Open-Source:** The entire project is available on GitHub!

**Tech Stack:** Python, `python-telegram-bot`, `Graphviz` for rendering, and `Pillow` for watermarking.

I would be incredibly grateful for any feedback, feature ideas, or bug reports. And of course, a star ‚≠ê on GitHub would make my day!

*   **Try the bot here:** [https://t.me/diagrammer_robot](https://t.me/diagrammer_robot)
*   **Check out the code on GitHub:** [https://github.com/Lixher/Diagrammer-bot](https://github.com/Lixher/Diagrammer-Bot)",2025-10-21T08:58:55.932514
1oborib,https://www.reddit.com/r/Python/comments/1oborib/i_built_a_persistent_kv_store_in_pure_python/,I built a Persistent KV Store in Pure Python,vollhard-natta,2025-10-21 01:51:07,28,1,"Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been work...","Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been working on for the past few months. It is a lightweight, persistent key-value storage engine in Python, built from scratch to understand and implement the Log-Structured Merge-tree (LSM-tree) architecture. The project, which is fully open-source, is explicitly optimized for write-heavy workloads. 



# Core Architecture:

The engine implements the three fundamental LSM components: the **Write Ahead Log (WAL)** for durability, an in-memory **Memtable** (using `SortedDict` for sorted writes), and immutable persistent **SSTables (Sorted String Tables)**.

Some features that I'm proud of:

* **Async Compaction**: Merging and compaction are handled by a **separate background worker thread**. The process itself takes a hybrid approach.
* **Client/Server Model**: The entire storage engine runs behind a **FastAPI server**. This allows multiple clients to connect via REST APIs or the included CLI tool.
* **Efficient Range Queries**: Added full support for range queries from `start_key` to `end_key`. This is achieved via a memory-efficient **k-way merge iterator** that combines results from the Memtable and all SSTables. The FastAPI server delivers the results using a `StreamingResponse` to prevent memory exhaustion for large result sets.
* **Bloom Filter**: Implemented a **Bloom Filter** for each SSTable to drastically reduce disk I/O by confirming that a key definitely does not exist before attempting a disk seek.
* **Binary Storage**: SSTables now use **Msgpack binary format** instead of JSON for smaller file sizes and reduced CPU load during serialization/deserialization.

My favourite part of the project is that I actually got to see a practical implementation of [Merge Sorted Arrays - GeeksforGeeks](https://www.geeksforgeeks.org/dsa/merge-k-sorted-arrays/). This is a pretty popular interview question and to see DSA being actually implemented is a crazy moment.

# Get Started

    pip install lsm_storage_engine_key_value_store

**Usage via CLI/Server:**

1. **Terminal 1 (Server):** `lsm-server`
2. **Terminal 2 (Client):** `lsm-cli` (Follow the CLI help for commands).

# Looking for Feedback

I'd love to hear your thoughts about this implementation and how I can make it better and what features I can add in later versions. Ideas and constructive criticism are always welcome. I'm also looking for contributors, if anyone is interested, please feel free to PM and we can discuss.

Repo link: [Shashank1985/storage-engine](https://github.com/Shashank1985/storage-engine)  
Thanks!!",2025-10-21T08:58:55.932584
1obo3rg,https://www.reddit.com/r/Python/comments/1obo3rg/kryypto_an_open_source_python_text_editor/,Kryypto an open source python text editor.,SxxVe,2025-10-21 01:21:30,3,5,"Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
*...","Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
* Full Keyboard Support ‚Äì no need for the mouse, every feature is accessible via hotkeys
* Discord presence
* Live MarkDown Preview
* Session Restore
* Custom Styling
   * `config\configuration.cfg` for editor settings
   * CSS for theme and style customization
* Editing Tools
   * Find text in file
   * Jump to line
   * Adjustable cursor (color & width)
   * Configurable animations (types & duration)
* Git & GitHub Integration
   * View total commits
   * See last commit message & date
   * Track file changes directly inside the editor
* Productivity Features
   * Autocompleter
   * Builtin Terminal
   * Docstring panel (hover to see function/class docstring)
   * Tab-based file switching
   * Bookmarking lines
   * Custom title bar
* Syntax Highlighting for
   * Python
   * CSS
   * JSON
   * Config files
   * Markdown

Target Audience

* Developers who prefer keyboard-driven workflows (no mouse required)
* Users looking for a lightweight alternative to heavier IDEs
* People who want to customize their editor with CSS and configuration settings
* Anyone experimenting with Python-based editors or open-source text editing tools

# Comparison:

* Lightweight ‚Äì minimal overhead, focused on speed
* Highly customizable ‚Äì styling via CSS and config files
* Keyboard-centric ‚Äì designed to be fully usable without a mouse

  
github repo: [https://github.com/NaturalCapsule/Kryypto](https://github.com/NaturalCapsule/Kryypto)

  
website: [https://naturalcapsule.github.io/Kryypto/](https://naturalcapsule.github.io/Kryypto/)",2025-10-21T08:58:55.932659
1obo0ze,https://www.reddit.com/r/Python/comments/1obo0ze/forgetting_python/,Forgetting Python,Ashamed-Society-2875,2025-10-21 01:17:52,0,4,"I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping f...","I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping for college exams , now when i come back to python it feels i have lost my level and my touch i feel like fkn loser , all those hrs spent in 8th grade for nothing , i forgot a lot , is it common or just me???",2025-10-21T08:58:55.932717
1obmzbm,https://www.reddit.com/r/Python/comments/1obmzbm/functoweb_is_now_much_better_thanks_for_the/,func-to-web is now much better ‚Äì Thanks for the feedback!,drboom9,2025-10-21 00:27:41,7,0,"15 days ago I shared func-to-web here and got amazing feedback (150+ upvotes, thank you!). Since then, I've been working hard on the suggestions and a...","15 days ago I shared func-to-web here and got amazing feedback (150+ upvotes, thank you!). Since then, I've been working hard on the suggestions and added some major features.

**What it does (quick reminder):**
Turn any Python function into a web UI with zero boilerplate:

```python
from func_to_web import run

def divide(a: int, b: int):
    return a / b

run(divide)  # Web form at localhost:8000
```

**Major updates since v0.1:**

**Dynamic Lists** ‚Äì Add/remove items with advanced validation:
```python
def process_data(
    # Dynamic lists with add/remove buttons
    images: list[ImageFile],                      # Multiple file uploads
    
    # Dual validation: list size AND individual items
    scores: Annotated[
        list[Annotated[int, Field(ge=0, le=100)]], 
        Field(min_length=3, max_length=10)
    ],  # 3-10 items required, each 0-100
    
    # Optional fields with toggle switches
    notes: str | None = None,                     # Optional text
    tags: list[str] | None = None                 # Optional list
):
    return FileResponse(generate_pdf(), ""report.pdf"")  # Auto-download
```

**High-Performance File Handling** ‚Äì Optimized streaming for large files:
- **Upload**: Real-time progress bars, 8MB chunks, handles GB+ files
- **Download**: Return `FileResponse(data, filename)` for auto-downloads
- **Performance**: ~237 MB/s localhost, ~115 MB/s over Gigabit Ethernet
- **Memory efficient**: Constant usage regardless of file size
- **Any format**: PDF, Excel, ZIP, images, binary data

**Optional Fields** ‚Äì `Type | None` creates toggle switches:
- Fields with defaults start enabled, without defaults start disabled
- Explicit control: `Type | OptionalEnabled/OptionalDisabled`
- Works with all types, constraints, and lists

**Dynamic Dropdowns** ‚Äì Runtime-generated options:
```python
def get_themes(): return fetch_from_database()

def configure(theme: Literal[get_themes]): pass  # Fresh options each request
```

**Rich Output Support**:
- **PIL Images**: Auto-displayed in browser
- **Matplotlib plots**: Rendered as PNG
- **File downloads**: Single or multiple files with streaming
- **JSON/text**: Formatted with copy-to-clipboard

**UX Improvements**:
- Dark mode with theme persistence
- Keyboard shortcuts (Ctrl+Enter to submit)
- Auto-focus first field
- Toast notifications
- Upload progress with speed indicators

**Current stats:**
- 180+ GitHub stars (The chinese community is sharing it too!)
- 454 unit tests
- Published on PyPI: `pip install func-to-web`
- 20+ runnable examples
- Used daily for internal tools at multiple companies

**Other improvements:**
- **Modular architecture**: Code separated by responsibilities (analysis, validation, form building...)
- **Comprehensive documentation**: Every function and class documented
- **Detailed changelog**: Track all improvements and breaking changes

I've tried to make this as professional and production-ready as possible while keeping the simple API.

Still focused on internal tools and rapid prototyping, not replacing proper web frameworks.

GitHub: https://github.com/offerrall/FuncToWeb

The community feedback really shaped these improvements. Thank you again! Keep the suggestions coming.",2025-10-21T08:58:55.932740
1obxzya,https://www.reddit.com/r/Python/comments/1obxzya/tuesday_daily_thread_advanced_questions/,Tuesday Daily Thread: Advanced questions,AutoModerator,2025-10-21 08:00:30,1,0,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about ...","# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",2025-10-21T09:00:28.813312
1obrz11,https://www.reddit.com/r/Python/comments/1obrz11/assemblytominecraftcommandblockcompiler_python/,Assembly-to-Minecraft-Command-Block-Compiler (Python) ‚Äî updated ‚Äî testers & contributors wanted,bowser04410,2025-10-21 03:57:47,1,0,"¬†I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedba...","I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedback, and contributors. Repo:¬†[https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler](https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler)

What My Project Does:

* Parses a tiny assembly-style language (labels, arithmetic, branches, simple I/O) and emits Minecraft command sequences tailored for command blocks.
* Produces low-level, inspectable output so you can see how program logic maps to in-game command-block logic.
* Implemented in Python for readability and easy contribution.

Target Audience:

* Minecraft command-block creators who want to run low-level programs without mods.
* Hobbyist compiler writers and learners looking for a compact Python codegen example.
* Contributors interested in parsing, code generation, testing strategies, or command optimization.
* This is an educational/hobby tool for small demos and experiments ‚Äî not a production compiler for large-scale programs.

Comparison (how it differs from alternatives):

* Assembly-focused: unlike high-level language‚ÜíMinecraft tools, it targets an assembly-like input so outputs are low-level and easy to debug in command blocks.
* Python-first and lightweight: prioritizes clarity and contributor-friendliness over performance.
* Command-block oriented: designed to work with vanilla in-game command blocks (does not target datapacks or mods).

How to help:

* Test: run examples, try outputs in a world, and note Minecraft version and exact steps when something fails.
* Report: open issues with minimal reproduction files and steps.
* Contribute: PRs welcome for bug fixes, examples, optimizations, docs, or tests ‚Äî look for good-first-issue.",2025-10-21T09:00:28.813486
1obqtmz,https://www.reddit.com/r/Python/comments/1obqtmz/has_any_library_emerged_as_the_replacement_for/,Has any library emerged as the replacement for Poliastro?,KerPop42,2025-10-21 03:15:23,2,1,"I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-...","I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-go. Even if you restrict yourself to 3.11 you *also* have to go back to pip <24.1 because of how some package requirements are written. I've looked around and can't find any other orbital dynamics libraries that are more than personal projects. Is the field just dead in python?",2025-10-21T09:00:28.813632
1obprx2,https://www.reddit.com/r/Python/comments/1obprx2/building_an_opensource_observability_tool_for/,Building an open-source observability tool for multi-agent systems - looking for feedback,Standard_Career_8603,2025-10-21 02:35:45,4,4,"I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-sour...","I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-source observability tool.   
  
**What it does**:  
\- Tracks information flow between agents   
\- Shows which tools are being called with what parameters   
\- Monitors how prompt changes affect agent behavior   
\- Works in both development and production   
  
**The gap I'm trying to fill**: Existing tools (LangSmith, LangFuse, AgentOps) are great at LLM observability (tokens, costs, latency), but I feel like they don't help much with multi-agent coordination. They show you **what** happened but not **why** agents failed to coordinate.   
  
  
**Looking for feedback**:  
1. Have you built multi-agent systems? What do you use for debugging?   
2. Does this solve a real problem or am I overengineering?   
3. What features would actually make this useful for you? Still early days, but happy to share the repo if folks are interested.",2025-10-21T09:00:28.813683
1obpjnf,https://www.reddit.com/r/Python/comments/1obpjnf/i_built_a_tool_that_runs_your_python_function_on/,i built a tool that runs your python function on 10k vms in parallel with one line of code.,Ok_Post_149,2025-10-21 02:25:33,6,7,"# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to ...","# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to hand it over to DevOps, the backlog would grow, and overall throughput would tank.

So I built **Burla**, the simplest cluster compute software that lets even Python beginners run code on massive clusters in the cloud. It‚Äôs one function with two parameters: the function and the inputs. You can bring your own Docker image, set hardware requirements, and run jobs as background tasks so you can fire and forget. Responses are fast, and you can call a million simple functions in just a few seconds.

Burla is built for embarrassingly parallel workloads like preprocessing data, hyperparameter tuning, and batch inference.

# Target Audience

Engineers, data scientists, and analysts who want to scale their code in production or research environments without dealing with infrastructure.

# Comparison

Unlike Ray or Dask, Burla doesn‚Äôt require cluster setup, orchestration, or YAML configs. It‚Äôs just:

    from burla import remote_parallel_map
    remote_parallel_map(func, inputs)
    

That‚Äôs it. It automatically handles distribution, retries, logging, and scaling across up to 10,000 VMs.

# Open Source & Free Credits

Burla is open source, and I‚Äôm improving the installation process. I also created managed versions for testing. If you want to try it, I‚Äôll cover 1,000 CPU hours and 100 GPU hours. Email me at [joe@burla.dev]() if interested.

Here‚Äôs a short intro video:  
[https://www.youtube.com/watch?v=9d22y\_kWjyE](https://www.youtube.com/watch?v=9d22y_kWjyE)

GitHub ‚Üí¬†[https://github.com/Burla-Cloud/burla](https://github.com/Burla-Cloud/burla)  
Docs ‚Üí¬†[https://docs.burla.dev](https://docs.burla.dev/)",2025-10-21T09:00:28.813757
1oborpj,https://www.reddit.com/r/Python/comments/1oborpj/i_made_a_python_bot_that_turns_your_text_images/,I made a Python bot that turns your text & images into diagrams right in Telegram.,No_Mongoose_8139,2025-10-21 01:51:22,0,5,"https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project ...","https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project structure, a mind map, or just explain a concept. Every time, I had to open heavy editors like Miro or Figma, which felt like overkill.

So, I decided to build a tool that lives right inside the app I use for communication all day: Telegram.

I'm excited to share my side project: **Diagrammer Bot**. It's a simple yet powerful bot in Python that lets you create diagrams on the fly.

**Here are the key features:**
*   **Text & Image Nodes:** You can create blocks not just from text, but from any image you send.
*   **Full Editing:** Create, connect, edit, and delete both nodes and edges.
*   **Project System:** Save your diagrams with custom names, load them later, or start new ones.
*   **Themes & Export:** Switch between a sleek dark mode and a clean light mode. Export your final diagram as a high-quality PNG.
*   **Open-Source:** The entire project is available on GitHub!

**Tech Stack:** Python, `python-telegram-bot`, `Graphviz` for rendering, and `Pillow` for watermarking.

I would be incredibly grateful for any feedback, feature ideas, or bug reports. And of course, a star ‚≠ê on GitHub would make my day!

*   **Try the bot here:** [https://t.me/diagrammer_robot](https://t.me/diagrammer_robot)
*   **Check out the code on GitHub:** [https://github.com/Lixher/Diagrammer-bot](https://github.com/Lixher/Diagrammer-Bot)",2025-10-21T09:00:28.814185
1oborib,https://www.reddit.com/r/Python/comments/1oborib/i_built_a_persistent_kv_store_in_pure_python/,I built a Persistent KV Store in Pure Python,vollhard-natta,2025-10-21 01:51:07,27,1,"Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been work...","Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been working on for the past few months. It is a lightweight, persistent key-value storage engine in Python, built from scratch to understand and implement the Log-Structured Merge-tree (LSM-tree) architecture. The project, which is fully open-source, is explicitly optimized for write-heavy workloads. 



# Core Architecture:

The engine implements the three fundamental LSM components: the **Write Ahead Log (WAL)** for durability, an in-memory **Memtable** (using `SortedDict` for sorted writes), and immutable persistent **SSTables (Sorted String Tables)**.

Some features that I'm proud of:

* **Async Compaction**: Merging and compaction are handled by a **separate background worker thread**. The process itself takes a hybrid approach.
* **Client/Server Model**: The entire storage engine runs behind a **FastAPI server**. This allows multiple clients to connect via REST APIs or the included CLI tool.
* **Efficient Range Queries**: Added full support for range queries from `start_key` to `end_key`. This is achieved via a memory-efficient **k-way merge iterator** that combines results from the Memtable and all SSTables. The FastAPI server delivers the results using a `StreamingResponse` to prevent memory exhaustion for large result sets.
* **Bloom Filter**: Implemented a **Bloom Filter** for each SSTable to drastically reduce disk I/O by confirming that a key definitely does not exist before attempting a disk seek.
* **Binary Storage**: SSTables now use **Msgpack binary format** instead of JSON for smaller file sizes and reduced CPU load during serialization/deserialization.

My favourite part of the project is that I actually got to see a practical implementation of [Merge Sorted Arrays - GeeksforGeeks](https://www.geeksforgeeks.org/dsa/merge-k-sorted-arrays/). This is a pretty popular interview question and to see DSA being actually implemented is a crazy moment.

# Get Started

    pip install lsm_storage_engine_key_value_store

**Usage via CLI/Server:**

1. **Terminal 1 (Server):** `lsm-server`
2. **Terminal 2 (Client):** `lsm-cli` (Follow the CLI help for commands).

# Looking for Feedback

I'd love to hear your thoughts about this implementation and how I can make it better and what features I can add in later versions. Ideas and constructive criticism are always welcome. I'm also looking for contributors, if anyone is interested, please feel free to PM and we can discuss.

Repo link: [Shashank1985/storage-engine](https://github.com/Shashank1985/storage-engine)  
Thanks!!",2025-10-21T09:00:28.814316
1obo3rg,https://www.reddit.com/r/Python/comments/1obo3rg/kryypto_an_open_source_python_text_editor/,Kryypto an open source python text editor.,SxxVe,2025-10-21 01:21:30,3,5,"Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
*...","Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
* Full Keyboard Support ‚Äì no need for the mouse, every feature is accessible via hotkeys
* Discord presence
* Live MarkDown Preview
* Session Restore
* Custom Styling
   * `config\configuration.cfg` for editor settings
   * CSS for theme and style customization
* Editing Tools
   * Find text in file
   * Jump to line
   * Adjustable cursor (color & width)
   * Configurable animations (types & duration)
* Git & GitHub Integration
   * View total commits
   * See last commit message & date
   * Track file changes directly inside the editor
* Productivity Features
   * Autocompleter
   * Builtin Terminal
   * Docstring panel (hover to see function/class docstring)
   * Tab-based file switching
   * Bookmarking lines
   * Custom title bar
* Syntax Highlighting for
   * Python
   * CSS
   * JSON
   * Config files
   * Markdown

Target Audience

* Developers who prefer keyboard-driven workflows (no mouse required)
* Users looking for a lightweight alternative to heavier IDEs
* People who want to customize their editor with CSS and configuration settings
* Anyone experimenting with Python-based editors or open-source text editing tools

# Comparison:

* Lightweight ‚Äì minimal overhead, focused on speed
* Highly customizable ‚Äì styling via CSS and config files
* Keyboard-centric ‚Äì designed to be fully usable without a mouse

  
github repo: [https://github.com/NaturalCapsule/Kryypto](https://github.com/NaturalCapsule/Kryypto)

  
website: [https://naturalcapsule.github.io/Kryypto/](https://naturalcapsule.github.io/Kryypto/)",2025-10-21T09:00:28.814483
1obo0ze,https://www.reddit.com/r/Python/comments/1obo0ze/forgetting_python/,Forgetting Python,Ashamed-Society-2875,2025-10-21 01:17:52,0,4,"I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping f...","I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping for college exams , now when i come back to python it feels i have lost my level and my touch i feel like fkn loser , all those hrs spent in 8th grade for nothing , i forgot a lot , is it common or just me???",2025-10-21T09:00:28.814612
1obmzbm,https://www.reddit.com/r/Python/comments/1obmzbm/functoweb_is_now_much_better_thanks_for_the/,func-to-web is now much better ‚Äì Thanks for the feedback!,drboom9,2025-10-21 00:27:41,5,0,"15 days ago I shared func-to-web here and got amazing feedback (150+ upvotes, thank you!). Since then, I've been working hard on the suggestions and a...","15 days ago I shared func-to-web here and got amazing feedback (150+ upvotes, thank you!). Since then, I've been working hard on the suggestions and added some major features.

**What it does (quick reminder):**
Turn any Python function into a web UI with zero boilerplate:

```python
from func_to_web import run

def divide(a: int, b: int):
    return a / b

run(divide)  # Web form at localhost:8000
```

**Major updates since v0.1:**

**Dynamic Lists** ‚Äì Add/remove items with advanced validation:
```python
def process_data(
    # Dynamic lists with add/remove buttons
    images: list[ImageFile],                      # Multiple file uploads
    
    # Dual validation: list size AND individual items
    scores: Annotated[
        list[Annotated[int, Field(ge=0, le=100)]], 
        Field(min_length=3, max_length=10)
    ],  # 3-10 items required, each 0-100
    
    # Optional fields with toggle switches
    notes: str | None = None,                     # Optional text
    tags: list[str] | None = None                 # Optional list
):
    return FileResponse(generate_pdf(), ""report.pdf"")  # Auto-download
```

**High-Performance File Handling** ‚Äì Optimized streaming for large files:
- **Upload**: Real-time progress bars, 8MB chunks, handles GB+ files
- **Download**: Return `FileResponse(data, filename)` for auto-downloads
- **Performance**: ~237 MB/s localhost, ~115 MB/s over Gigabit Ethernet
- **Memory efficient**: Constant usage regardless of file size
- **Any format**: PDF, Excel, ZIP, images, binary data

**Optional Fields** ‚Äì `Type | None` creates toggle switches:
- Fields with defaults start enabled, without defaults start disabled
- Explicit control: `Type | OptionalEnabled/OptionalDisabled`
- Works with all types, constraints, and lists

**Dynamic Dropdowns** ‚Äì Runtime-generated options:
```python
def get_themes(): return fetch_from_database()

def configure(theme: Literal[get_themes]): pass  # Fresh options each request
```

**Rich Output Support**:
- **PIL Images**: Auto-displayed in browser
- **Matplotlib plots**: Rendered as PNG
- **File downloads**: Single or multiple files with streaming
- **JSON/text**: Formatted with copy-to-clipboard

**UX Improvements**:
- Dark mode with theme persistence
- Keyboard shortcuts (Ctrl+Enter to submit)
- Auto-focus first field
- Toast notifications
- Upload progress with speed indicators

**Current stats:**
- 180+ GitHub stars (The chinese community is sharing it too!)
- 454 unit tests
- Published on PyPI: `pip install func-to-web`
- 20+ runnable examples
- Used daily for internal tools at multiple companies

**Other improvements:**
- **Modular architecture**: Code separated by responsibilities (analysis, validation, form building...)
- **Comprehensive documentation**: Every function and class documented
- **Detailed changelog**: Track all improvements and breaking changes

I've tried to make this as professional and production-ready as possible while keeping the simple API.

Still focused on internal tools and rapid prototyping, not replacing proper web frameworks.

GitHub: https://github.com/offerrall/FuncToWeb

The community feedback really shaped these improvements. Thank you again! Keep the suggestions coming.",2025-10-21T09:00:28.814706
1obxzya,https://www.reddit.com/r/Python/comments/1obxzya/tuesday_daily_thread_advanced_questions/,Tuesday Daily Thread: Advanced questions,AutoModerator,2025-10-21 08:00:30,1,0,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about ...","# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",2025-10-21T09:02:02.869350
1obrz11,https://www.reddit.com/r/Python/comments/1obrz11/assemblytominecraftcommandblockcompiler_python/,Assembly-to-Minecraft-Command-Block-Compiler (Python) ‚Äî updated ‚Äî testers & contributors wanted,bowser04410,2025-10-21 03:57:47,2,0,"¬†I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedba...","I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedback, and contributors. Repo:¬†[https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler](https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler)

What My Project Does:

* Parses a tiny assembly-style language (labels, arithmetic, branches, simple I/O) and emits Minecraft command sequences tailored for command blocks.
* Produces low-level, inspectable output so you can see how program logic maps to in-game command-block logic.
* Implemented in Python for readability and easy contribution.

Target Audience:

* Minecraft command-block creators who want to run low-level programs without mods.
* Hobbyist compiler writers and learners looking for a compact Python codegen example.
* Contributors interested in parsing, code generation, testing strategies, or command optimization.
* This is an educational/hobby tool for small demos and experiments ‚Äî not a production compiler for large-scale programs.

Comparison (how it differs from alternatives):

* Assembly-focused: unlike high-level language‚ÜíMinecraft tools, it targets an assembly-like input so outputs are low-level and easy to debug in command blocks.
* Python-first and lightweight: prioritizes clarity and contributor-friendliness over performance.
* Command-block oriented: designed to work with vanilla in-game command blocks (does not target datapacks or mods).

How to help:

* Test: run examples, try outputs in a world, and note Minecraft version and exact steps when something fails.
* Report: open issues with minimal reproduction files and steps.
* Contribute: PRs welcome for bug fixes, examples, optimizations, docs, or tests ‚Äî look for good-first-issue.",2025-10-21T09:02:02.869538
1obqtmz,https://www.reddit.com/r/Python/comments/1obqtmz/has_any_library_emerged_as_the_replacement_for/,Has any library emerged as the replacement for Poliastro?,KerPop42,2025-10-21 03:15:23,2,1,"I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-...","I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-go. Even if you restrict yourself to 3.11 you *also* have to go back to pip <24.1 because of how some package requirements are written. I've looked around and can't find any other orbital dynamics libraries that are more than personal projects. Is the field just dead in python?",2025-10-21T09:02:02.869665
1obprx2,https://www.reddit.com/r/Python/comments/1obprx2/building_an_opensource_observability_tool_for/,Building an open-source observability tool for multi-agent systems - looking for feedback,Standard_Career_8603,2025-10-21 02:35:45,2,4,"I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-sour...","I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-source observability tool.   
  
**What it does**:  
\- Tracks information flow between agents   
\- Shows which tools are being called with what parameters   
\- Monitors how prompt changes affect agent behavior   
\- Works in both development and production   
  
**The gap I'm trying to fill**: Existing tools (LangSmith, LangFuse, AgentOps) are great at LLM observability (tokens, costs, latency), but I feel like they don't help much with multi-agent coordination. They show you **what** happened but not **why** agents failed to coordinate.   
  
  
**Looking for feedback**:  
1. Have you built multi-agent systems? What do you use for debugging?   
2. Does this solve a real problem or am I overengineering?   
3. What features would actually make this useful for you? Still early days, but happy to share the repo if folks are interested.",2025-10-21T09:02:02.869714
1obpjnf,https://www.reddit.com/r/Python/comments/1obpjnf/i_built_a_tool_that_runs_your_python_function_on/,i built a tool that runs your python function on 10k vms in parallel with one line of code.,Ok_Post_149,2025-10-21 02:25:33,5,7,"# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to ...","# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to hand it over to DevOps, the backlog would grow, and overall throughput would tank.

So I built **Burla**, the simplest cluster compute software that lets even Python beginners run code on massive clusters in the cloud. It‚Äôs one function with two parameters: the function and the inputs. You can bring your own Docker image, set hardware requirements, and run jobs as background tasks so you can fire and forget. Responses are fast, and you can call a million simple functions in just a few seconds.

Burla is built for embarrassingly parallel workloads like preprocessing data, hyperparameter tuning, and batch inference.

# Target Audience

Engineers, data scientists, and analysts who want to scale their code in production or research environments without dealing with infrastructure.

# Comparison

Unlike Ray or Dask, Burla doesn‚Äôt require cluster setup, orchestration, or YAML configs. It‚Äôs just:

    from burla import remote_parallel_map
    remote_parallel_map(func, inputs)
    

That‚Äôs it. It automatically handles distribution, retries, logging, and scaling across up to 10,000 VMs.

# Open Source & Free Credits

Burla is open source, and I‚Äôm improving the installation process. I also created managed versions for testing. If you want to try it, I‚Äôll cover 1,000 CPU hours and 100 GPU hours. Email me at [joe@burla.dev]() if interested.

Here‚Äôs a short intro video:  
[https://www.youtube.com/watch?v=9d22y\_kWjyE](https://www.youtube.com/watch?v=9d22y_kWjyE)

GitHub ‚Üí¬†[https://github.com/Burla-Cloud/burla](https://github.com/Burla-Cloud/burla)  
Docs ‚Üí¬†[https://docs.burla.dev](https://docs.burla.dev/)",2025-10-21T09:02:02.869789
1oborpj,https://www.reddit.com/r/Python/comments/1oborpj/i_made_a_python_bot_that_turns_your_text_images/,I made a Python bot that turns your text & images into diagrams right in Telegram.,No_Mongoose_8139,2025-10-21 01:51:22,0,5,"https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project ...","https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project structure, a mind map, or just explain a concept. Every time, I had to open heavy editors like Miro or Figma, which felt like overkill.

So, I decided to build a tool that lives right inside the app I use for communication all day: Telegram.

I'm excited to share my side project: **Diagrammer Bot**. It's a simple yet powerful bot in Python that lets you create diagrams on the fly.

**Here are the key features:**
*   **Text & Image Nodes:** You can create blocks not just from text, but from any image you send.
*   **Full Editing:** Create, connect, edit, and delete both nodes and edges.
*   **Project System:** Save your diagrams with custom names, load them later, or start new ones.
*   **Themes & Export:** Switch between a sleek dark mode and a clean light mode. Export your final diagram as a high-quality PNG.
*   **Open-Source:** The entire project is available on GitHub!

**Tech Stack:** Python, `python-telegram-bot`, `Graphviz` for rendering, and `Pillow` for watermarking.

I would be incredibly grateful for any feedback, feature ideas, or bug reports. And of course, a star ‚≠ê on GitHub would make my day!

*   **Try the bot here:** [https://t.me/diagrammer_robot](https://t.me/diagrammer_robot)
*   **Check out the code on GitHub:** [https://github.com/Lixher/Diagrammer-bot](https://github.com/Lixher/Diagrammer-Bot)",2025-10-21T09:02:02.870160
1oborib,https://www.reddit.com/r/Python/comments/1oborib/i_built_a_persistent_kv_store_in_pure_python/,I built a Persistent KV Store in Pure Python,vollhard-natta,2025-10-21 01:51:07,29,1,"Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been work...","Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been working on for the past few months. It is a lightweight, persistent key-value storage engine in Python, built from scratch to understand and implement the Log-Structured Merge-tree (LSM-tree) architecture. The project, which is fully open-source, is explicitly optimized for write-heavy workloads. 



# Core Architecture:

The engine implements the three fundamental LSM components: the **Write Ahead Log (WAL)** for durability, an in-memory **Memtable** (using `SortedDict` for sorted writes), and immutable persistent **SSTables (Sorted String Tables)**.

Some features that I'm proud of:

* **Async Compaction**: Merging and compaction are handled by a **separate background worker thread**. The process itself takes a hybrid approach.
* **Client/Server Model**: The entire storage engine runs behind a **FastAPI server**. This allows multiple clients to connect via REST APIs or the included CLI tool.
* **Efficient Range Queries**: Added full support for range queries from `start_key` to `end_key`. This is achieved via a memory-efficient **k-way merge iterator** that combines results from the Memtable and all SSTables. The FastAPI server delivers the results using a `StreamingResponse` to prevent memory exhaustion for large result sets.
* **Bloom Filter**: Implemented a **Bloom Filter** for each SSTable to drastically reduce disk I/O by confirming that a key definitely does not exist before attempting a disk seek.
* **Binary Storage**: SSTables now use **Msgpack binary format** instead of JSON for smaller file sizes and reduced CPU load during serialization/deserialization.

My favourite part of the project is that I actually got to see a practical implementation of [Merge Sorted Arrays - GeeksforGeeks](https://www.geeksforgeeks.org/dsa/merge-k-sorted-arrays/). This is a pretty popular interview question and to see DSA being actually implemented is a crazy moment.

# Get Started

    pip install lsm_storage_engine_key_value_store

**Usage via CLI/Server:**

1. **Terminal 1 (Server):** `lsm-server`
2. **Terminal 2 (Client):** `lsm-cli` (Follow the CLI help for commands).

# Looking for Feedback

I'd love to hear your thoughts about this implementation and how I can make it better and what features I can add in later versions. Ideas and constructive criticism are always welcome. I'm also looking for contributors, if anyone is interested, please feel free to PM and we can discuss.

Repo link: [Shashank1985/storage-engine](https://github.com/Shashank1985/storage-engine)  
Thanks!!",2025-10-21T09:02:02.870227
1obo3rg,https://www.reddit.com/r/Python/comments/1obo3rg/kryypto_an_open_source_python_text_editor/,Kryypto an open source python text editor.,SxxVe,2025-10-21 01:21:30,3,5,"Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
*...","Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
* Full Keyboard Support ‚Äì no need for the mouse, every feature is accessible via hotkeys
* Discord presence
* Live MarkDown Preview
* Session Restore
* Custom Styling
   * `config\configuration.cfg` for editor settings
   * CSS for theme and style customization
* Editing Tools
   * Find text in file
   * Jump to line
   * Adjustable cursor (color & width)
   * Configurable animations (types & duration)
* Git & GitHub Integration
   * View total commits
   * See last commit message & date
   * Track file changes directly inside the editor
* Productivity Features
   * Autocompleter
   * Builtin Terminal
   * Docstring panel (hover to see function/class docstring)
   * Tab-based file switching
   * Bookmarking lines
   * Custom title bar
* Syntax Highlighting for
   * Python
   * CSS
   * JSON
   * Config files
   * Markdown

Target Audience

* Developers who prefer keyboard-driven workflows (no mouse required)
* Users looking for a lightweight alternative to heavier IDEs
* People who want to customize their editor with CSS and configuration settings
* Anyone experimenting with Python-based editors or open-source text editing tools

# Comparison:

* Lightweight ‚Äì minimal overhead, focused on speed
* Highly customizable ‚Äì styling via CSS and config files
* Keyboard-centric ‚Äì designed to be fully usable without a mouse

  
github repo: [https://github.com/NaturalCapsule/Kryypto](https://github.com/NaturalCapsule/Kryypto)

  
website: [https://naturalcapsule.github.io/Kryypto/](https://naturalcapsule.github.io/Kryypto/)",2025-10-21T09:02:02.870302
1obo0ze,https://www.reddit.com/r/Python/comments/1obo0ze/forgetting_python/,Forgetting Python,Ashamed-Society-2875,2025-10-21 01:17:52,0,4,"I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping f...","I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping for college exams , now when i come back to python it feels i have lost my level and my touch i feel like fkn loser , all those hrs spent in 8th grade for nothing , i forgot a lot , is it common or just me???",2025-10-21T09:02:02.870363
1obmzbm,https://www.reddit.com/r/Python/comments/1obmzbm/functoweb_is_now_much_better_thanks_for_the/,func-to-web is now much better ‚Äì Thanks for the feedback!,drboom9,2025-10-21 00:27:41,7,0,"15 days ago I shared func-to-web here and got amazing feedback (150+ upvotes, thank you!). Since then, I've been working hard on the suggestions and a...","15 days ago I shared func-to-web here and got amazing feedback (150+ upvotes, thank you!). Since then, I've been working hard on the suggestions and added some major features.

**What it does (quick reminder):**
Turn any Python function into a web UI with zero boilerplate:

```python
from func_to_web import run

def divide(a: int, b: int):
    return a / b

run(divide)  # Web form at localhost:8000
```

**Major updates since v0.1:**

**Dynamic Lists** ‚Äì Add/remove items with advanced validation:
```python
def process_data(
    # Dynamic lists with add/remove buttons
    images: list[ImageFile],                      # Multiple file uploads
    
    # Dual validation: list size AND individual items
    scores: Annotated[
        list[Annotated[int, Field(ge=0, le=100)]], 
        Field(min_length=3, max_length=10)
    ],  # 3-10 items required, each 0-100
    
    # Optional fields with toggle switches
    notes: str | None = None,                     # Optional text
    tags: list[str] | None = None                 # Optional list
):
    return FileResponse(generate_pdf(), ""report.pdf"")  # Auto-download
```

**High-Performance File Handling** ‚Äì Optimized streaming for large files:
- **Upload**: Real-time progress bars, 8MB chunks, handles GB+ files
- **Download**: Return `FileResponse(data, filename)` for auto-downloads
- **Performance**: ~237 MB/s localhost, ~115 MB/s over Gigabit Ethernet
- **Memory efficient**: Constant usage regardless of file size
- **Any format**: PDF, Excel, ZIP, images, binary data

**Optional Fields** ‚Äì `Type | None` creates toggle switches:
- Fields with defaults start enabled, without defaults start disabled
- Explicit control: `Type | OptionalEnabled/OptionalDisabled`
- Works with all types, constraints, and lists

**Dynamic Dropdowns** ‚Äì Runtime-generated options:
```python
def get_themes(): return fetch_from_database()

def configure(theme: Literal[get_themes]): pass  # Fresh options each request
```

**Rich Output Support**:
- **PIL Images**: Auto-displayed in browser
- **Matplotlib plots**: Rendered as PNG
- **File downloads**: Single or multiple files with streaming
- **JSON/text**: Formatted with copy-to-clipboard

**UX Improvements**:
- Dark mode with theme persistence
- Keyboard shortcuts (Ctrl+Enter to submit)
- Auto-focus first field
- Toast notifications
- Upload progress with speed indicators

**Current stats:**
- 180+ GitHub stars (The chinese community is sharing it too!)
- 454 unit tests
- Published on PyPI: `pip install func-to-web`
- 20+ runnable examples
- Used daily for internal tools at multiple companies

**Other improvements:**
- **Modular architecture**: Code separated by responsibilities (analysis, validation, form building...)
- **Comprehensive documentation**: Every function and class documented
- **Detailed changelog**: Track all improvements and breaking changes

I've tried to make this as professional and production-ready as possible while keeping the simple API.

Still focused on internal tools and rapid prototyping, not replacing proper web frameworks.

GitHub: https://github.com/offerrall/FuncToWeb

The community feedback really shaped these improvements. Thank you again! Keep the suggestions coming.",2025-10-21T09:02:02.870386
1obxzya,https://www.reddit.com/r/Python/comments/1obxzya/tuesday_daily_thread_advanced_questions/,Tuesday Daily Thread: Advanced questions,AutoModerator,2025-10-21 08:00:30,1,0,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about ...","# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",2025-10-21T09:03:34.239933
1obrz11,https://www.reddit.com/r/Python/comments/1obrz11/assemblytominecraftcommandblockcompiler_python/,Assembly-to-Minecraft-Command-Block-Compiler (Python) ‚Äî updated ‚Äî testers & contributors wanted,bowser04410,2025-10-21 03:57:47,4,0,"¬†I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedba...","I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedback, and contributors. Repo:¬†[https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler](https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler)

What My Project Does:

* Parses a tiny assembly-style language (labels, arithmetic, branches, simple I/O) and emits Minecraft command sequences tailored for command blocks.
* Produces low-level, inspectable output so you can see how program logic maps to in-game command-block logic.
* Implemented in Python for readability and easy contribution.

Target Audience:

* Minecraft command-block creators who want to run low-level programs without mods.
* Hobbyist compiler writers and learners looking for a compact Python codegen example.
* Contributors interested in parsing, code generation, testing strategies, or command optimization.
* This is an educational/hobby tool for small demos and experiments ‚Äî not a production compiler for large-scale programs.

Comparison (how it differs from alternatives):

* Assembly-focused: unlike high-level language‚ÜíMinecraft tools, it targets an assembly-like input so outputs are low-level and easy to debug in command blocks.
* Python-first and lightweight: prioritizes clarity and contributor-friendliness over performance.
* Command-block oriented: designed to work with vanilla in-game command blocks (does not target datapacks or mods).

How to help:

* Test: run examples, try outputs in a world, and note Minecraft version and exact steps when something fails.
* Report: open issues with minimal reproduction files and steps.
* Contribute: PRs welcome for bug fixes, examples, optimizations, docs, or tests ‚Äî look for good-first-issue.",2025-10-21T09:03:34.240025
1obqtmz,https://www.reddit.com/r/Python/comments/1obqtmz/has_any_library_emerged_as_the_replacement_for/,Has any library emerged as the replacement for Poliastro?,KerPop42,2025-10-21 03:15:23,2,1,"I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-...","I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-go. Even if you restrict yourself to 3.11 you *also* have to go back to pip <24.1 because of how some package requirements are written. I've looked around and can't find any other orbital dynamics libraries that are more than personal projects. Is the field just dead in python?",2025-10-21T09:03:34.240094
1obprx2,https://www.reddit.com/r/Python/comments/1obprx2/building_an_opensource_observability_tool_for/,Building an open-source observability tool for multi-agent systems - looking for feedback,Standard_Career_8603,2025-10-21 02:35:45,3,4,"I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-sour...","I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-source observability tool.   
  
**What it does**:  
\- Tracks information flow between agents   
\- Shows which tools are being called with what parameters   
\- Monitors how prompt changes affect agent behavior   
\- Works in both development and production   
  
**The gap I'm trying to fill**: Existing tools (LangSmith, LangFuse, AgentOps) are great at LLM observability (tokens, costs, latency), but I feel like they don't help much with multi-agent coordination. They show you **what** happened but not **why** agents failed to coordinate.   
  
  
**Looking for feedback**:  
1. Have you built multi-agent systems? What do you use for debugging?   
2. Does this solve a real problem or am I overengineering?   
3. What features would actually make this useful for you? Still early days, but happy to share the repo if folks are interested.",2025-10-21T09:03:34.240121
1obpjnf,https://www.reddit.com/r/Python/comments/1obpjnf/i_built_a_tool_that_runs_your_python_function_on/,i built a tool that runs your python function on 10k vms in parallel with one line of code.,Ok_Post_149,2025-10-21 02:25:33,7,7,"# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to ...","# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to hand it over to DevOps, the backlog would grow, and overall throughput would tank.

So I built **Burla**, the simplest cluster compute software that lets even Python beginners run code on massive clusters in the cloud. It‚Äôs one function with two parameters: the function and the inputs. You can bring your own Docker image, set hardware requirements, and run jobs as background tasks so you can fire and forget. Responses are fast, and you can call a million simple functions in just a few seconds.

Burla is built for embarrassingly parallel workloads like preprocessing data, hyperparameter tuning, and batch inference.

# Target Audience

Engineers, data scientists, and analysts who want to scale their code in production or research environments without dealing with infrastructure.

# Comparison

Unlike Ray or Dask, Burla doesn‚Äôt require cluster setup, orchestration, or YAML configs. It‚Äôs just:

    from burla import remote_parallel_map
    remote_parallel_map(func, inputs)
    

That‚Äôs it. It automatically handles distribution, retries, logging, and scaling across up to 10,000 VMs.

# Open Source & Free Credits

Burla is open source, and I‚Äôm improving the installation process. I also created managed versions for testing. If you want to try it, I‚Äôll cover 1,000 CPU hours and 100 GPU hours. Email me at [joe@burla.dev]() if interested.

Here‚Äôs a short intro video:  
[https://www.youtube.com/watch?v=9d22y\_kWjyE](https://www.youtube.com/watch?v=9d22y_kWjyE)

GitHub ‚Üí¬†[https://github.com/Burla-Cloud/burla](https://github.com/Burla-Cloud/burla)  
Docs ‚Üí¬†[https://docs.burla.dev](https://docs.burla.dev/)",2025-10-21T09:03:34.240158
1oborpj,https://www.reddit.com/r/Python/comments/1oborpj/i_made_a_python_bot_that_turns_your_text_images/,I made a Python bot that turns your text & images into diagrams right in Telegram.,No_Mongoose_8139,2025-10-21 01:51:22,0,5,"https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project ...","https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project structure, a mind map, or just explain a concept. Every time, I had to open heavy editors like Miro or Figma, which felt like overkill.

So, I decided to build a tool that lives right inside the app I use for communication all day: Telegram.

I'm excited to share my side project: **Diagrammer Bot**. It's a simple yet powerful bot in Python that lets you create diagrams on the fly.

**Here are the key features:**
*   **Text & Image Nodes:** You can create blocks not just from text, but from any image you send.
*   **Full Editing:** Create, connect, edit, and delete both nodes and edges.
*   **Project System:** Save your diagrams with custom names, load them later, or start new ones.
*   **Themes & Export:** Switch between a sleek dark mode and a clean light mode. Export your final diagram as a high-quality PNG.
*   **Open-Source:** The entire project is available on GitHub!

**Tech Stack:** Python, `python-telegram-bot`, `Graphviz` for rendering, and `Pillow` for watermarking.

I would be incredibly grateful for any feedback, feature ideas, or bug reports. And of course, a star ‚≠ê on GitHub would make my day!

*   **Try the bot here:** [https://t.me/diagrammer_robot](https://t.me/diagrammer_robot)
*   **Check out the code on GitHub:** [https://github.com/Lixher/Diagrammer-bot](https://github.com/Lixher/Diagrammer-Bot)",2025-10-21T09:03:34.240416
1oborib,https://www.reddit.com/r/Python/comments/1oborib/i_built_a_persistent_kv_store_in_pure_python/,I built a Persistent KV Store in Pure Python,vollhard-natta,2025-10-21 01:51:07,26,1,"Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been work...","Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been working on for the past few months. It is a lightweight, persistent key-value storage engine in Python, built from scratch to understand and implement the Log-Structured Merge-tree (LSM-tree) architecture. The project, which is fully open-source, is explicitly optimized for write-heavy workloads. 



# Core Architecture:

The engine implements the three fundamental LSM components: the **Write Ahead Log (WAL)** for durability, an in-memory **Memtable** (using `SortedDict` for sorted writes), and immutable persistent **SSTables (Sorted String Tables)**.

Some features that I'm proud of:

* **Async Compaction**: Merging and compaction are handled by a **separate background worker thread**. The process itself takes a hybrid approach.
* **Client/Server Model**: The entire storage engine runs behind a **FastAPI server**. This allows multiple clients to connect via REST APIs or the included CLI tool.
* **Efficient Range Queries**: Added full support for range queries from `start_key` to `end_key`. This is achieved via a memory-efficient **k-way merge iterator** that combines results from the Memtable and all SSTables. The FastAPI server delivers the results using a `StreamingResponse` to prevent memory exhaustion for large result sets.
* **Bloom Filter**: Implemented a **Bloom Filter** for each SSTable to drastically reduce disk I/O by confirming that a key definitely does not exist before attempting a disk seek.
* **Binary Storage**: SSTables now use **Msgpack binary format** instead of JSON for smaller file sizes and reduced CPU load during serialization/deserialization.

My favourite part of the project is that I actually got to see a practical implementation of [Merge Sorted Arrays - GeeksforGeeks](https://www.geeksforgeeks.org/dsa/merge-k-sorted-arrays/). This is a pretty popular interview question and to see DSA being actually implemented is a crazy moment.

# Get Started

    pip install lsm_storage_engine_key_value_store

**Usage via CLI/Server:**

1. **Terminal 1 (Server):** `lsm-server`
2. **Terminal 2 (Client):** `lsm-cli` (Follow the CLI help for commands).

# Looking for Feedback

I'd love to hear your thoughts about this implementation and how I can make it better and what features I can add in later versions. Ideas and constructive criticism are always welcome. I'm also looking for contributors, if anyone is interested, please feel free to PM and we can discuss.

Repo link: [Shashank1985/storage-engine](https://github.com/Shashank1985/storage-engine)  
Thanks!!",2025-10-21T09:03:34.240477
1obo3rg,https://www.reddit.com/r/Python/comments/1obo3rg/kryypto_an_open_source_python_text_editor/,Kryypto an open source python text editor.,SxxVe,2025-10-21 01:21:30,3,5,"Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
*...","Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
* Full Keyboard Support ‚Äì no need for the mouse, every feature is accessible via hotkeys
* Discord presence
* Live MarkDown Preview
* Session Restore
* Custom Styling
   * `config\configuration.cfg` for editor settings
   * CSS for theme and style customization
* Editing Tools
   * Find text in file
   * Jump to line
   * Adjustable cursor (color & width)
   * Configurable animations (types & duration)
* Git & GitHub Integration
   * View total commits
   * See last commit message & date
   * Track file changes directly inside the editor
* Productivity Features
   * Autocompleter
   * Builtin Terminal
   * Docstring panel (hover to see function/class docstring)
   * Tab-based file switching
   * Bookmarking lines
   * Custom title bar
* Syntax Highlighting for
   * Python
   * CSS
   * JSON
   * Config files
   * Markdown

Target Audience

* Developers who prefer keyboard-driven workflows (no mouse required)
* Users looking for a lightweight alternative to heavier IDEs
* People who want to customize their editor with CSS and configuration settings
* Anyone experimenting with Python-based editors or open-source text editing tools

# Comparison:

* Lightweight ‚Äì minimal overhead, focused on speed
* Highly customizable ‚Äì styling via CSS and config files
* Keyboard-centric ‚Äì designed to be fully usable without a mouse

  
github repo: [https://github.com/NaturalCapsule/Kryypto](https://github.com/NaturalCapsule/Kryypto)

  
website: [https://naturalcapsule.github.io/Kryypto/](https://naturalcapsule.github.io/Kryypto/)",2025-10-21T09:03:34.240549
1obo0ze,https://www.reddit.com/r/Python/comments/1obo0ze/forgetting_python/,Forgetting Python,Ashamed-Society-2875,2025-10-21 01:17:52,0,4,"I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping f...","I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping for college exams , now when i come back to python it feels i have lost my level and my touch i feel like fkn loser , all those hrs spent in 8th grade for nothing , i forgot a lot , is it common or just me???",2025-10-21T09:03:34.240605
1obmzbm,https://www.reddit.com/r/Python/comments/1obmzbm/functoweb_is_now_much_better_thanks_for_the/,func-to-web is now much better ‚Äì Thanks for the feedback!,drboom9,2025-10-21 00:27:41,6,0,"15 days ago I shared func-to-web here and got amazing feedback (150+ upvotes, thank you!). Since then, I've been working hard on the suggestions and a...","15 days ago I shared func-to-web here and got amazing feedback (150+ upvotes, thank you!). Since then, I've been working hard on the suggestions and added some major features.

**What it does (quick reminder):**
Turn any Python function into a web UI with zero boilerplate:

```python
from func_to_web import run

def divide(a: int, b: int):
    return a / b

run(divide)  # Web form at localhost:8000
```

**Major updates since v0.1:**

**Dynamic Lists** ‚Äì Add/remove items with advanced validation:
```python
def process_data(
    # Dynamic lists with add/remove buttons
    images: list[ImageFile],                      # Multiple file uploads
    
    # Dual validation: list size AND individual items
    scores: Annotated[
        list[Annotated[int, Field(ge=0, le=100)]], 
        Field(min_length=3, max_length=10)
    ],  # 3-10 items required, each 0-100
    
    # Optional fields with toggle switches
    notes: str | None = None,                     # Optional text
    tags: list[str] | None = None                 # Optional list
):
    return FileResponse(generate_pdf(), ""report.pdf"")  # Auto-download
```

**High-Performance File Handling** ‚Äì Optimized streaming for large files:
- **Upload**: Real-time progress bars, 8MB chunks, handles GB+ files
- **Download**: Return `FileResponse(data, filename)` for auto-downloads
- **Performance**: ~237 MB/s localhost, ~115 MB/s over Gigabit Ethernet
- **Memory efficient**: Constant usage regardless of file size
- **Any format**: PDF, Excel, ZIP, images, binary data

**Optional Fields** ‚Äì `Type | None` creates toggle switches:
- Fields with defaults start enabled, without defaults start disabled
- Explicit control: `Type | OptionalEnabled/OptionalDisabled`
- Works with all types, constraints, and lists

**Dynamic Dropdowns** ‚Äì Runtime-generated options:
```python
def get_themes(): return fetch_from_database()

def configure(theme: Literal[get_themes]): pass  # Fresh options each request
```

**Rich Output Support**:
- **PIL Images**: Auto-displayed in browser
- **Matplotlib plots**: Rendered as PNG
- **File downloads**: Single or multiple files with streaming
- **JSON/text**: Formatted with copy-to-clipboard

**UX Improvements**:
- Dark mode with theme persistence
- Keyboard shortcuts (Ctrl+Enter to submit)
- Auto-focus first field
- Toast notifications
- Upload progress with speed indicators

**Current stats:**
- 180+ GitHub stars (The chinese community is sharing it too!)
- 454 unit tests
- Published on PyPI: `pip install func-to-web`
- 20+ runnable examples
- Used daily for internal tools at multiple companies

**Other improvements:**
- **Modular architecture**: Code separated by responsibilities (analysis, validation, form building...)
- **Comprehensive documentation**: Every function and class documented
- **Detailed changelog**: Track all improvements and breaking changes

I've tried to make this as professional and production-ready as possible while keeping the simple API.

Still focused on internal tools and rapid prototyping, not replacing proper web frameworks.

GitHub: https://github.com/offerrall/FuncToWeb

The community feedback really shaped these improvements. Thank you again! Keep the suggestions coming.",2025-10-21T09:03:34.240626
1obxzya,https://www.reddit.com/r/Python/comments/1obxzya/tuesday_daily_thread_advanced_questions/,Tuesday Daily Thread: Advanced questions,AutoModerator,2025-10-21 08:00:30,1,0,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about ...","# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",2025-10-21T09:05:07.740606
1obrz11,https://www.reddit.com/r/Python/comments/1obrz11/assemblytominecraftcommandblockcompiler_python/,Assembly-to-Minecraft-Command-Block-Compiler (Python) ‚Äî updated ‚Äî testers & contributors wanted,bowser04410,2025-10-21 03:57:47,3,0,"¬†I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedba...","I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedback, and contributors. Repo:¬†[https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler](https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler)

What My Project Does:

* Parses a tiny assembly-style language (labels, arithmetic, branches, simple I/O) and emits Minecraft command sequences tailored for command blocks.
* Produces low-level, inspectable output so you can see how program logic maps to in-game command-block logic.
* Implemented in Python for readability and easy contribution.

Target Audience:

* Minecraft command-block creators who want to run low-level programs without mods.
* Hobbyist compiler writers and learners looking for a compact Python codegen example.
* Contributors interested in parsing, code generation, testing strategies, or command optimization.
* This is an educational/hobby tool for small demos and experiments ‚Äî not a production compiler for large-scale programs.

Comparison (how it differs from alternatives):

* Assembly-focused: unlike high-level language‚ÜíMinecraft tools, it targets an assembly-like input so outputs are low-level and easy to debug in command blocks.
* Python-first and lightweight: prioritizes clarity and contributor-friendliness over performance.
* Command-block oriented: designed to work with vanilla in-game command blocks (does not target datapacks or mods).

How to help:

* Test: run examples, try outputs in a world, and note Minecraft version and exact steps when something fails.
* Report: open issues with minimal reproduction files and steps.
* Contribute: PRs welcome for bug fixes, examples, optimizations, docs, or tests ‚Äî look for good-first-issue.",2025-10-21T09:05:07.740723
1obqtmz,https://www.reddit.com/r/Python/comments/1obqtmz/has_any_library_emerged_as_the_replacement_for/,Has any library emerged as the replacement for Poliastro?,KerPop42,2025-10-21 03:15:23,2,1,"I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-...","I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-go. Even if you restrict yourself to 3.11 you *also* have to go back to pip <24.1 because of how some package requirements are written. I've looked around and can't find any other orbital dynamics libraries that are more than personal projects. Is the field just dead in python?",2025-10-21T09:05:07.740792
1obprx2,https://www.reddit.com/r/Python/comments/1obprx2/building_an_opensource_observability_tool_for/,Building an open-source observability tool for multi-agent systems - looking for feedback,Standard_Career_8603,2025-10-21 02:35:45,2,4,"I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-sour...","I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-source observability tool.   
  
**What it does**:  
\- Tracks information flow between agents   
\- Shows which tools are being called with what parameters   
\- Monitors how prompt changes affect agent behavior   
\- Works in both development and production   
  
**The gap I'm trying to fill**: Existing tools (LangSmith, LangFuse, AgentOps) are great at LLM observability (tokens, costs, latency), but I feel like they don't help much with multi-agent coordination. They show you **what** happened but not **why** agents failed to coordinate.   
  
  
**Looking for feedback**:  
1. Have you built multi-agent systems? What do you use for debugging?   
2. Does this solve a real problem or am I overengineering?   
3. What features would actually make this useful for you? Still early days, but happy to share the repo if folks are interested.",2025-10-21T09:05:07.740819
1obpjnf,https://www.reddit.com/r/Python/comments/1obpjnf/i_built_a_tool_that_runs_your_python_function_on/,i built a tool that runs your python function on 10k vms in parallel with one line of code.,Ok_Post_149,2025-10-21 02:25:33,6,7,"# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to ...","# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to hand it over to DevOps, the backlog would grow, and overall throughput would tank.

So I built **Burla**, the simplest cluster compute software that lets even Python beginners run code on massive clusters in the cloud. It‚Äôs one function with two parameters: the function and the inputs. You can bring your own Docker image, set hardware requirements, and run jobs as background tasks so you can fire and forget. Responses are fast, and you can call a million simple functions in just a few seconds.

Burla is built for embarrassingly parallel workloads like preprocessing data, hyperparameter tuning, and batch inference.

# Target Audience

Engineers, data scientists, and analysts who want to scale their code in production or research environments without dealing with infrastructure.

# Comparison

Unlike Ray or Dask, Burla doesn‚Äôt require cluster setup, orchestration, or YAML configs. It‚Äôs just:

    from burla import remote_parallel_map
    remote_parallel_map(func, inputs)
    

That‚Äôs it. It automatically handles distribution, retries, logging, and scaling across up to 10,000 VMs.

# Open Source & Free Credits

Burla is open source, and I‚Äôm improving the installation process. I also created managed versions for testing. If you want to try it, I‚Äôll cover 1,000 CPU hours and 100 GPU hours. Email me at [joe@burla.dev]() if interested.

Here‚Äôs a short intro video:  
[https://www.youtube.com/watch?v=9d22y\_kWjyE](https://www.youtube.com/watch?v=9d22y_kWjyE)

GitHub ‚Üí¬†[https://github.com/Burla-Cloud/burla](https://github.com/Burla-Cloud/burla)  
Docs ‚Üí¬†[https://docs.burla.dev](https://docs.burla.dev/)",2025-10-21T09:05:07.740858
1oborpj,https://www.reddit.com/r/Python/comments/1oborpj/i_made_a_python_bot_that_turns_your_text_images/,I made a Python bot that turns your text & images into diagrams right in Telegram.,No_Mongoose_8139,2025-10-21 01:51:22,0,5,"https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project ...","https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project structure, a mind map, or just explain a concept. Every time, I had to open heavy editors like Miro or Figma, which felt like overkill.

So, I decided to build a tool that lives right inside the app I use for communication all day: Telegram.

I'm excited to share my side project: **Diagrammer Bot**. It's a simple yet powerful bot in Python that lets you create diagrams on the fly.

**Here are the key features:**
*   **Text & Image Nodes:** You can create blocks not just from text, but from any image you send.
*   **Full Editing:** Create, connect, edit, and delete both nodes and edges.
*   **Project System:** Save your diagrams with custom names, load them later, or start new ones.
*   **Themes & Export:** Switch between a sleek dark mode and a clean light mode. Export your final diagram as a high-quality PNG.
*   **Open-Source:** The entire project is available on GitHub!

**Tech Stack:** Python, `python-telegram-bot`, `Graphviz` for rendering, and `Pillow` for watermarking.

I would be incredibly grateful for any feedback, feature ideas, or bug reports. And of course, a star ‚≠ê on GitHub would make my day!

*   **Try the bot here:** [https://t.me/diagrammer_robot](https://t.me/diagrammer_robot)
*   **Check out the code on GitHub:** [https://github.com/Lixher/Diagrammer-bot](https://github.com/Lixher/Diagrammer-Bot)",2025-10-21T09:05:07.741204
1oborib,https://www.reddit.com/r/Python/comments/1oborib/i_built_a_persistent_kv_store_in_pure_python/,I built a Persistent KV Store in Pure Python,vollhard-natta,2025-10-21 01:51:07,27,1,"Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been work...","Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been working on for the past few months. It is a lightweight, persistent key-value storage engine in Python, built from scratch to understand and implement the Log-Structured Merge-tree (LSM-tree) architecture. The project, which is fully open-source, is explicitly optimized for write-heavy workloads. 



# Core Architecture:

The engine implements the three fundamental LSM components: the **Write Ahead Log (WAL)** for durability, an in-memory **Memtable** (using `SortedDict` for sorted writes), and immutable persistent **SSTables (Sorted String Tables)**.

Some features that I'm proud of:

* **Async Compaction**: Merging and compaction are handled by a **separate background worker thread**. The process itself takes a hybrid approach.
* **Client/Server Model**: The entire storage engine runs behind a **FastAPI server**. This allows multiple clients to connect via REST APIs or the included CLI tool.
* **Efficient Range Queries**: Added full support for range queries from `start_key` to `end_key`. This is achieved via a memory-efficient **k-way merge iterator** that combines results from the Memtable and all SSTables. The FastAPI server delivers the results using a `StreamingResponse` to prevent memory exhaustion for large result sets.
* **Bloom Filter**: Implemented a **Bloom Filter** for each SSTable to drastically reduce disk I/O by confirming that a key definitely does not exist before attempting a disk seek.
* **Binary Storage**: SSTables now use **Msgpack binary format** instead of JSON for smaller file sizes and reduced CPU load during serialization/deserialization.

My favourite part of the project is that I actually got to see a practical implementation of [Merge Sorted Arrays - GeeksforGeeks](https://www.geeksforgeeks.org/dsa/merge-k-sorted-arrays/). This is a pretty popular interview question and to see DSA being actually implemented is a crazy moment.

# Get Started

    pip install lsm_storage_engine_key_value_store

**Usage via CLI/Server:**

1. **Terminal 1 (Server):** `lsm-server`
2. **Terminal 2 (Client):** `lsm-cli` (Follow the CLI help for commands).

# Looking for Feedback

I'd love to hear your thoughts about this implementation and how I can make it better and what features I can add in later versions. Ideas and constructive criticism are always welcome. I'm also looking for contributors, if anyone is interested, please feel free to PM and we can discuss.

Repo link: [Shashank1985/storage-engine](https://github.com/Shashank1985/storage-engine)  
Thanks!!",2025-10-21T09:05:07.741269
1obo3rg,https://www.reddit.com/r/Python/comments/1obo3rg/kryypto_an_open_source_python_text_editor/,Kryypto an open source python text editor.,SxxVe,2025-10-21 01:21:30,3,5,"Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
*...","Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
* Full Keyboard Support ‚Äì no need for the mouse, every feature is accessible via hotkeys
* Discord presence
* Live MarkDown Preview
* Session Restore
* Custom Styling
   * `config\configuration.cfg` for editor settings
   * CSS for theme and style customization
* Editing Tools
   * Find text in file
   * Jump to line
   * Adjustable cursor (color & width)
   * Configurable animations (types & duration)
* Git & GitHub Integration
   * View total commits
   * See last commit message & date
   * Track file changes directly inside the editor
* Productivity Features
   * Autocompleter
   * Builtin Terminal
   * Docstring panel (hover to see function/class docstring)
   * Tab-based file switching
   * Bookmarking lines
   * Custom title bar
* Syntax Highlighting for
   * Python
   * CSS
   * JSON
   * Config files
   * Markdown

Target Audience

* Developers who prefer keyboard-driven workflows (no mouse required)
* Users looking for a lightweight alternative to heavier IDEs
* People who want to customize their editor with CSS and configuration settings
* Anyone experimenting with Python-based editors or open-source text editing tools

# Comparison:

* Lightweight ‚Äì minimal overhead, focused on speed
* Highly customizable ‚Äì styling via CSS and config files
* Keyboard-centric ‚Äì designed to be fully usable without a mouse

  
github repo: [https://github.com/NaturalCapsule/Kryypto](https://github.com/NaturalCapsule/Kryypto)

  
website: [https://naturalcapsule.github.io/Kryypto/](https://naturalcapsule.github.io/Kryypto/)",2025-10-21T09:05:07.741344
1obo0ze,https://www.reddit.com/r/Python/comments/1obo0ze/forgetting_python/,Forgetting Python,Ashamed-Society-2875,2025-10-21 01:17:52,0,4,"I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping f...","I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping for college exams , now when i come back to python it feels i have lost my level and my touch i feel like fkn loser , all those hrs spent in 8th grade for nothing , i forgot a lot , is it common or just me???",2025-10-21T09:05:07.741403
1obmzbm,https://www.reddit.com/r/Python/comments/1obmzbm/functoweb_is_now_much_better_thanks_for_the/,func-to-web is now much better ‚Äì Thanks for the feedback!,drboom9,2025-10-21 00:27:41,9,0,"15 days ago I shared func-to-web here and got amazing feedback (150+ upvotes, thank you!). Since then, I've been working hard on the suggestions and a...","15 days ago I shared func-to-web here and got amazing feedback (150+ upvotes, thank you!). Since then, I've been working hard on the suggestions and added some major features.

**What it does (quick reminder):**
Turn any Python function into a web UI with zero boilerplate:

```python
from func_to_web import run

def divide(a: int, b: int):
    return a / b

run(divide)  # Web form at localhost:8000
```

**Major updates since v0.1:**

**Dynamic Lists** ‚Äì Add/remove items with advanced validation:
```python
def process_data(
    # Dynamic lists with add/remove buttons
    images: list[ImageFile],                      # Multiple file uploads
    
    # Dual validation: list size AND individual items
    scores: Annotated[
        list[Annotated[int, Field(ge=0, le=100)]], 
        Field(min_length=3, max_length=10)
    ],  # 3-10 items required, each 0-100
    
    # Optional fields with toggle switches
    notes: str | None = None,                     # Optional text
    tags: list[str] | None = None                 # Optional list
):
    return FileResponse(generate_pdf(), ""report.pdf"")  # Auto-download
```

**High-Performance File Handling** ‚Äì Optimized streaming for large files:
- **Upload**: Real-time progress bars, 8MB chunks, handles GB+ files
- **Download**: Return `FileResponse(data, filename)` for auto-downloads
- **Performance**: ~237 MB/s localhost, ~115 MB/s over Gigabit Ethernet
- **Memory efficient**: Constant usage regardless of file size
- **Any format**: PDF, Excel, ZIP, images, binary data

**Optional Fields** ‚Äì `Type | None` creates toggle switches:
- Fields with defaults start enabled, without defaults start disabled
- Explicit control: `Type | OptionalEnabled/OptionalDisabled`
- Works with all types, constraints, and lists

**Dynamic Dropdowns** ‚Äì Runtime-generated options:
```python
def get_themes(): return fetch_from_database()

def configure(theme: Literal[get_themes]): pass  # Fresh options each request
```

**Rich Output Support**:
- **PIL Images**: Auto-displayed in browser
- **Matplotlib plots**: Rendered as PNG
- **File downloads**: Single or multiple files with streaming
- **JSON/text**: Formatted with copy-to-clipboard

**UX Improvements**:
- Dark mode with theme persistence
- Keyboard shortcuts (Ctrl+Enter to submit)
- Auto-focus first field
- Toast notifications
- Upload progress with speed indicators

**Current stats:**
- 180+ GitHub stars (The chinese community is sharing it too!)
- 454 unit tests
- Published on PyPI: `pip install func-to-web`
- 20+ runnable examples
- Used daily for internal tools at multiple companies

**Other improvements:**
- **Modular architecture**: Code separated by responsibilities (analysis, validation, form building...)
- **Comprehensive documentation**: Every function and class documented
- **Detailed changelog**: Track all improvements and breaking changes

I've tried to make this as professional and production-ready as possible while keeping the simple API.

Still focused on internal tools and rapid prototyping, not replacing proper web frameworks.

GitHub: https://github.com/offerrall/FuncToWeb

The community feedback really shaped these improvements. Thank you again! Keep the suggestions coming.",2025-10-21T09:05:07.741425
1obxzya,https://www.reddit.com/r/Python/comments/1obxzya/tuesday_daily_thread_advanced_questions/,Tuesday Daily Thread: Advanced questions,AutoModerator,2025-10-21 08:00:30,1,0,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about ...","# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",2025-10-21T09:06:38.836178
1obrz11,https://www.reddit.com/r/Python/comments/1obrz11/assemblytominecraftcommandblockcompiler_python/,Assembly-to-Minecraft-Command-Block-Compiler (Python) ‚Äî updated ‚Äî testers & contributors wanted,bowser04410,2025-10-21 03:57:47,2,0,"¬†I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedba...","I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedback, and contributors. Repo:¬†[https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler](https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler)

What My Project Does:

* Parses a tiny assembly-style language (labels, arithmetic, branches, simple I/O) and emits Minecraft command sequences tailored for command blocks.
* Produces low-level, inspectable output so you can see how program logic maps to in-game command-block logic.
* Implemented in Python for readability and easy contribution.

Target Audience:

* Minecraft command-block creators who want to run low-level programs without mods.
* Hobbyist compiler writers and learners looking for a compact Python codegen example.
* Contributors interested in parsing, code generation, testing strategies, or command optimization.
* This is an educational/hobby tool for small demos and experiments ‚Äî not a production compiler for large-scale programs.

Comparison (how it differs from alternatives):

* Assembly-focused: unlike high-level language‚ÜíMinecraft tools, it targets an assembly-like input so outputs are low-level and easy to debug in command blocks.
* Python-first and lightweight: prioritizes clarity and contributor-friendliness over performance.
* Command-block oriented: designed to work with vanilla in-game command blocks (does not target datapacks or mods).

How to help:

* Test: run examples, try outputs in a world, and note Minecraft version and exact steps when something fails.
* Report: open issues with minimal reproduction files and steps.
* Contribute: PRs welcome for bug fixes, examples, optimizations, docs, or tests ‚Äî look for good-first-issue.",2025-10-21T09:06:38.836339
1obqtmz,https://www.reddit.com/r/Python/comments/1obqtmz/has_any_library_emerged_as_the_replacement_for/,Has any library emerged as the replacement for Poliastro?,KerPop42,2025-10-21 03:15:23,2,1,"I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-...","I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-go. Even if you restrict yourself to 3.11 you *also* have to go back to pip <24.1 because of how some package requirements are written. I've looked around and can't find any other orbital dynamics libraries that are more than personal projects. Is the field just dead in python?",2025-10-21T09:06:38.836462
1obprx2,https://www.reddit.com/r/Python/comments/1obprx2/building_an_opensource_observability_tool_for/,Building an open-source observability tool for multi-agent systems - looking for feedback,Standard_Career_8603,2025-10-21 02:35:45,6,4,"I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-sour...","I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-source observability tool.   
  
**What it does**:  
\- Tracks information flow between agents   
\- Shows which tools are being called with what parameters   
\- Monitors how prompt changes affect agent behavior   
\- Works in both development and production   
  
**The gap I'm trying to fill**: Existing tools (LangSmith, LangFuse, AgentOps) are great at LLM observability (tokens, costs, latency), but I feel like they don't help much with multi-agent coordination. They show you **what** happened but not **why** agents failed to coordinate.   
  
  
**Looking for feedback**:  
1. Have you built multi-agent systems? What do you use for debugging?   
2. Does this solve a real problem or am I overengineering?   
3. What features would actually make this useful for you? Still early days, but happy to share the repo if folks are interested.",2025-10-21T09:06:38.836509
1obpjnf,https://www.reddit.com/r/Python/comments/1obpjnf/i_built_a_tool_that_runs_your_python_function_on/,i built a tool that runs your python function on 10k vms in parallel with one line of code.,Ok_Post_149,2025-10-21 02:25:33,4,7,"# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to ...","# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to hand it over to DevOps, the backlog would grow, and overall throughput would tank.

So I built **Burla**, the simplest cluster compute software that lets even Python beginners run code on massive clusters in the cloud. It‚Äôs one function with two parameters: the function and the inputs. You can bring your own Docker image, set hardware requirements, and run jobs as background tasks so you can fire and forget. Responses are fast, and you can call a million simple functions in just a few seconds.

Burla is built for embarrassingly parallel workloads like preprocessing data, hyperparameter tuning, and batch inference.

# Target Audience

Engineers, data scientists, and analysts who want to scale their code in production or research environments without dealing with infrastructure.

# Comparison

Unlike Ray or Dask, Burla doesn‚Äôt require cluster setup, orchestration, or YAML configs. It‚Äôs just:

    from burla import remote_parallel_map
    remote_parallel_map(func, inputs)
    

That‚Äôs it. It automatically handles distribution, retries, logging, and scaling across up to 10,000 VMs.

# Open Source & Free Credits

Burla is open source, and I‚Äôm improving the installation process. I also created managed versions for testing. If you want to try it, I‚Äôll cover 1,000 CPU hours and 100 GPU hours. Email me at [joe@burla.dev]() if interested.

Here‚Äôs a short intro video:  
[https://www.youtube.com/watch?v=9d22y\_kWjyE](https://www.youtube.com/watch?v=9d22y_kWjyE)

GitHub ‚Üí¬†[https://github.com/Burla-Cloud/burla](https://github.com/Burla-Cloud/burla)  
Docs ‚Üí¬†[https://docs.burla.dev](https://docs.burla.dev/)",2025-10-21T09:06:38.836570
1oborpj,https://www.reddit.com/r/Python/comments/1oborpj/i_made_a_python_bot_that_turns_your_text_images/,I made a Python bot that turns your text & images into diagrams right in Telegram.,No_Mongoose_8139,2025-10-21 01:51:22,0,5,"https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project ...","https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project structure, a mind map, or just explain a concept. Every time, I had to open heavy editors like Miro or Figma, which felt like overkill.

So, I decided to build a tool that lives right inside the app I use for communication all day: Telegram.

I'm excited to share my side project: **Diagrammer Bot**. It's a simple yet powerful bot in Python that lets you create diagrams on the fly.

**Here are the key features:**
*   **Text & Image Nodes:** You can create blocks not just from text, but from any image you send.
*   **Full Editing:** Create, connect, edit, and delete both nodes and edges.
*   **Project System:** Save your diagrams with custom names, load them later, or start new ones.
*   **Themes & Export:** Switch between a sleek dark mode and a clean light mode. Export your final diagram as a high-quality PNG.
*   **Open-Source:** The entire project is available on GitHub!

**Tech Stack:** Python, `python-telegram-bot`, `Graphviz` for rendering, and `Pillow` for watermarking.

I would be incredibly grateful for any feedback, feature ideas, or bug reports. And of course, a star ‚≠ê on GitHub would make my day!

*   **Try the bot here:** [https://t.me/diagrammer_robot](https://t.me/diagrammer_robot)
*   **Check out the code on GitHub:** [https://github.com/Lixher/Diagrammer-bot](https://github.com/Lixher/Diagrammer-Bot)",2025-10-21T09:06:38.836922
1oborib,https://www.reddit.com/r/Python/comments/1oborib/i_built_a_persistent_kv_store_in_pure_python/,I built a Persistent KV Store in Pure Python,vollhard-natta,2025-10-21 01:51:07,27,1,"Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been work...","Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been working on for the past few months. It is a lightweight, persistent key-value storage engine in Python, built from scratch to understand and implement the Log-Structured Merge-tree (LSM-tree) architecture. The project, which is fully open-source, is explicitly optimized for write-heavy workloads. 



# Core Architecture:

The engine implements the three fundamental LSM components: the **Write Ahead Log (WAL)** for durability, an in-memory **Memtable** (using `SortedDict` for sorted writes), and immutable persistent **SSTables (Sorted String Tables)**.

Some features that I'm proud of:

* **Async Compaction**: Merging and compaction are handled by a **separate background worker thread**. The process itself takes a hybrid approach.
* **Client/Server Model**: The entire storage engine runs behind a **FastAPI server**. This allows multiple clients to connect via REST APIs or the included CLI tool.
* **Efficient Range Queries**: Added full support for range queries from `start_key` to `end_key`. This is achieved via a memory-efficient **k-way merge iterator** that combines results from the Memtable and all SSTables. The FastAPI server delivers the results using a `StreamingResponse` to prevent memory exhaustion for large result sets.
* **Bloom Filter**: Implemented a **Bloom Filter** for each SSTable to drastically reduce disk I/O by confirming that a key definitely does not exist before attempting a disk seek.
* **Binary Storage**: SSTables now use **Msgpack binary format** instead of JSON for smaller file sizes and reduced CPU load during serialization/deserialization.

My favourite part of the project is that I actually got to see a practical implementation of [Merge Sorted Arrays - GeeksforGeeks](https://www.geeksforgeeks.org/dsa/merge-k-sorted-arrays/). This is a pretty popular interview question and to see DSA being actually implemented is a crazy moment.

# Get Started

    pip install lsm_storage_engine_key_value_store

**Usage via CLI/Server:**

1. **Terminal 1 (Server):** `lsm-server`
2. **Terminal 2 (Client):** `lsm-cli` (Follow the CLI help for commands).

# Looking for Feedback

I'd love to hear your thoughts about this implementation and how I can make it better and what features I can add in later versions. Ideas and constructive criticism are always welcome. I'm also looking for contributors, if anyone is interested, please feel free to PM and we can discuss.

Repo link: [Shashank1985/storage-engine](https://github.com/Shashank1985/storage-engine)  
Thanks!!",2025-10-21T09:06:38.836995
1obo3rg,https://www.reddit.com/r/Python/comments/1obo3rg/kryypto_an_open_source_python_text_editor/,Kryypto an open source python text editor.,SxxVe,2025-10-21 01:21:30,3,5,"Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
*...","Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
* Full Keyboard Support ‚Äì no need for the mouse, every feature is accessible via hotkeys
* Discord presence
* Live MarkDown Preview
* Session Restore
* Custom Styling
   * `config\configuration.cfg` for editor settings
   * CSS for theme and style customization
* Editing Tools
   * Find text in file
   * Jump to line
   * Adjustable cursor (color & width)
   * Configurable animations (types & duration)
* Git & GitHub Integration
   * View total commits
   * See last commit message & date
   * Track file changes directly inside the editor
* Productivity Features
   * Autocompleter
   * Builtin Terminal
   * Docstring panel (hover to see function/class docstring)
   * Tab-based file switching
   * Bookmarking lines
   * Custom title bar
* Syntax Highlighting for
   * Python
   * CSS
   * JSON
   * Config files
   * Markdown

Target Audience

* Developers who prefer keyboard-driven workflows (no mouse required)
* Users looking for a lightweight alternative to heavier IDEs
* People who want to customize their editor with CSS and configuration settings
* Anyone experimenting with Python-based editors or open-source text editing tools

# Comparison:

* Lightweight ‚Äì minimal overhead, focused on speed
* Highly customizable ‚Äì styling via CSS and config files
* Keyboard-centric ‚Äì designed to be fully usable without a mouse

  
github repo: [https://github.com/NaturalCapsule/Kryypto](https://github.com/NaturalCapsule/Kryypto)

  
website: [https://naturalcapsule.github.io/Kryypto/](https://naturalcapsule.github.io/Kryypto/)",2025-10-21T09:06:38.837068
1obo0ze,https://www.reddit.com/r/Python/comments/1obo0ze/forgetting_python/,Forgetting Python,Ashamed-Society-2875,2025-10-21 01:17:52,0,4,"I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping f...","I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping for college exams , now when i come back to python it feels i have lost my level and my touch i feel like fkn loser , all those hrs spent in 8th grade for nothing , i forgot a lot , is it common or just me???",2025-10-21T09:06:38.837127
1obmzbm,https://www.reddit.com/r/Python/comments/1obmzbm/functoweb_is_now_much_better_thanks_for_the/,func-to-web is now much better ‚Äì Thanks for the feedback!,drboom9,2025-10-21 00:27:41,6,0,"15 days ago I shared func-to-web here and got amazing feedback (150+ upvotes, thank you!). Since then, I've been working hard on the suggestions and a...","15 days ago I shared func-to-web here and got amazing feedback (150+ upvotes, thank you!). Since then, I've been working hard on the suggestions and added some major features.

**What it does (quick reminder):**
Turn any Python function into a web UI with zero boilerplate:

```python
from func_to_web import run

def divide(a: int, b: int):
    return a / b

run(divide)  # Web form at localhost:8000
```

**Major updates since v0.1:**

**Dynamic Lists** ‚Äì Add/remove items with advanced validation:
```python
def process_data(
    # Dynamic lists with add/remove buttons
    images: list[ImageFile],                      # Multiple file uploads
    
    # Dual validation: list size AND individual items
    scores: Annotated[
        list[Annotated[int, Field(ge=0, le=100)]], 
        Field(min_length=3, max_length=10)
    ],  # 3-10 items required, each 0-100
    
    # Optional fields with toggle switches
    notes: str | None = None,                     # Optional text
    tags: list[str] | None = None                 # Optional list
):
    return FileResponse(generate_pdf(), ""report.pdf"")  # Auto-download
```

**High-Performance File Handling** ‚Äì Optimized streaming for large files:
- **Upload**: Real-time progress bars, 8MB chunks, handles GB+ files
- **Download**: Return `FileResponse(data, filename)` for auto-downloads
- **Performance**: ~237 MB/s localhost, ~115 MB/s over Gigabit Ethernet
- **Memory efficient**: Constant usage regardless of file size
- **Any format**: PDF, Excel, ZIP, images, binary data

**Optional Fields** ‚Äì `Type | None` creates toggle switches:
- Fields with defaults start enabled, without defaults start disabled
- Explicit control: `Type | OptionalEnabled/OptionalDisabled`
- Works with all types, constraints, and lists

**Dynamic Dropdowns** ‚Äì Runtime-generated options:
```python
def get_themes(): return fetch_from_database()

def configure(theme: Literal[get_themes]): pass  # Fresh options each request
```

**Rich Output Support**:
- **PIL Images**: Auto-displayed in browser
- **Matplotlib plots**: Rendered as PNG
- **File downloads**: Single or multiple files with streaming
- **JSON/text**: Formatted with copy-to-clipboard

**UX Improvements**:
- Dark mode with theme persistence
- Keyboard shortcuts (Ctrl+Enter to submit)
- Auto-focus first field
- Toast notifications
- Upload progress with speed indicators

**Current stats:**
- 180+ GitHub stars (The chinese community is sharing it too!)
- 454 unit tests
- Published on PyPI: `pip install func-to-web`
- 20+ runnable examples
- Used daily for internal tools at multiple companies

**Other improvements:**
- **Modular architecture**: Code separated by responsibilities (analysis, validation, form building...)
- **Comprehensive documentation**: Every function and class documented
- **Detailed changelog**: Track all improvements and breaking changes

I've tried to make this as professional and production-ready as possible while keeping the simple API.

Still focused on internal tools and rapid prototyping, not replacing proper web frameworks.

GitHub: https://github.com/offerrall/FuncToWeb

The community feedback really shaped these improvements. Thank you again! Keep the suggestions coming.",2025-10-21T09:06:38.837149
1obxzya,https://www.reddit.com/r/Python/comments/1obxzya/tuesday_daily_thread_advanced_questions/,Tuesday Daily Thread: Advanced questions,AutoModerator,2025-10-21 08:00:30,1,0,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about ...","# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",2025-10-21T09:08:12.065319
1obrz11,https://www.reddit.com/r/Python/comments/1obrz11/assemblytominecraftcommandblockcompiler_python/,Assembly-to-Minecraft-Command-Block-Compiler (Python) ‚Äî updated ‚Äî testers & contributors wanted,bowser04410,2025-10-21 03:57:47,2,0,"¬†I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedba...","I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedback, and contributors. Repo:¬†[https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler](https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler)

What My Project Does:

* Parses a tiny assembly-style language (labels, arithmetic, branches, simple I/O) and emits Minecraft command sequences tailored for command blocks.
* Produces low-level, inspectable output so you can see how program logic maps to in-game command-block logic.
* Implemented in Python for readability and easy contribution.

Target Audience:

* Minecraft command-block creators who want to run low-level programs without mods.
* Hobbyist compiler writers and learners looking for a compact Python codegen example.
* Contributors interested in parsing, code generation, testing strategies, or command optimization.
* This is an educational/hobby tool for small demos and experiments ‚Äî not a production compiler for large-scale programs.

Comparison (how it differs from alternatives):

* Assembly-focused: unlike high-level language‚ÜíMinecraft tools, it targets an assembly-like input so outputs are low-level and easy to debug in command blocks.
* Python-first and lightweight: prioritizes clarity and contributor-friendliness over performance.
* Command-block oriented: designed to work with vanilla in-game command blocks (does not target datapacks or mods).

How to help:

* Test: run examples, try outputs in a world, and note Minecraft version and exact steps when something fails.
* Report: open issues with minimal reproduction files and steps.
* Contribute: PRs welcome for bug fixes, examples, optimizations, docs, or tests ‚Äî look for good-first-issue.",2025-10-21T09:08:12.065459
1obqtmz,https://www.reddit.com/r/Python/comments/1obqtmz/has_any_library_emerged_as_the_replacement_for/,Has any library emerged as the replacement for Poliastro?,KerPop42,2025-10-21 03:15:23,2,1,"I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-...","I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-go. Even if you restrict yourself to 3.11 you *also* have to go back to pip <24.1 because of how some package requirements are written. I've looked around and can't find any other orbital dynamics libraries that are more than personal projects. Is the field just dead in python?",2025-10-21T09:08:12.065567
1obprx2,https://www.reddit.com/r/Python/comments/1obprx2/building_an_opensource_observability_tool_for/,Building an open-source observability tool for multi-agent systems - looking for feedback,Standard_Career_8603,2025-10-21 02:35:45,6,4,"I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-sour...","I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-source observability tool.   
  
**What it does**:  
\- Tracks information flow between agents   
\- Shows which tools are being called with what parameters   
\- Monitors how prompt changes affect agent behavior   
\- Works in both development and production   
  
**The gap I'm trying to fill**: Existing tools (LangSmith, LangFuse, AgentOps) are great at LLM observability (tokens, costs, latency), but I feel like they don't help much with multi-agent coordination. They show you **what** happened but not **why** agents failed to coordinate.   
  
  
**Looking for feedback**:  
1. Have you built multi-agent systems? What do you use for debugging?   
2. Does this solve a real problem or am I overengineering?   
3. What features would actually make this useful for you? Still early days, but happy to share the repo if folks are interested.",2025-10-21T09:08:12.065610
1obpjnf,https://www.reddit.com/r/Python/comments/1obpjnf/i_built_a_tool_that_runs_your_python_function_on/,i built a tool that runs your python function on 10k vms in parallel with one line of code.,Ok_Post_149,2025-10-21 02:25:33,6,7,"# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to ...","# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to hand it over to DevOps, the backlog would grow, and overall throughput would tank.

So I built **Burla**, the simplest cluster compute software that lets even Python beginners run code on massive clusters in the cloud. It‚Äôs one function with two parameters: the function and the inputs. You can bring your own Docker image, set hardware requirements, and run jobs as background tasks so you can fire and forget. Responses are fast, and you can call a million simple functions in just a few seconds.

Burla is built for embarrassingly parallel workloads like preprocessing data, hyperparameter tuning, and batch inference.

# Target Audience

Engineers, data scientists, and analysts who want to scale their code in production or research environments without dealing with infrastructure.

# Comparison

Unlike Ray or Dask, Burla doesn‚Äôt require cluster setup, orchestration, or YAML configs. It‚Äôs just:

    from burla import remote_parallel_map
    remote_parallel_map(func, inputs)
    

That‚Äôs it. It automatically handles distribution, retries, logging, and scaling across up to 10,000 VMs.

# Open Source & Free Credits

Burla is open source, and I‚Äôm improving the installation process. I also created managed versions for testing. If you want to try it, I‚Äôll cover 1,000 CPU hours and 100 GPU hours. Email me at [joe@burla.dev]() if interested.

Here‚Äôs a short intro video:  
[https://www.youtube.com/watch?v=9d22y\_kWjyE](https://www.youtube.com/watch?v=9d22y_kWjyE)

GitHub ‚Üí¬†[https://github.com/Burla-Cloud/burla](https://github.com/Burla-Cloud/burla)  
Docs ‚Üí¬†[https://docs.burla.dev](https://docs.burla.dev/)",2025-10-21T09:08:12.065676
1oborpj,https://www.reddit.com/r/Python/comments/1oborpj/i_made_a_python_bot_that_turns_your_text_images/,I made a Python bot that turns your text & images into diagrams right in Telegram.,No_Mongoose_8139,2025-10-21 01:51:22,0,5,"https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project ...","https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project structure, a mind map, or just explain a concept. Every time, I had to open heavy editors like Miro or Figma, which felt like overkill.

So, I decided to build a tool that lives right inside the app I use for communication all day: Telegram.

I'm excited to share my side project: **Diagrammer Bot**. It's a simple yet powerful bot in Python that lets you create diagrams on the fly.

**Here are the key features:**
*   **Text & Image Nodes:** You can create blocks not just from text, but from any image you send.
*   **Full Editing:** Create, connect, edit, and delete both nodes and edges.
*   **Project System:** Save your diagrams with custom names, load them later, or start new ones.
*   **Themes & Export:** Switch between a sleek dark mode and a clean light mode. Export your final diagram as a high-quality PNG.
*   **Open-Source:** The entire project is available on GitHub!

**Tech Stack:** Python, `python-telegram-bot`, `Graphviz` for rendering, and `Pillow` for watermarking.

I would be incredibly grateful for any feedback, feature ideas, or bug reports. And of course, a star ‚≠ê on GitHub would make my day!

*   **Try the bot here:** [https://t.me/diagrammer_robot](https://t.me/diagrammer_robot)
*   **Check out the code on GitHub:** [https://github.com/Lixher/Diagrammer-bot](https://github.com/Lixher/Diagrammer-Bot)",2025-10-21T09:08:12.066116
1oborib,https://www.reddit.com/r/Python/comments/1oborib/i_built_a_persistent_kv_store_in_pure_python/,I built a Persistent KV Store in Pure Python,vollhard-natta,2025-10-21 01:51:07,29,1,"Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been work...","Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been working on for the past few months. It is a lightweight, persistent key-value storage engine in Python, built from scratch to understand and implement the Log-Structured Merge-tree (LSM-tree) architecture. The project, which is fully open-source, is explicitly optimized for write-heavy workloads. 



# Core Architecture:

The engine implements the three fundamental LSM components: the **Write Ahead Log (WAL)** for durability, an in-memory **Memtable** (using `SortedDict` for sorted writes), and immutable persistent **SSTables (Sorted String Tables)**.

Some features that I'm proud of:

* **Async Compaction**: Merging and compaction are handled by a **separate background worker thread**. The process itself takes a hybrid approach.
* **Client/Server Model**: The entire storage engine runs behind a **FastAPI server**. This allows multiple clients to connect via REST APIs or the included CLI tool.
* **Efficient Range Queries**: Added full support for range queries from `start_key` to `end_key`. This is achieved via a memory-efficient **k-way merge iterator** that combines results from the Memtable and all SSTables. The FastAPI server delivers the results using a `StreamingResponse` to prevent memory exhaustion for large result sets.
* **Bloom Filter**: Implemented a **Bloom Filter** for each SSTable to drastically reduce disk I/O by confirming that a key definitely does not exist before attempting a disk seek.
* **Binary Storage**: SSTables now use **Msgpack binary format** instead of JSON for smaller file sizes and reduced CPU load during serialization/deserialization.

My favourite part of the project is that I actually got to see a practical implementation of [Merge Sorted Arrays - GeeksforGeeks](https://www.geeksforgeeks.org/dsa/merge-k-sorted-arrays/). This is a pretty popular interview question and to see DSA being actually implemented is a crazy moment.

# Get Started

    pip install lsm_storage_engine_key_value_store

**Usage via CLI/Server:**

1. **Terminal 1 (Server):** `lsm-server`
2. **Terminal 2 (Client):** `lsm-cli` (Follow the CLI help for commands).

# Looking for Feedback

I'd love to hear your thoughts about this implementation and how I can make it better and what features I can add in later versions. Ideas and constructive criticism are always welcome. I'm also looking for contributors, if anyone is interested, please feel free to PM and we can discuss.

Repo link: [Shashank1985/storage-engine](https://github.com/Shashank1985/storage-engine)  
Thanks!!",2025-10-21T09:08:12.066224
1obo3rg,https://www.reddit.com/r/Python/comments/1obo3rg/kryypto_an_open_source_python_text_editor/,Kryypto an open source python text editor.,SxxVe,2025-10-21 01:21:30,3,5,"Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
*...","Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
* Full Keyboard Support ‚Äì no need for the mouse, every feature is accessible via hotkeys
* Discord presence
* Live MarkDown Preview
* Session Restore
* Custom Styling
   * `config\configuration.cfg` for editor settings
   * CSS for theme and style customization
* Editing Tools
   * Find text in file
   * Jump to line
   * Adjustable cursor (color & width)
   * Configurable animations (types & duration)
* Git & GitHub Integration
   * View total commits
   * See last commit message & date
   * Track file changes directly inside the editor
* Productivity Features
   * Autocompleter
   * Builtin Terminal
   * Docstring panel (hover to see function/class docstring)
   * Tab-based file switching
   * Bookmarking lines
   * Custom title bar
* Syntax Highlighting for
   * Python
   * CSS
   * JSON
   * Config files
   * Markdown

Target Audience

* Developers who prefer keyboard-driven workflows (no mouse required)
* Users looking for a lightweight alternative to heavier IDEs
* People who want to customize their editor with CSS and configuration settings
* Anyone experimenting with Python-based editors or open-source text editing tools

# Comparison:

* Lightweight ‚Äì minimal overhead, focused on speed
* Highly customizable ‚Äì styling via CSS and config files
* Keyboard-centric ‚Äì designed to be fully usable without a mouse

  
github repo: [https://github.com/NaturalCapsule/Kryypto](https://github.com/NaturalCapsule/Kryypto)

  
website: [https://naturalcapsule.github.io/Kryypto/](https://naturalcapsule.github.io/Kryypto/)",2025-10-21T09:08:12.066362
1obo0ze,https://www.reddit.com/r/Python/comments/1obo0ze/forgetting_python/,Forgetting Python,Ashamed-Society-2875,2025-10-21 01:17:52,0,4,"I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping f...","I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping for college exams , now when i come back to python it feels i have lost my level and my touch i feel like fkn loser , all those hrs spent in 8th grade for nothing , i forgot a lot , is it common or just me???",2025-10-21T09:08:12.066468
1obmzbm,https://www.reddit.com/r/Python/comments/1obmzbm/functoweb_is_now_much_better_thanks_for_the/,func-to-web is now much better ‚Äì Thanks for the feedback!,drboom9,2025-10-21 00:27:41,9,0,"15 days ago I shared func-to-web here and got amazing feedback (150+ upvotes, thank you!). Since then, I've been working hard on the suggestions and a...","15 days ago I shared func-to-web here and got amazing feedback (150+ upvotes, thank you!). Since then, I've been working hard on the suggestions and added some major features.

**What it does (quick reminder):**
Turn any Python function into a web UI with zero boilerplate:

```python
from func_to_web import run

def divide(a: int, b: int):
    return a / b

run(divide)  # Web form at localhost:8000
```

**Major updates since v0.1:**

**Dynamic Lists** ‚Äì Add/remove items with advanced validation:
```python
def process_data(
    # Dynamic lists with add/remove buttons
    images: list[ImageFile],                      # Multiple file uploads
    
    # Dual validation: list size AND individual items
    scores: Annotated[
        list[Annotated[int, Field(ge=0, le=100)]], 
        Field(min_length=3, max_length=10)
    ],  # 3-10 items required, each 0-100
    
    # Optional fields with toggle switches
    notes: str | None = None,                     # Optional text
    tags: list[str] | None = None                 # Optional list
):
    return FileResponse(generate_pdf(), ""report.pdf"")  # Auto-download
```

**High-Performance File Handling** ‚Äì Optimized streaming for large files:
- **Upload**: Real-time progress bars, 8MB chunks, handles GB+ files
- **Download**: Return `FileResponse(data, filename)` for auto-downloads
- **Performance**: ~237 MB/s localhost, ~115 MB/s over Gigabit Ethernet
- **Memory efficient**: Constant usage regardless of file size
- **Any format**: PDF, Excel, ZIP, images, binary data

**Optional Fields** ‚Äì `Type | None` creates toggle switches:
- Fields with defaults start enabled, without defaults start disabled
- Explicit control: `Type | OptionalEnabled/OptionalDisabled`
- Works with all types, constraints, and lists

**Dynamic Dropdowns** ‚Äì Runtime-generated options:
```python
def get_themes(): return fetch_from_database()

def configure(theme: Literal[get_themes]): pass  # Fresh options each request
```

**Rich Output Support**:
- **PIL Images**: Auto-displayed in browser
- **Matplotlib plots**: Rendered as PNG
- **File downloads**: Single or multiple files with streaming
- **JSON/text**: Formatted with copy-to-clipboard

**UX Improvements**:
- Dark mode with theme persistence
- Keyboard shortcuts (Ctrl+Enter to submit)
- Auto-focus first field
- Toast notifications
- Upload progress with speed indicators

**Current stats:**
- 180+ GitHub stars (The chinese community is sharing it too!)
- 454 unit tests
- Published on PyPI: `pip install func-to-web`
- 20+ runnable examples
- Used daily for internal tools at multiple companies

**Other improvements:**
- **Modular architecture**: Code separated by responsibilities (analysis, validation, form building...)
- **Comprehensive documentation**: Every function and class documented
- **Detailed changelog**: Track all improvements and breaking changes

I've tried to make this as professional and production-ready as possible while keeping the simple API.

Still focused on internal tools and rapid prototyping, not replacing proper web frameworks.

GitHub: https://github.com/offerrall/FuncToWeb

The community feedback really shaped these improvements. Thank you again! Keep the suggestions coming.",2025-10-21T09:08:12.066507
1obxzya,https://www.reddit.com/r/Python/comments/1obxzya/tuesday_daily_thread_advanced_questions/,Tuesday Daily Thread: Advanced questions,AutoModerator,2025-10-21 08:00:30,1,0,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about ...","# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",2025-10-21T09:09:55.959643
1obrz11,https://www.reddit.com/r/Python/comments/1obrz11/assemblytominecraftcommandblockcompiler_python/,Assembly-to-Minecraft-Command-Block-Compiler (Python) ‚Äî updated ‚Äî testers & contributors wanted,bowser04410,2025-10-21 03:57:47,3,0,"¬†I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedba...","I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedback, and contributors. Repo:¬†[https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler](https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler)

What My Project Does:

* Parses a tiny assembly-style language (labels, arithmetic, branches, simple I/O) and emits Minecraft command sequences tailored for command blocks.
* Produces low-level, inspectable output so you can see how program logic maps to in-game command-block logic.
* Implemented in Python for readability and easy contribution.

Target Audience:

* Minecraft command-block creators who want to run low-level programs without mods.
* Hobbyist compiler writers and learners looking for a compact Python codegen example.
* Contributors interested in parsing, code generation, testing strategies, or command optimization.
* This is an educational/hobby tool for small demos and experiments ‚Äî not a production compiler for large-scale programs.

Comparison (how it differs from alternatives):

* Assembly-focused: unlike high-level language‚ÜíMinecraft tools, it targets an assembly-like input so outputs are low-level and easy to debug in command blocks.
* Python-first and lightweight: prioritizes clarity and contributor-friendliness over performance.
* Command-block oriented: designed to work with vanilla in-game command blocks (does not target datapacks or mods).

How to help:

* Test: run examples, try outputs in a world, and note Minecraft version and exact steps when something fails.
* Report: open issues with minimal reproduction files and steps.
* Contribute: PRs welcome for bug fixes, examples, optimizations, docs, or tests ‚Äî look for good-first-issue.",2025-10-21T09:09:55.959768
1obqtmz,https://www.reddit.com/r/Python/comments/1obqtmz/has_any_library_emerged_as_the_replacement_for/,Has any library emerged as the replacement for Poliastro?,KerPop42,2025-10-21 03:15:23,2,1,"I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-...","I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-go. Even if you restrict yourself to 3.11 you *also* have to go back to pip <24.1 because of how some package requirements are written. I've looked around and can't find any other orbital dynamics libraries that are more than personal projects. Is the field just dead in python?",2025-10-21T09:09:55.959837
1obprx2,https://www.reddit.com/r/Python/comments/1obprx2/building_an_opensource_observability_tool_for/,Building an open-source observability tool for multi-agent systems - looking for feedback,Standard_Career_8603,2025-10-21 02:35:45,2,4,"I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-sour...","I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-source observability tool.   
  
**What it does**:  
\- Tracks information flow between agents   
\- Shows which tools are being called with what parameters   
\- Monitors how prompt changes affect agent behavior   
\- Works in both development and production   
  
**The gap I'm trying to fill**: Existing tools (LangSmith, LangFuse, AgentOps) are great at LLM observability (tokens, costs, latency), but I feel like they don't help much with multi-agent coordination. They show you **what** happened but not **why** agents failed to coordinate.   
  
  
**Looking for feedback**:  
1. Have you built multi-agent systems? What do you use for debugging?   
2. Does this solve a real problem or am I overengineering?   
3. What features would actually make this useful for you? Still early days, but happy to share the repo if folks are interested.",2025-10-21T09:09:55.959865
1obpjnf,https://www.reddit.com/r/Python/comments/1obpjnf/i_built_a_tool_that_runs_your_python_function_on/,i built a tool that runs your python function on 10k vms in parallel with one line of code.,Ok_Post_149,2025-10-21 02:25:33,8,7,"# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to ...","# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to hand it over to DevOps, the backlog would grow, and overall throughput would tank.

So I built **Burla**, the simplest cluster compute software that lets even Python beginners run code on massive clusters in the cloud. It‚Äôs one function with two parameters: the function and the inputs. You can bring your own Docker image, set hardware requirements, and run jobs as background tasks so you can fire and forget. Responses are fast, and you can call a million simple functions in just a few seconds.

Burla is built for embarrassingly parallel workloads like preprocessing data, hyperparameter tuning, and batch inference.

# Target Audience

Engineers, data scientists, and analysts who want to scale their code in production or research environments without dealing with infrastructure.

# Comparison

Unlike Ray or Dask, Burla doesn‚Äôt require cluster setup, orchestration, or YAML configs. It‚Äôs just:

    from burla import remote_parallel_map
    remote_parallel_map(func, inputs)
    

That‚Äôs it. It automatically handles distribution, retries, logging, and scaling across up to 10,000 VMs.

# Open Source & Free Credits

Burla is open source, and I‚Äôm improving the installation process. I also created managed versions for testing. If you want to try it, I‚Äôll cover 1,000 CPU hours and 100 GPU hours. Email me at [joe@burla.dev]() if interested.

Here‚Äôs a short intro video:  
[https://www.youtube.com/watch?v=9d22y\_kWjyE](https://www.youtube.com/watch?v=9d22y_kWjyE)

GitHub ‚Üí¬†[https://github.com/Burla-Cloud/burla](https://github.com/Burla-Cloud/burla)  
Docs ‚Üí¬†[https://docs.burla.dev](https://docs.burla.dev/)",2025-10-21T09:09:55.959902
1oborpj,https://www.reddit.com/r/Python/comments/1oborpj/i_made_a_python_bot_that_turns_your_text_images/,I made a Python bot that turns your text & images into diagrams right in Telegram.,No_Mongoose_8139,2025-10-21 01:51:22,0,5,"https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project ...","https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project structure, a mind map, or just explain a concept. Every time, I had to open heavy editors like Miro or Figma, which felt like overkill.

So, I decided to build a tool that lives right inside the app I use for communication all day: Telegram.

I'm excited to share my side project: **Diagrammer Bot**. It's a simple yet powerful bot in Python that lets you create diagrams on the fly.

**Here are the key features:**
*   **Text & Image Nodes:** You can create blocks not just from text, but from any image you send.
*   **Full Editing:** Create, connect, edit, and delete both nodes and edges.
*   **Project System:** Save your diagrams with custom names, load them later, or start new ones.
*   **Themes & Export:** Switch between a sleek dark mode and a clean light mode. Export your final diagram as a high-quality PNG.
*   **Open-Source:** The entire project is available on GitHub!

**Tech Stack:** Python, `python-telegram-bot`, `Graphviz` for rendering, and `Pillow` for watermarking.

I would be incredibly grateful for any feedback, feature ideas, or bug reports. And of course, a star ‚≠ê on GitHub would make my day!

*   **Try the bot here:** [https://t.me/diagrammer_robot](https://t.me/diagrammer_robot)
*   **Check out the code on GitHub:** [https://github.com/Lixher/Diagrammer-bot](https://github.com/Lixher/Diagrammer-Bot)",2025-10-21T09:09:55.960213
1oborib,https://www.reddit.com/r/Python/comments/1oborib/i_built_a_persistent_kv_store_in_pure_python/,I built a Persistent KV Store in Pure Python,vollhard-natta,2025-10-21 01:51:07,26,1,"Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been work...","Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been working on for the past few months. It is a lightweight, persistent key-value storage engine in Python, built from scratch to understand and implement the Log-Structured Merge-tree (LSM-tree) architecture. The project, which is fully open-source, is explicitly optimized for write-heavy workloads. 



# Core Architecture:

The engine implements the three fundamental LSM components: the **Write Ahead Log (WAL)** for durability, an in-memory **Memtable** (using `SortedDict` for sorted writes), and immutable persistent **SSTables (Sorted String Tables)**.

Some features that I'm proud of:

* **Async Compaction**: Merging and compaction are handled by a **separate background worker thread**. The process itself takes a hybrid approach.
* **Client/Server Model**: The entire storage engine runs behind a **FastAPI server**. This allows multiple clients to connect via REST APIs or the included CLI tool.
* **Efficient Range Queries**: Added full support for range queries from `start_key` to `end_key`. This is achieved via a memory-efficient **k-way merge iterator** that combines results from the Memtable and all SSTables. The FastAPI server delivers the results using a `StreamingResponse` to prevent memory exhaustion for large result sets.
* **Bloom Filter**: Implemented a **Bloom Filter** for each SSTable to drastically reduce disk I/O by confirming that a key definitely does not exist before attempting a disk seek.
* **Binary Storage**: SSTables now use **Msgpack binary format** instead of JSON for smaller file sizes and reduced CPU load during serialization/deserialization.

My favourite part of the project is that I actually got to see a practical implementation of [Merge Sorted Arrays - GeeksforGeeks](https://www.geeksforgeeks.org/dsa/merge-k-sorted-arrays/). This is a pretty popular interview question and to see DSA being actually implemented is a crazy moment.

# Get Started

    pip install lsm_storage_engine_key_value_store

**Usage via CLI/Server:**

1. **Terminal 1 (Server):** `lsm-server`
2. **Terminal 2 (Client):** `lsm-cli` (Follow the CLI help for commands).

# Looking for Feedback

I'd love to hear your thoughts about this implementation and how I can make it better and what features I can add in later versions. Ideas and constructive criticism are always welcome. I'm also looking for contributors, if anyone is interested, please feel free to PM and we can discuss.

Repo link: [Shashank1985/storage-engine](https://github.com/Shashank1985/storage-engine)  
Thanks!!",2025-10-21T09:09:55.960274
1obo3rg,https://www.reddit.com/r/Python/comments/1obo3rg/kryypto_an_open_source_python_text_editor/,Kryypto an open source python text editor.,SxxVe,2025-10-21 01:21:30,3,5,"Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
*...","Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
* Full Keyboard Support ‚Äì no need for the mouse, every feature is accessible via hotkeys
* Discord presence
* Live MarkDown Preview
* Session Restore
* Custom Styling
   * `config\configuration.cfg` for editor settings
   * CSS for theme and style customization
* Editing Tools
   * Find text in file
   * Jump to line
   * Adjustable cursor (color & width)
   * Configurable animations (types & duration)
* Git & GitHub Integration
   * View total commits
   * See last commit message & date
   * Track file changes directly inside the editor
* Productivity Features
   * Autocompleter
   * Builtin Terminal
   * Docstring panel (hover to see function/class docstring)
   * Tab-based file switching
   * Bookmarking lines
   * Custom title bar
* Syntax Highlighting for
   * Python
   * CSS
   * JSON
   * Config files
   * Markdown

Target Audience

* Developers who prefer keyboard-driven workflows (no mouse required)
* Users looking for a lightweight alternative to heavier IDEs
* People who want to customize their editor with CSS and configuration settings
* Anyone experimenting with Python-based editors or open-source text editing tools

# Comparison:

* Lightweight ‚Äì minimal overhead, focused on speed
* Highly customizable ‚Äì styling via CSS and config files
* Keyboard-centric ‚Äì designed to be fully usable without a mouse

  
github repo: [https://github.com/NaturalCapsule/Kryypto](https://github.com/NaturalCapsule/Kryypto)

  
website: [https://naturalcapsule.github.io/Kryypto/](https://naturalcapsule.github.io/Kryypto/)",2025-10-21T09:09:55.960348
1obo0ze,https://www.reddit.com/r/Python/comments/1obo0ze/forgetting_python/,Forgetting Python,Ashamed-Society-2875,2025-10-21 01:17:52,0,4,"I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping f...","I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping for college exams , now when i come back to python it feels i have lost my level and my touch i feel like fkn loser , all those hrs spent in 8th grade for nothing , i forgot a lot , is it common or just me???",2025-10-21T09:09:55.960406
1obmzbm,https://www.reddit.com/r/Python/comments/1obmzbm/functoweb_is_now_much_better_thanks_for_the/,func-to-web is now much better ‚Äì Thanks for the feedback!,drboom9,2025-10-21 00:27:41,6,0,"15 days ago I shared func-to-web here and got amazing feedback (150+ upvotes, thank you!). Since then, I've been working hard on the suggestions and a...","15 days ago I shared func-to-web here and got amazing feedback (150+ upvotes, thank you!). Since then, I've been working hard on the suggestions and added some major features.

**What it does (quick reminder):**
Turn any Python function into a web UI with zero boilerplate:

```python
from func_to_web import run

def divide(a: int, b: int):
    return a / b

run(divide)  # Web form at localhost:8000
```

**Major updates since v0.1:**

**Dynamic Lists** ‚Äì Add/remove items with advanced validation:
```python
def process_data(
    # Dynamic lists with add/remove buttons
    images: list[ImageFile],                      # Multiple file uploads
    
    # Dual validation: list size AND individual items
    scores: Annotated[
        list[Annotated[int, Field(ge=0, le=100)]], 
        Field(min_length=3, max_length=10)
    ],  # 3-10 items required, each 0-100
    
    # Optional fields with toggle switches
    notes: str | None = None,                     # Optional text
    tags: list[str] | None = None                 # Optional list
):
    return FileResponse(generate_pdf(), ""report.pdf"")  # Auto-download
```

**High-Performance File Handling** ‚Äì Optimized streaming for large files:
- **Upload**: Real-time progress bars, 8MB chunks, handles GB+ files
- **Download**: Return `FileResponse(data, filename)` for auto-downloads
- **Performance**: ~237 MB/s localhost, ~115 MB/s over Gigabit Ethernet
- **Memory efficient**: Constant usage regardless of file size
- **Any format**: PDF, Excel, ZIP, images, binary data

**Optional Fields** ‚Äì `Type | None` creates toggle switches:
- Fields with defaults start enabled, without defaults start disabled
- Explicit control: `Type | OptionalEnabled/OptionalDisabled`
- Works with all types, constraints, and lists

**Dynamic Dropdowns** ‚Äì Runtime-generated options:
```python
def get_themes(): return fetch_from_database()

def configure(theme: Literal[get_themes]): pass  # Fresh options each request
```

**Rich Output Support**:
- **PIL Images**: Auto-displayed in browser
- **Matplotlib plots**: Rendered as PNG
- **File downloads**: Single or multiple files with streaming
- **JSON/text**: Formatted with copy-to-clipboard

**UX Improvements**:
- Dark mode with theme persistence
- Keyboard shortcuts (Ctrl+Enter to submit)
- Auto-focus first field
- Toast notifications
- Upload progress with speed indicators

**Current stats:**
- 180+ GitHub stars (The chinese community is sharing it too!)
- 454 unit tests
- Published on PyPI: `pip install func-to-web`
- 20+ runnable examples
- Used daily for internal tools at multiple companies

**Other improvements:**
- **Modular architecture**: Code separated by responsibilities (analysis, validation, form building...)
- **Comprehensive documentation**: Every function and class documented
- **Detailed changelog**: Track all improvements and breaking changes

I've tried to make this as professional and production-ready as possible while keeping the simple API.

Still focused on internal tools and rapid prototyping, not replacing proper web frameworks.

GitHub: https://github.com/offerrall/FuncToWeb

The community feedback really shaped these improvements. Thank you again! Keep the suggestions coming.",2025-10-21T09:09:55.960428
1obxzya,https://www.reddit.com/r/Python/comments/1obxzya/tuesday_daily_thread_advanced_questions/,Tuesday Daily Thread: Advanced questions,AutoModerator,2025-10-21 08:00:30,1,0,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about ...","# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",2025-10-21T09:11:26.070703
1obrz11,https://www.reddit.com/r/Python/comments/1obrz11/assemblytominecraftcommandblockcompiler_python/,Assembly-to-Minecraft-Command-Block-Compiler (Python) ‚Äî updated ‚Äî testers & contributors wanted,bowser04410,2025-10-21 03:57:47,3,0,"¬†I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedba...","I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedback, and contributors. Repo:¬†[https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler](https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler)

What My Project Does:

* Parses a tiny assembly-style language (labels, arithmetic, branches, simple I/O) and emits Minecraft command sequences tailored for command blocks.
* Produces low-level, inspectable output so you can see how program logic maps to in-game command-block logic.
* Implemented in Python for readability and easy contribution.

Target Audience:

* Minecraft command-block creators who want to run low-level programs without mods.
* Hobbyist compiler writers and learners looking for a compact Python codegen example.
* Contributors interested in parsing, code generation, testing strategies, or command optimization.
* This is an educational/hobby tool for small demos and experiments ‚Äî not a production compiler for large-scale programs.

Comparison (how it differs from alternatives):

* Assembly-focused: unlike high-level language‚ÜíMinecraft tools, it targets an assembly-like input so outputs are low-level and easy to debug in command blocks.
* Python-first and lightweight: prioritizes clarity and contributor-friendliness over performance.
* Command-block oriented: designed to work with vanilla in-game command blocks (does not target datapacks or mods).

How to help:

* Test: run examples, try outputs in a world, and note Minecraft version and exact steps when something fails.
* Report: open issues with minimal reproduction files and steps.
* Contribute: PRs welcome for bug fixes, examples, optimizations, docs, or tests ‚Äî look for good-first-issue.",2025-10-21T09:11:26.070848
1obqtmz,https://www.reddit.com/r/Python/comments/1obqtmz/has_any_library_emerged_as_the_replacement_for/,Has any library emerged as the replacement for Poliastro?,KerPop42,2025-10-21 03:15:23,2,1,"I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-...","I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-go. Even if you restrict yourself to 3.11 you *also* have to go back to pip <24.1 because of how some package requirements are written. I've looked around and can't find any other orbital dynamics libraries that are more than personal projects. Is the field just dead in python?",2025-10-21T09:11:26.070951
1obprx2,https://www.reddit.com/r/Python/comments/1obprx2/building_an_opensource_observability_tool_for/,Building an open-source observability tool for multi-agent systems - looking for feedback,Standard_Career_8603,2025-10-21 02:35:45,5,4,"I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-sour...","I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-source observability tool.   
  
**What it does**:  
\- Tracks information flow between agents   
\- Shows which tools are being called with what parameters   
\- Monitors how prompt changes affect agent behavior   
\- Works in both development and production   
  
**The gap I'm trying to fill**: Existing tools (LangSmith, LangFuse, AgentOps) are great at LLM observability (tokens, costs, latency), but I feel like they don't help much with multi-agent coordination. They show you **what** happened but not **why** agents failed to coordinate.   
  
  
**Looking for feedback**:  
1. Have you built multi-agent systems? What do you use for debugging?   
2. Does this solve a real problem or am I overengineering?   
3. What features would actually make this useful for you? Still early days, but happy to share the repo if folks are interested.",2025-10-21T09:11:26.070991
1obpjnf,https://www.reddit.com/r/Python/comments/1obpjnf/i_built_a_tool_that_runs_your_python_function_on/,i built a tool that runs your python function on 10k vms in parallel with one line of code.,Ok_Post_149,2025-10-21 02:25:33,6,7,"# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to ...","# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to hand it over to DevOps, the backlog would grow, and overall throughput would tank.

So I built **Burla**, the simplest cluster compute software that lets even Python beginners run code on massive clusters in the cloud. It‚Äôs one function with two parameters: the function and the inputs. You can bring your own Docker image, set hardware requirements, and run jobs as background tasks so you can fire and forget. Responses are fast, and you can call a million simple functions in just a few seconds.

Burla is built for embarrassingly parallel workloads like preprocessing data, hyperparameter tuning, and batch inference.

# Target Audience

Engineers, data scientists, and analysts who want to scale their code in production or research environments without dealing with infrastructure.

# Comparison

Unlike Ray or Dask, Burla doesn‚Äôt require cluster setup, orchestration, or YAML configs. It‚Äôs just:

    from burla import remote_parallel_map
    remote_parallel_map(func, inputs)
    

That‚Äôs it. It automatically handles distribution, retries, logging, and scaling across up to 10,000 VMs.

# Open Source & Free Credits

Burla is open source, and I‚Äôm improving the installation process. I also created managed versions for testing. If you want to try it, I‚Äôll cover 1,000 CPU hours and 100 GPU hours. Email me at [joe@burla.dev]() if interested.

Here‚Äôs a short intro video:  
[https://www.youtube.com/watch?v=9d22y\_kWjyE](https://www.youtube.com/watch?v=9d22y_kWjyE)

GitHub ‚Üí¬†[https://github.com/Burla-Cloud/burla](https://github.com/Burla-Cloud/burla)  
Docs ‚Üí¬†[https://docs.burla.dev](https://docs.burla.dev/)",2025-10-21T09:11:26.071049
1oborpj,https://www.reddit.com/r/Python/comments/1oborpj/i_made_a_python_bot_that_turns_your_text_images/,I made a Python bot that turns your text & images into diagrams right in Telegram.,No_Mongoose_8139,2025-10-21 01:51:22,0,5,"https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project ...","https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project structure, a mind map, or just explain a concept. Every time, I had to open heavy editors like Miro or Figma, which felt like overkill.

So, I decided to build a tool that lives right inside the app I use for communication all day: Telegram.

I'm excited to share my side project: **Diagrammer Bot**. It's a simple yet powerful bot in Python that lets you create diagrams on the fly.

**Here are the key features:**
*   **Text & Image Nodes:** You can create blocks not just from text, but from any image you send.
*   **Full Editing:** Create, connect, edit, and delete both nodes and edges.
*   **Project System:** Save your diagrams with custom names, load them later, or start new ones.
*   **Themes & Export:** Switch between a sleek dark mode and a clean light mode. Export your final diagram as a high-quality PNG.
*   **Open-Source:** The entire project is available on GitHub!

**Tech Stack:** Python, `python-telegram-bot`, `Graphviz` for rendering, and `Pillow` for watermarking.

I would be incredibly grateful for any feedback, feature ideas, or bug reports. And of course, a star ‚≠ê on GitHub would make my day!

*   **Try the bot here:** [https://t.me/diagrammer_robot](https://t.me/diagrammer_robot)
*   **Check out the code on GitHub:** [https://github.com/Lixher/Diagrammer-bot](https://github.com/Lixher/Diagrammer-Bot)",2025-10-21T09:11:26.071510
1oborib,https://www.reddit.com/r/Python/comments/1oborib/i_built_a_persistent_kv_store_in_pure_python/,I built a Persistent KV Store in Pure Python,vollhard-natta,2025-10-21 01:51:07,27,1,"Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been work...","Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been working on for the past few months. It is a lightweight, persistent key-value storage engine in Python, built from scratch to understand and implement the Log-Structured Merge-tree (LSM-tree) architecture. The project, which is fully open-source, is explicitly optimized for write-heavy workloads. 



# Core Architecture:

The engine implements the three fundamental LSM components: the **Write Ahead Log (WAL)** for durability, an in-memory **Memtable** (using `SortedDict` for sorted writes), and immutable persistent **SSTables (Sorted String Tables)**.

Some features that I'm proud of:

* **Async Compaction**: Merging and compaction are handled by a **separate background worker thread**. The process itself takes a hybrid approach.
* **Client/Server Model**: The entire storage engine runs behind a **FastAPI server**. This allows multiple clients to connect via REST APIs or the included CLI tool.
* **Efficient Range Queries**: Added full support for range queries from `start_key` to `end_key`. This is achieved via a memory-efficient **k-way merge iterator** that combines results from the Memtable and all SSTables. The FastAPI server delivers the results using a `StreamingResponse` to prevent memory exhaustion for large result sets.
* **Bloom Filter**: Implemented a **Bloom Filter** for each SSTable to drastically reduce disk I/O by confirming that a key definitely does not exist before attempting a disk seek.
* **Binary Storage**: SSTables now use **Msgpack binary format** instead of JSON for smaller file sizes and reduced CPU load during serialization/deserialization.

My favourite part of the project is that I actually got to see a practical implementation of [Merge Sorted Arrays - GeeksforGeeks](https://www.geeksforgeeks.org/dsa/merge-k-sorted-arrays/). This is a pretty popular interview question and to see DSA being actually implemented is a crazy moment.

# Get Started

    pip install lsm_storage_engine_key_value_store

**Usage via CLI/Server:**

1. **Terminal 1 (Server):** `lsm-server`
2. **Terminal 2 (Client):** `lsm-cli` (Follow the CLI help for commands).

# Looking for Feedback

I'd love to hear your thoughts about this implementation and how I can make it better and what features I can add in later versions. Ideas and constructive criticism are always welcome. I'm also looking for contributors, if anyone is interested, please feel free to PM and we can discuss.

Repo link: [Shashank1985/storage-engine](https://github.com/Shashank1985/storage-engine)  
Thanks!!",2025-10-21T09:11:26.071606
1obo3rg,https://www.reddit.com/r/Python/comments/1obo3rg/kryypto_an_open_source_python_text_editor/,Kryypto an open source python text editor.,SxxVe,2025-10-21 01:21:30,3,5,"Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
*...","Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
* Full Keyboard Support ‚Äì no need for the mouse, every feature is accessible via hotkeys
* Discord presence
* Live MarkDown Preview
* Session Restore
* Custom Styling
   * `config\configuration.cfg` for editor settings
   * CSS for theme and style customization
* Editing Tools
   * Find text in file
   * Jump to line
   * Adjustable cursor (color & width)
   * Configurable animations (types & duration)
* Git & GitHub Integration
   * View total commits
   * See last commit message & date
   * Track file changes directly inside the editor
* Productivity Features
   * Autocompleter
   * Builtin Terminal
   * Docstring panel (hover to see function/class docstring)
   * Tab-based file switching
   * Bookmarking lines
   * Custom title bar
* Syntax Highlighting for
   * Python
   * CSS
   * JSON
   * Config files
   * Markdown

Target Audience

* Developers who prefer keyboard-driven workflows (no mouse required)
* Users looking for a lightweight alternative to heavier IDEs
* People who want to customize their editor with CSS and configuration settings
* Anyone experimenting with Python-based editors or open-source text editing tools

# Comparison:

* Lightweight ‚Äì minimal overhead, focused on speed
* Highly customizable ‚Äì styling via CSS and config files
* Keyboard-centric ‚Äì designed to be fully usable without a mouse

  
github repo: [https://github.com/NaturalCapsule/Kryypto](https://github.com/NaturalCapsule/Kryypto)

  
website: [https://naturalcapsule.github.io/Kryypto/](https://naturalcapsule.github.io/Kryypto/)",2025-10-21T09:11:26.071716
1obo0ze,https://www.reddit.com/r/Python/comments/1obo0ze/forgetting_python/,Forgetting Python,Ashamed-Society-2875,2025-10-21 01:17:52,0,4,"I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping f...","I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping for college exams , now when i come back to python it feels i have lost my level and my touch i feel like fkn loser , all those hrs spent in 8th grade for nothing , i forgot a lot , is it common or just me???",2025-10-21T09:11:26.071804
1obmzbm,https://www.reddit.com/r/Python/comments/1obmzbm/functoweb_is_now_much_better_thanks_for_the/,func-to-web is now much better ‚Äì Thanks for the feedback!,drboom9,2025-10-21 00:27:41,7,0,"15 days ago I shared func-to-web here and got amazing feedback (150+ upvotes, thank you!). Since then, I've been working hard on the suggestions and a...","15 days ago I shared func-to-web here and got amazing feedback (150+ upvotes, thank you!). Since then, I've been working hard on the suggestions and added some major features.

**What it does (quick reminder):**
Turn any Python function into a web UI with zero boilerplate:

```python
from func_to_web import run

def divide(a: int, b: int):
    return a / b

run(divide)  # Web form at localhost:8000
```

**Major updates since v0.1:**

**Dynamic Lists** ‚Äì Add/remove items with advanced validation:
```python
def process_data(
    # Dynamic lists with add/remove buttons
    images: list[ImageFile],                      # Multiple file uploads
    
    # Dual validation: list size AND individual items
    scores: Annotated[
        list[Annotated[int, Field(ge=0, le=100)]], 
        Field(min_length=3, max_length=10)
    ],  # 3-10 items required, each 0-100
    
    # Optional fields with toggle switches
    notes: str | None = None,                     # Optional text
    tags: list[str] | None = None                 # Optional list
):
    return FileResponse(generate_pdf(), ""report.pdf"")  # Auto-download
```

**High-Performance File Handling** ‚Äì Optimized streaming for large files:
- **Upload**: Real-time progress bars, 8MB chunks, handles GB+ files
- **Download**: Return `FileResponse(data, filename)` for auto-downloads
- **Performance**: ~237 MB/s localhost, ~115 MB/s over Gigabit Ethernet
- **Memory efficient**: Constant usage regardless of file size
- **Any format**: PDF, Excel, ZIP, images, binary data

**Optional Fields** ‚Äì `Type | None` creates toggle switches:
- Fields with defaults start enabled, without defaults start disabled
- Explicit control: `Type | OptionalEnabled/OptionalDisabled`
- Works with all types, constraints, and lists

**Dynamic Dropdowns** ‚Äì Runtime-generated options:
```python
def get_themes(): return fetch_from_database()

def configure(theme: Literal[get_themes]): pass  # Fresh options each request
```

**Rich Output Support**:
- **PIL Images**: Auto-displayed in browser
- **Matplotlib plots**: Rendered as PNG
- **File downloads**: Single or multiple files with streaming
- **JSON/text**: Formatted with copy-to-clipboard

**UX Improvements**:
- Dark mode with theme persistence
- Keyboard shortcuts (Ctrl+Enter to submit)
- Auto-focus first field
- Toast notifications
- Upload progress with speed indicators

**Current stats:**
- 180+ GitHub stars (The chinese community is sharing it too!)
- 454 unit tests
- Published on PyPI: `pip install func-to-web`
- 20+ runnable examples
- Used daily for internal tools at multiple companies

**Other improvements:**
- **Modular architecture**: Code separated by responsibilities (analysis, validation, form building...)
- **Comprehensive documentation**: Every function and class documented
- **Detailed changelog**: Track all improvements and breaking changes

I've tried to make this as professional and production-ready as possible while keeping the simple API.

Still focused on internal tools and rapid prototyping, not replacing proper web frameworks.

GitHub: https://github.com/offerrall/FuncToWeb

The community feedback really shaped these improvements. Thank you again! Keep the suggestions coming.",2025-10-21T09:11:26.071838
1obzlam,https://www.reddit.com/r/Python/comments/1obzlam/about_me_and_the_order_i_code_in/,About Me (and the order i code in),Consistent_Hall631,2025-10-21 09:13:32,0,4,"hi, i recently started python, and i am really happy, i enjoy it very much and it has become a hobby,

the order i code in: 1: imports 2 variables: 3:...","hi, i recently started python, and i am really happy, i enjoy it very much and it has become a hobby,

the order i code in: 1: imports 2 variables: 3: normal code (print, lists etc) 4: if/else statements. (i put notes at the tops of each section.)",2025-10-21T10:06:17.036805
1obxzya,https://www.reddit.com/r/Python/comments/1obxzya/tuesday_daily_thread_advanced_questions/,Tuesday Daily Thread: Advanced questions,AutoModerator,2025-10-21 08:00:30,1,0,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about ...","# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",2025-10-21T10:06:17.036863
1obrz11,https://www.reddit.com/r/Python/comments/1obrz11/assemblytominecraftcommandblockcompiler_python/,Assembly-to-Minecraft-Command-Block-Compiler (Python) ‚Äî updated ‚Äî testers & contributors wanted,bowser04410,2025-10-21 03:57:47,4,0,"I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedbac...","I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedback, and contributors. Repo:¬†[https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler](https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler)

What My Project Does:

* Parses a tiny assembly-style language (labels, arithmetic, branches, simple I/O) and emits Minecraft command sequences tailored for command blocks.
* Produces low-level, inspectable output so you can see how program logic maps to in-game command-block logic.
* Implemented in Python for readability and easy contribution.

Target Audience:

* Minecraft command-block creators who want to run low-level programs without mods.
* Hobbyist compiler writers and learners looking for a compact Python codegen example.
* Contributors interested in parsing, code generation, testing strategies, or command optimization.
* This is an educational/hobby tool for small demos and experiments ‚Äî not a production compiler for large-scale programs.

Comparison (how it differs from alternatives):

* Assembly-focused: unlike high-level language‚ÜíMinecraft tools, it targets an assembly-like input so outputs are low-level and easy to debug in command blocks.
* Python-first and lightweight: prioritizes clarity and contributor-friendliness over performance.
* Command-block oriented: designed to work with vanilla in-game command blocks (does not target datapacks or mods).

How to help:

* Test: run examples, try outputs in a world, and note Minecraft version and exact steps when something fails.
* Report: open issues with minimal reproduction files and steps.
* Contribute: PRs welcome for bug fixes, examples, optimizations, docs, or tests ‚Äî look for good-first-issue.",2025-10-21T10:06:17.036942
1obqtmz,https://www.reddit.com/r/Python/comments/1obqtmz/has_any_library_emerged_as_the_replacement_for/,Has any library emerged as the replacement for Poliastro?,KerPop42,2025-10-21 03:15:23,2,2,"I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-...","I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-go. Even if you restrict yourself to 3.11 you *also* have to go back to pip <24.1 because of how some package requirements are written. I've looked around and can't find any other orbital dynamics libraries that are more than personal projects. Is the field just dead in python?",2025-10-21T10:06:17.037009
1obprx2,https://www.reddit.com/r/Python/comments/1obprx2/building_an_opensource_observability_tool_for/,Building an open-source observability tool for multi-agent systems - looking for feedback,Standard_Career_8603,2025-10-21 02:35:45,3,4,"I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-sour...","I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-source observability tool.   
  
**What it does**:  
\- Tracks information flow between agents   
\- Shows which tools are being called with what parameters   
\- Monitors how prompt changes affect agent behavior   
\- Works in both development and production   
  
**The gap I'm trying to fill**: Existing tools (LangSmith, LangFuse, AgentOps) are great at LLM observability (tokens, costs, latency), but I feel like they don't help much with multi-agent coordination. They show you **what** happened but not **why** agents failed to coordinate.   
  
  
**Looking for feedback**:  
1. Have you built multi-agent systems? What do you use for debugging?   
2. Does this solve a real problem or am I overengineering?   
3. What features would actually make this useful for you? Still early days, but happy to share the repo if folks are interested.",2025-10-21T10:06:17.037035
1obpjnf,https://www.reddit.com/r/Python/comments/1obpjnf/i_built_a_tool_that_runs_your_python_function_on/,i built a tool that runs your python function on 10k vms in parallel with one line of code.,Ok_Post_149,2025-10-21 02:25:33,14,8,"# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to ...","# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to hand it over to DevOps, the backlog would grow, and overall throughput would tank.

So I built **Burla**, the simplest cluster compute software that lets even Python beginners run code on massive clusters in the cloud. It‚Äôs one function with two parameters: the function and the inputs. You can bring your own Docker image, set hardware requirements, and run jobs as background tasks so you can fire and forget. Responses are fast, and you can call a million simple functions in just a few seconds.

Burla is built for embarrassingly parallel workloads like preprocessing data, hyperparameter tuning, and batch inference.

# Target Audience

Engineers, data scientists, and analysts who want to scale their code in production or research environments without dealing with infrastructure.

# Comparison

Unlike Ray or Dask, Burla doesn‚Äôt require cluster setup, orchestration, or YAML configs. It‚Äôs just:

    from burla import remote_parallel_map
    remote_parallel_map(func, inputs)
    

That‚Äôs it. It automatically handles distribution, retries, logging, and scaling across up to 10,000 VMs.

# Open Source & Free Credits

Burla is open source, and I‚Äôm improving the installation process. I also created managed versions for testing. If you want to try it, I‚Äôll cover 1,000 CPU hours and 100 GPU hours. Email me at [joe@burla.dev]() if interested.

Here‚Äôs a short intro video:  
[https://www.youtube.com/watch?v=9d22y\_kWjyE](https://www.youtube.com/watch?v=9d22y_kWjyE)

GitHub ‚Üí¬†[https://github.com/Burla-Cloud/burla](https://github.com/Burla-Cloud/burla)  
Docs ‚Üí¬†[https://docs.burla.dev](https://docs.burla.dev/)",2025-10-21T10:06:17.037073
1oborpj,https://www.reddit.com/r/Python/comments/1oborpj/i_made_a_python_bot_that_turns_your_text_images/,I made a Python bot that turns your text & images into diagrams right in Telegram.,No_Mongoose_8139,2025-10-21 01:51:22,0,5,"https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project ...","https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project structure, a mind map, or just explain a concept. Every time, I had to open heavy editors like Miro or Figma, which felt like overkill.

So, I decided to build a tool that lives right inside the app I use for communication all day: Telegram.

I'm excited to share my side project: **Diagrammer Bot**. It's a simple yet powerful bot in Python that lets you create diagrams on the fly.

**Here are the key features:**
*   **Text & Image Nodes:** You can create blocks not just from text, but from any image you send.
*   **Full Editing:** Create, connect, edit, and delete both nodes and edges.
*   **Project System:** Save your diagrams with custom names, load them later, or start new ones.
*   **Themes & Export:** Switch between a sleek dark mode and a clean light mode. Export your final diagram as a high-quality PNG.
*   **Open-Source:** The entire project is available on GitHub!

**Tech Stack:** Python, `python-telegram-bot`, `Graphviz` for rendering, and `Pillow` for watermarking.

I would be incredibly grateful for any feedback, feature ideas, or bug reports. And of course, a star ‚≠ê on GitHub would make my day!

*   **Try the bot here:** [https://t.me/diagrammer_robot](https://t.me/diagrammer_robot)
*   **Check out the code on GitHub:** [https://github.com/Lixher/Diagrammer-bot](https://github.com/Lixher/Diagrammer-Bot)",2025-10-21T10:06:17.037779
1oborib,https://www.reddit.com/r/Python/comments/1oborib/i_built_a_persistent_kv_store_in_pure_python/,I built a Persistent KV Store in Pure Python,vollhard-natta,2025-10-21 01:51:07,28,1,"Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been work...","Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been working on for the past few months. It is a lightweight, persistent key-value storage engine in Python, built from scratch to understand and implement the Log-Structured Merge-tree (LSM-tree) architecture. The project, which is fully open-source, is explicitly optimized for write-heavy workloads. 



# Core Architecture:

The engine implements the three fundamental LSM components: the **Write Ahead Log (WAL)** for durability, an in-memory **Memtable** (using `SortedDict` for sorted writes), and immutable persistent **SSTables (Sorted String Tables)**.

Some features that I'm proud of:

* **Async Compaction**: Merging and compaction are handled by a **separate background worker thread**. The process itself takes a hybrid approach.
* **Client/Server Model**: The entire storage engine runs behind a **FastAPI server**. This allows multiple clients to connect via REST APIs or the included CLI tool.
* **Efficient Range Queries**: Added full support for range queries from `start_key` to `end_key`. This is achieved via a memory-efficient **k-way merge iterator** that combines results from the Memtable and all SSTables. The FastAPI server delivers the results using a `StreamingResponse` to prevent memory exhaustion for large result sets.
* **Bloom Filter**: Implemented a **Bloom Filter** for each SSTable to drastically reduce disk I/O by confirming that a key definitely does not exist before attempting a disk seek.
* **Binary Storage**: SSTables now use **Msgpack binary format** instead of JSON for smaller file sizes and reduced CPU load during serialization/deserialization.

My favourite part of the project is that I actually got to see a practical implementation of [Merge Sorted Arrays - GeeksforGeeks](https://www.geeksforgeeks.org/dsa/merge-k-sorted-arrays/). This is a pretty popular interview question and to see DSA being actually implemented is a crazy moment.

# Get Started

    pip install lsm_storage_engine_key_value_store

**Usage via CLI/Server:**

1. **Terminal 1 (Server):** `lsm-server`
2. **Terminal 2 (Client):** `lsm-cli` (Follow the CLI help for commands).

# Looking for Feedback

I'd love to hear your thoughts about this implementation and how I can make it better and what features I can add in later versions. Ideas and constructive criticism are always welcome. I'm also looking for contributors, if anyone is interested, please feel free to PM and we can discuss.

Repo link: [Shashank1985/storage-engine](https://github.com/Shashank1985/storage-engine)  
Thanks!!",2025-10-21T10:06:17.037908
1obo3rg,https://www.reddit.com/r/Python/comments/1obo3rg/kryypto_an_open_source_python_text_editor/,Kryypto an open source python text editor.,SxxVe,2025-10-21 01:21:30,3,5,"Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
*...","Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
* Full Keyboard Support ‚Äì no need for the mouse, every feature is accessible via hotkeys
* Discord presence
* Live MarkDown Preview
* Session Restore
* Custom Styling
   * `config\configuration.cfg` for editor settings
   * CSS for theme and style customization
* Editing Tools
   * Find text in file
   * Jump to line
   * Adjustable cursor (color & width)
   * Configurable animations (types & duration)
* Git & GitHub Integration
   * View total commits
   * See last commit message & date
   * Track file changes directly inside the editor
* Productivity Features
   * Autocompleter
   * Builtin Terminal
   * Docstring panel (hover to see function/class docstring)
   * Tab-based file switching
   * Bookmarking lines
   * Custom title bar
* Syntax Highlighting for
   * Python
   * CSS
   * JSON
   * Config files
   * Markdown

Target Audience

* Developers who prefer keyboard-driven workflows (no mouse required)
* Users looking for a lightweight alternative to heavier IDEs
* People who want to customize their editor with CSS and configuration settings
* Anyone experimenting with Python-based editors or open-source text editing tools

# Comparison:

* Lightweight ‚Äì minimal overhead, focused on speed
* Highly customizable ‚Äì styling via CSS and config files
* Keyboard-centric ‚Äì designed to be fully usable without a mouse

  
github repo: [https://github.com/NaturalCapsule/Kryypto](https://github.com/NaturalCapsule/Kryypto)

  
website: [https://naturalcapsule.github.io/Kryypto/](https://naturalcapsule.github.io/Kryypto/)",2025-10-21T10:06:17.038040
1obo0ze,https://www.reddit.com/r/Python/comments/1obo0ze/forgetting_python/,Forgetting Python,Ashamed-Society-2875,2025-10-21 01:17:52,0,4,"I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping f...","I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping for college exams , now when i come back to python it feels i have lost my level and my touch i feel like fkn loser , all those hrs spent in 8th grade for nothing , i forgot a lot , is it common or just me???",2025-10-21T10:06:17.038140
1obzlam,https://www.reddit.com/r/Python/comments/1obzlam/about_me_and_the_order_i_code_in/,About Me (and the order i code in),Consistent_Hall631,2025-10-21 09:13:32,0,4,"hi, i recently started python, and i am really happy, i enjoy it very much and it has become a hobby,

the order i code in: 1: imports 2 variables: 3:...","hi, i recently started python, and i am really happy, i enjoy it very much and it has become a hobby,

the order i code in: 1: imports 2 variables: 3: normal code (print, lists etc) 4: if/else statements. (i put notes at the tops of each section.)",2025-10-21T10:06:17.310508
1obxzya,https://www.reddit.com/r/Python/comments/1obxzya/tuesday_daily_thread_advanced_questions/,Tuesday Daily Thread: Advanced questions,AutoModerator,2025-10-21 08:00:30,1,0,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about ...","# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",2025-10-21T10:06:17.310610
1obrz11,https://www.reddit.com/r/Python/comments/1obrz11/assemblytominecraftcommandblockcompiler_python/,Assembly-to-Minecraft-Command-Block-Compiler (Python) ‚Äî updated ‚Äî testers & contributors wanted,bowser04410,2025-10-21 03:57:47,2,0,"¬†I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedba...","I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedback, and contributors. Repo:¬†[https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler](https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler)

What My Project Does:

* Parses a tiny assembly-style language (labels, arithmetic, branches, simple I/O) and emits Minecraft command sequences tailored for command blocks.
* Produces low-level, inspectable output so you can see how program logic maps to in-game command-block logic.
* Implemented in Python for readability and easy contribution.

Target Audience:

* Minecraft command-block creators who want to run low-level programs without mods.
* Hobbyist compiler writers and learners looking for a compact Python codegen example.
* Contributors interested in parsing, code generation, testing strategies, or command optimization.
* This is an educational/hobby tool for small demos and experiments ‚Äî not a production compiler for large-scale programs.

Comparison (how it differs from alternatives):

* Assembly-focused: unlike high-level language‚ÜíMinecraft tools, it targets an assembly-like input so outputs are low-level and easy to debug in command blocks.
* Python-first and lightweight: prioritizes clarity and contributor-friendliness over performance.
* Command-block oriented: designed to work with vanilla in-game command blocks (does not target datapacks or mods).

How to help:

* Test: run examples, try outputs in a world, and note Minecraft version and exact steps when something fails.
* Report: open issues with minimal reproduction files and steps.
* Contribute: PRs welcome for bug fixes, examples, optimizations, docs, or tests ‚Äî look for good-first-issue.",2025-10-21T10:06:17.310768
1obqtmz,https://www.reddit.com/r/Python/comments/1obqtmz/has_any_library_emerged_as_the_replacement_for/,Has any library emerged as the replacement for Poliastro?,KerPop42,2025-10-21 03:15:23,2,2,"I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-...","I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-go. Even if you restrict yourself to 3.11 you *also* have to go back to pip <24.1 because of how some package requirements are written. I've looked around and can't find any other orbital dynamics libraries that are more than personal projects. Is the field just dead in python?",2025-10-21T10:06:17.310874
1obprx2,https://www.reddit.com/r/Python/comments/1obprx2/building_an_opensource_observability_tool_for/,Building an open-source observability tool for multi-agent systems - looking for feedback,Standard_Career_8603,2025-10-21 02:35:45,5,4,"I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-sour...","I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-source observability tool.   
  
**What it does**:  
\- Tracks information flow between agents   
\- Shows which tools are being called with what parameters   
\- Monitors how prompt changes affect agent behavior   
\- Works in both development and production   
  
**The gap I'm trying to fill**: Existing tools (LangSmith, LangFuse, AgentOps) are great at LLM observability (tokens, costs, latency), but I feel like they don't help much with multi-agent coordination. They show you **what** happened but not **why** agents failed to coordinate.   
  
  
**Looking for feedback**:  
1. Have you built multi-agent systems? What do you use for debugging?   
2. Does this solve a real problem or am I overengineering?   
3. What features would actually make this useful for you? Still early days, but happy to share the repo if folks are interested.",2025-10-21T10:06:17.310912
1obpjnf,https://www.reddit.com/r/Python/comments/1obpjnf/i_built_a_tool_that_runs_your_python_function_on/,i built a tool that runs your python function on 10k vms in parallel with one line of code.,Ok_Post_149,2025-10-21 02:25:33,10,8,"# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to ...","# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to hand it over to DevOps, the backlog would grow, and overall throughput would tank.

So I built **Burla**, the simplest cluster compute software that lets even Python beginners run code on massive clusters in the cloud. It‚Äôs one function with two parameters: the function and the inputs. You can bring your own Docker image, set hardware requirements, and run jobs as background tasks so you can fire and forget. Responses are fast, and you can call a million simple functions in just a few seconds.

Burla is built for embarrassingly parallel workloads like preprocessing data, hyperparameter tuning, and batch inference.

# Target Audience

Engineers, data scientists, and analysts who want to scale their code in production or research environments without dealing with infrastructure.

# Comparison

Unlike Ray or Dask, Burla doesn‚Äôt require cluster setup, orchestration, or YAML configs. It‚Äôs just:

    from burla import remote_parallel_map
    remote_parallel_map(func, inputs)
    

That‚Äôs it. It automatically handles distribution, retries, logging, and scaling across up to 10,000 VMs.

# Open Source & Free Credits

Burla is open source, and I‚Äôm improving the installation process. I also created managed versions for testing. If you want to try it, I‚Äôll cover 1,000 CPU hours and 100 GPU hours. Email me at [joe@burla.dev]() if interested.

Here‚Äôs a short intro video:  
[https://www.youtube.com/watch?v=9d22y\_kWjyE](https://www.youtube.com/watch?v=9d22y_kWjyE)

GitHub ‚Üí¬†[https://github.com/Burla-Cloud/burla](https://github.com/Burla-Cloud/burla)  
Docs ‚Üí¬†[https://docs.burla.dev](https://docs.burla.dev/)",2025-10-21T10:06:17.310951
1oborpj,https://www.reddit.com/r/Python/comments/1oborpj/i_made_a_python_bot_that_turns_your_text_images/,I made a Python bot that turns your text & images into diagrams right in Telegram.,No_Mongoose_8139,2025-10-21 01:51:22,0,5,"https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project ...","https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project structure, a mind map, or just explain a concept. Every time, I had to open heavy editors like Miro or Figma, which felt like overkill.

So, I decided to build a tool that lives right inside the app I use for communication all day: Telegram.

I'm excited to share my side project: **Diagrammer Bot**. It's a simple yet powerful bot in Python that lets you create diagrams on the fly.

**Here are the key features:**
*   **Text & Image Nodes:** You can create blocks not just from text, but from any image you send.
*   **Full Editing:** Create, connect, edit, and delete both nodes and edges.
*   **Project System:** Save your diagrams with custom names, load them later, or start new ones.
*   **Themes & Export:** Switch between a sleek dark mode and a clean light mode. Export your final diagram as a high-quality PNG.
*   **Open-Source:** The entire project is available on GitHub!

**Tech Stack:** Python, `python-telegram-bot`, `Graphviz` for rendering, and `Pillow` for watermarking.

I would be incredibly grateful for any feedback, feature ideas, or bug reports. And of course, a star ‚≠ê on GitHub would make my day!

*   **Try the bot here:** [https://t.me/diagrammer_robot](https://t.me/diagrammer_robot)
*   **Check out the code on GitHub:** [https://github.com/Lixher/Diagrammer-bot](https://github.com/Lixher/Diagrammer-Bot)",2025-10-21T10:06:17.311305
1oborib,https://www.reddit.com/r/Python/comments/1oborib/i_built_a_persistent_kv_store_in_pure_python/,I built a Persistent KV Store in Pure Python,vollhard-natta,2025-10-21 01:51:07,34,1,"Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been work...","Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been working on for the past few months. It is a lightweight, persistent key-value storage engine in Python, built from scratch to understand and implement the Log-Structured Merge-tree (LSM-tree) architecture. The project, which is fully open-source, is explicitly optimized for write-heavy workloads. 



# Core Architecture:

The engine implements the three fundamental LSM components: the **Write Ahead Log (WAL)** for durability, an in-memory **Memtable** (using `SortedDict` for sorted writes), and immutable persistent **SSTables (Sorted String Tables)**.

Some features that I'm proud of:

* **Async Compaction**: Merging and compaction are handled by a **separate background worker thread**. The process itself takes a hybrid approach.
* **Client/Server Model**: The entire storage engine runs behind a **FastAPI server**. This allows multiple clients to connect via REST APIs or the included CLI tool.
* **Efficient Range Queries**: Added full support for range queries from `start_key` to `end_key`. This is achieved via a memory-efficient **k-way merge iterator** that combines results from the Memtable and all SSTables. The FastAPI server delivers the results using a `StreamingResponse` to prevent memory exhaustion for large result sets.
* **Bloom Filter**: Implemented a **Bloom Filter** for each SSTable to drastically reduce disk I/O by confirming that a key definitely does not exist before attempting a disk seek.
* **Binary Storage**: SSTables now use **Msgpack binary format** instead of JSON for smaller file sizes and reduced CPU load during serialization/deserialization.

My favourite part of the project is that I actually got to see a practical implementation of [Merge Sorted Arrays - GeeksforGeeks](https://www.geeksforgeeks.org/dsa/merge-k-sorted-arrays/). This is a pretty popular interview question and to see DSA being actually implemented is a crazy moment.

# Get Started

    pip install lsm_storage_engine_key_value_store

**Usage via CLI/Server:**

1. **Terminal 1 (Server):** `lsm-server`
2. **Terminal 2 (Client):** `lsm-cli` (Follow the CLI help for commands).

# Looking for Feedback

I'd love to hear your thoughts about this implementation and how I can make it better and what features I can add in later versions. Ideas and constructive criticism are always welcome. I'm also looking for contributors, if anyone is interested, please feel free to PM and we can discuss.

Repo link: [Shashank1985/storage-engine](https://github.com/Shashank1985/storage-engine)  
Thanks!!",2025-10-21T10:06:17.311380
1obo3rg,https://www.reddit.com/r/Python/comments/1obo3rg/kryypto_an_open_source_python_text_editor/,Kryypto an open source python text editor.,SxxVe,2025-10-21 01:21:30,3,5,"Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
*...","Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
* Full Keyboard Support ‚Äì no need for the mouse, every feature is accessible via hotkeys
* Discord presence
* Live MarkDown Preview
* Session Restore
* Custom Styling
   * `config\configuration.cfg` for editor settings
   * CSS for theme and style customization
* Editing Tools
   * Find text in file
   * Jump to line
   * Adjustable cursor (color & width)
   * Configurable animations (types & duration)
* Git & GitHub Integration
   * View total commits
   * See last commit message & date
   * Track file changes directly inside the editor
* Productivity Features
   * Autocompleter
   * Builtin Terminal
   * Docstring panel (hover to see function/class docstring)
   * Tab-based file switching
   * Bookmarking lines
   * Custom title bar
* Syntax Highlighting for
   * Python
   * CSS
   * JSON
   * Config files
   * Markdown

Target Audience

* Developers who prefer keyboard-driven workflows (no mouse required)
* Users looking for a lightweight alternative to heavier IDEs
* People who want to customize their editor with CSS and configuration settings
* Anyone experimenting with Python-based editors or open-source text editing tools

# Comparison:

* Lightweight ‚Äì minimal overhead, focused on speed
* Highly customizable ‚Äì styling via CSS and config files
* Keyboard-centric ‚Äì designed to be fully usable without a mouse

  
github repo: [https://github.com/NaturalCapsule/Kryypto](https://github.com/NaturalCapsule/Kryypto)

  
website: [https://naturalcapsule.github.io/Kryypto/](https://naturalcapsule.github.io/Kryypto/)",2025-10-21T10:06:17.311503
1obo0ze,https://www.reddit.com/r/Python/comments/1obo0ze/forgetting_python/,Forgetting Python,Ashamed-Society-2875,2025-10-21 01:17:52,0,4,"I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping f...","I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping for college exams , now when i come back to python it feels i have lost my level and my touch i feel like fkn loser , all those hrs spent in 8th grade for nothing , i forgot a lot , is it common or just me???",2025-10-21T10:06:17.311607
1obzlam,https://www.reddit.com/r/Python/comments/1obzlam/about_me_and_the_order_i_code_in/,About Me (and the order i code in),Consistent_Hall631,2025-10-21 09:13:32,0,4,"hi, i recently started python, and i am really happy, i enjoy it very much and it has become a hobby,

the order i code in: 1: imports 2 variables: 3:...","hi, i recently started python, and i am really happy, i enjoy it very much and it has become a hobby,

the order i code in: 1: imports 2 variables: 3: normal code (print, lists etc) 4: if/else statements. (i put notes at the tops of each section.)",2025-10-21T10:07:45.187862
1obxzya,https://www.reddit.com/r/Python/comments/1obxzya/tuesday_daily_thread_advanced_questions/,Tuesday Daily Thread: Advanced questions,AutoModerator,2025-10-21 08:00:30,1,0,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about ...","# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",2025-10-21T10:07:45.187946
1obrz11,https://www.reddit.com/r/Python/comments/1obrz11/assemblytominecraftcommandblockcompiler_python/,Assembly-to-Minecraft-Command-Block-Compiler (Python) ‚Äî updated ‚Äî testers & contributors wanted,bowser04410,2025-10-21 03:57:47,3,0,"¬†I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedba...","I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedback, and contributors. Repo:¬†[https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler](https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler)

What My Project Does:

* Parses a tiny assembly-style language (labels, arithmetic, branches, simple I/O) and emits Minecraft command sequences tailored for command blocks.
* Produces low-level, inspectable output so you can see how program logic maps to in-game command-block logic.
* Implemented in Python for readability and easy contribution.

Target Audience:

* Minecraft command-block creators who want to run low-level programs without mods.
* Hobbyist compiler writers and learners looking for a compact Python codegen example.
* Contributors interested in parsing, code generation, testing strategies, or command optimization.
* This is an educational/hobby tool for small demos and experiments ‚Äî not a production compiler for large-scale programs.

Comparison (how it differs from alternatives):

* Assembly-focused: unlike high-level language‚ÜíMinecraft tools, it targets an assembly-like input so outputs are low-level and easy to debug in command blocks.
* Python-first and lightweight: prioritizes clarity and contributor-friendliness over performance.
* Command-block oriented: designed to work with vanilla in-game command blocks (does not target datapacks or mods).

How to help:

* Test: run examples, try outputs in a world, and note Minecraft version and exact steps when something fails.
* Report: open issues with minimal reproduction files and steps.
* Contribute: PRs welcome for bug fixes, examples, optimizations, docs, or tests ‚Äî look for good-first-issue.",2025-10-21T10:07:45.188026
1obqtmz,https://www.reddit.com/r/Python/comments/1obqtmz/has_any_library_emerged_as_the_replacement_for/,Has any library emerged as the replacement for Poliastro?,KerPop42,2025-10-21 03:15:23,2,2,"I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-...","I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-go. Even if you restrict yourself to 3.11 you *also* have to go back to pip <24.1 because of how some package requirements are written. I've looked around and can't find any other orbital dynamics libraries that are more than personal projects. Is the field just dead in python?",2025-10-21T10:07:45.188089
1obprx2,https://www.reddit.com/r/Python/comments/1obprx2/building_an_opensource_observability_tool_for/,Building an open-source observability tool for multi-agent systems - looking for feedback,Standard_Career_8603,2025-10-21 02:35:45,6,4,"I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-sour...","I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-source observability tool.   
  
**What it does**:  
\- Tracks information flow between agents   
\- Shows which tools are being called with what parameters   
\- Monitors how prompt changes affect agent behavior   
\- Works in both development and production   
  
**The gap I'm trying to fill**: Existing tools (LangSmith, LangFuse, AgentOps) are great at LLM observability (tokens, costs, latency), but I feel like they don't help much with multi-agent coordination. They show you **what** happened but not **why** agents failed to coordinate.   
  
  
**Looking for feedback**:  
1. Have you built multi-agent systems? What do you use for debugging?   
2. Does this solve a real problem or am I overengineering?   
3. What features would actually make this useful for you? Still early days, but happy to share the repo if folks are interested.",2025-10-21T10:07:45.188114
1obpjnf,https://www.reddit.com/r/Python/comments/1obpjnf/i_built_a_tool_that_runs_your_python_function_on/,i built a tool that runs your python function on 10k vms in parallel with one line of code.,Ok_Post_149,2025-10-21 02:25:33,10,8,"# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to ...","# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to hand it over to DevOps, the backlog would grow, and overall throughput would tank.

So I built **Burla**, the simplest cluster compute software that lets even Python beginners run code on massive clusters in the cloud. It‚Äôs one function with two parameters: the function and the inputs. You can bring your own Docker image, set hardware requirements, and run jobs as background tasks so you can fire and forget. Responses are fast, and you can call a million simple functions in just a few seconds.

Burla is built for embarrassingly parallel workloads like preprocessing data, hyperparameter tuning, and batch inference.

# Target Audience

Engineers, data scientists, and analysts who want to scale their code in production or research environments without dealing with infrastructure.

# Comparison

Unlike Ray or Dask, Burla doesn‚Äôt require cluster setup, orchestration, or YAML configs. It‚Äôs just:

    from burla import remote_parallel_map
    remote_parallel_map(func, inputs)
    

That‚Äôs it. It automatically handles distribution, retries, logging, and scaling across up to 10,000 VMs.

# Open Source & Free Credits

Burla is open source, and I‚Äôm improving the installation process. I also created managed versions for testing. If you want to try it, I‚Äôll cover 1,000 CPU hours and 100 GPU hours. Email me at [joe@burla.dev]() if interested.

Here‚Äôs a short intro video:  
[https://www.youtube.com/watch?v=9d22y\_kWjyE](https://www.youtube.com/watch?v=9d22y_kWjyE)

GitHub ‚Üí¬†[https://github.com/Burla-Cloud/burla](https://github.com/Burla-Cloud/burla)  
Docs ‚Üí¬†[https://docs.burla.dev](https://docs.burla.dev/)",2025-10-21T10:07:45.188151
1oborpj,https://www.reddit.com/r/Python/comments/1oborpj/i_made_a_python_bot_that_turns_your_text_images/,I made a Python bot that turns your text & images into diagrams right in Telegram.,No_Mongoose_8139,2025-10-21 01:51:22,0,5,"https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project ...","https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project structure, a mind map, or just explain a concept. Every time, I had to open heavy editors like Miro or Figma, which felt like overkill.

So, I decided to build a tool that lives right inside the app I use for communication all day: Telegram.

I'm excited to share my side project: **Diagrammer Bot**. It's a simple yet powerful bot in Python that lets you create diagrams on the fly.

**Here are the key features:**
*   **Text & Image Nodes:** You can create blocks not just from text, but from any image you send.
*   **Full Editing:** Create, connect, edit, and delete both nodes and edges.
*   **Project System:** Save your diagrams with custom names, load them later, or start new ones.
*   **Themes & Export:** Switch between a sleek dark mode and a clean light mode. Export your final diagram as a high-quality PNG.
*   **Open-Source:** The entire project is available on GitHub!

**Tech Stack:** Python, `python-telegram-bot`, `Graphviz` for rendering, and `Pillow` for watermarking.

I would be incredibly grateful for any feedback, feature ideas, or bug reports. And of course, a star ‚≠ê on GitHub would make my day!

*   **Try the bot here:** [https://t.me/diagrammer_robot](https://t.me/diagrammer_robot)
*   **Check out the code on GitHub:** [https://github.com/Lixher/Diagrammer-bot](https://github.com/Lixher/Diagrammer-Bot)",2025-10-21T10:07:45.188460
1oborib,https://www.reddit.com/r/Python/comments/1oborib/i_built_a_persistent_kv_store_in_pure_python/,I built a Persistent KV Store in Pure Python,vollhard-natta,2025-10-21 01:51:07,32,1,"Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been work...","Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been working on for the past few months. It is a lightweight, persistent key-value storage engine in Python, built from scratch to understand and implement the Log-Structured Merge-tree (LSM-tree) architecture. The project, which is fully open-source, is explicitly optimized for write-heavy workloads. 



# Core Architecture:

The engine implements the three fundamental LSM components: the **Write Ahead Log (WAL)** for durability, an in-memory **Memtable** (using `SortedDict` for sorted writes), and immutable persistent **SSTables (Sorted String Tables)**.

Some features that I'm proud of:

* **Async Compaction**: Merging and compaction are handled by a **separate background worker thread**. The process itself takes a hybrid approach.
* **Client/Server Model**: The entire storage engine runs behind a **FastAPI server**. This allows multiple clients to connect via REST APIs or the included CLI tool.
* **Efficient Range Queries**: Added full support for range queries from `start_key` to `end_key`. This is achieved via a memory-efficient **k-way merge iterator** that combines results from the Memtable and all SSTables. The FastAPI server delivers the results using a `StreamingResponse` to prevent memory exhaustion for large result sets.
* **Bloom Filter**: Implemented a **Bloom Filter** for each SSTable to drastically reduce disk I/O by confirming that a key definitely does not exist before attempting a disk seek.
* **Binary Storage**: SSTables now use **Msgpack binary format** instead of JSON for smaller file sizes and reduced CPU load during serialization/deserialization.

My favourite part of the project is that I actually got to see a practical implementation of [Merge Sorted Arrays - GeeksforGeeks](https://www.geeksforgeeks.org/dsa/merge-k-sorted-arrays/). This is a pretty popular interview question and to see DSA being actually implemented is a crazy moment.

# Get Started

    pip install lsm_storage_engine_key_value_store

**Usage via CLI/Server:**

1. **Terminal 1 (Server):** `lsm-server`
2. **Terminal 2 (Client):** `lsm-cli` (Follow the CLI help for commands).

# Looking for Feedback

I'd love to hear your thoughts about this implementation and how I can make it better and what features I can add in later versions. Ideas and constructive criticism are always welcome. I'm also looking for contributors, if anyone is interested, please feel free to PM and we can discuss.

Repo link: [Shashank1985/storage-engine](https://github.com/Shashank1985/storage-engine)  
Thanks!!",2025-10-21T10:07:45.188523
1obo3rg,https://www.reddit.com/r/Python/comments/1obo3rg/kryypto_an_open_source_python_text_editor/,Kryypto an open source python text editor.,SxxVe,2025-10-21 01:21:30,3,5,"Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
*...","Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
* Full Keyboard Support ‚Äì no need for the mouse, every feature is accessible via hotkeys
* Discord presence
* Live MarkDown Preview
* Session Restore
* Custom Styling
   * `config\configuration.cfg` for editor settings
   * CSS for theme and style customization
* Editing Tools
   * Find text in file
   * Jump to line
   * Adjustable cursor (color & width)
   * Configurable animations (types & duration)
* Git & GitHub Integration
   * View total commits
   * See last commit message & date
   * Track file changes directly inside the editor
* Productivity Features
   * Autocompleter
   * Builtin Terminal
   * Docstring panel (hover to see function/class docstring)
   * Tab-based file switching
   * Bookmarking lines
   * Custom title bar
* Syntax Highlighting for
   * Python
   * CSS
   * JSON
   * Config files
   * Markdown

Target Audience

* Developers who prefer keyboard-driven workflows (no mouse required)
* Users looking for a lightweight alternative to heavier IDEs
* People who want to customize their editor with CSS and configuration settings
* Anyone experimenting with Python-based editors or open-source text editing tools

# Comparison:

* Lightweight ‚Äì minimal overhead, focused on speed
* Highly customizable ‚Äì styling via CSS and config files
* Keyboard-centric ‚Äì designed to be fully usable without a mouse

  
github repo: [https://github.com/NaturalCapsule/Kryypto](https://github.com/NaturalCapsule/Kryypto)

  
website: [https://naturalcapsule.github.io/Kryypto/](https://naturalcapsule.github.io/Kryypto/)",2025-10-21T10:07:45.188601
1obo0ze,https://www.reddit.com/r/Python/comments/1obo0ze/forgetting_python/,Forgetting Python,Ashamed-Society-2875,2025-10-21 01:17:52,0,4,"I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping f...","I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping for college exams , now when i come back to python it feels i have lost my level and my touch i feel like fkn loser , all those hrs spent in 8th grade for nothing , i forgot a lot , is it common or just me???",2025-10-21T10:07:45.188658
1obzlam,https://www.reddit.com/r/Python/comments/1obzlam/about_me_and_the_order_i_code_in/,About Me (and the order i code in),Consistent_Hall631,2025-10-21 09:13:32,0,4,"hi, i recently started python, and i am really happy, i enjoy it very much and it has become a hobby,

the order i code in: 1: imports 2 variables: 3:...","hi, i recently started python, and i am really happy, i enjoy it very much and it has become a hobby,

the order i code in: 1: imports 2 variables: 3: normal code (print, lists etc) 4: if/else statements. (i put notes at the tops of each section.)",2025-10-21T10:09:09.599472
1obxzya,https://www.reddit.com/r/Python/comments/1obxzya/tuesday_daily_thread_advanced_questions/,Tuesday Daily Thread: Advanced questions,AutoModerator,2025-10-21 08:00:30,1,0,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about ...","# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",2025-10-21T10:09:09.599537
1obrz11,https://www.reddit.com/r/Python/comments/1obrz11/assemblytominecraftcommandblockcompiler_python/,Assembly-to-Minecraft-Command-Block-Compiler (Python) ‚Äî updated ‚Äî testers & contributors wanted,bowser04410,2025-10-21 03:57:47,3,0,"¬†I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedba...","I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedback, and contributors. Repo:¬†[https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler](https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler)

What My Project Does:

* Parses a tiny assembly-style language (labels, arithmetic, branches, simple I/O) and emits Minecraft command sequences tailored for command blocks.
* Produces low-level, inspectable output so you can see how program logic maps to in-game command-block logic.
* Implemented in Python for readability and easy contribution.

Target Audience:

* Minecraft command-block creators who want to run low-level programs without mods.
* Hobbyist compiler writers and learners looking for a compact Python codegen example.
* Contributors interested in parsing, code generation, testing strategies, or command optimization.
* This is an educational/hobby tool for small demos and experiments ‚Äî not a production compiler for large-scale programs.

Comparison (how it differs from alternatives):

* Assembly-focused: unlike high-level language‚ÜíMinecraft tools, it targets an assembly-like input so outputs are low-level and easy to debug in command blocks.
* Python-first and lightweight: prioritizes clarity and contributor-friendliness over performance.
* Command-block oriented: designed to work with vanilla in-game command blocks (does not target datapacks or mods).

How to help:

* Test: run examples, try outputs in a world, and note Minecraft version and exact steps when something fails.
* Report: open issues with minimal reproduction files and steps.
* Contribute: PRs welcome for bug fixes, examples, optimizations, docs, or tests ‚Äî look for good-first-issue.",2025-10-21T10:09:09.599710
1obqtmz,https://www.reddit.com/r/Python/comments/1obqtmz/has_any_library_emerged_as_the_replacement_for/,Has any library emerged as the replacement for Poliastro?,KerPop42,2025-10-21 03:15:23,2,2,"I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-...","I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-go. Even if you restrict yourself to 3.11 you *also* have to go back to pip <24.1 because of how some package requirements are written. I've looked around and can't find any other orbital dynamics libraries that are more than personal projects. Is the field just dead in python?",2025-10-21T10:09:09.599831
1obprx2,https://www.reddit.com/r/Python/comments/1obprx2/building_an_opensource_observability_tool_for/,Building an open-source observability tool for multi-agent systems - looking for feedback,Standard_Career_8603,2025-10-21 02:35:45,6,4,"I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-sour...","I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-source observability tool.   
  
**What it does**:  
\- Tracks information flow between agents   
\- Shows which tools are being called with what parameters   
\- Monitors how prompt changes affect agent behavior   
\- Works in both development and production   
  
**The gap I'm trying to fill**: Existing tools (LangSmith, LangFuse, AgentOps) are great at LLM observability (tokens, costs, latency), but I feel like they don't help much with multi-agent coordination. They show you **what** happened but not **why** agents failed to coordinate.   
  
  
**Looking for feedback**:  
1. Have you built multi-agent systems? What do you use for debugging?   
2. Does this solve a real problem or am I overengineering?   
3. What features would actually make this useful for you? Still early days, but happy to share the repo if folks are interested.",2025-10-21T10:09:09.599886
1obpjnf,https://www.reddit.com/r/Python/comments/1obpjnf/i_built_a_tool_that_runs_your_python_function_on/,i built a tool that runs your python function on 10k vms in parallel with one line of code.,Ok_Post_149,2025-10-21 02:25:33,14,8,"# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to ...","# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to hand it over to DevOps, the backlog would grow, and overall throughput would tank.

So I built **Burla**, the simplest cluster compute software that lets even Python beginners run code on massive clusters in the cloud. It‚Äôs one function with two parameters: the function and the inputs. You can bring your own Docker image, set hardware requirements, and run jobs as background tasks so you can fire and forget. Responses are fast, and you can call a million simple functions in just a few seconds.

Burla is built for embarrassingly parallel workloads like preprocessing data, hyperparameter tuning, and batch inference.

# Target Audience

Engineers, data scientists, and analysts who want to scale their code in production or research environments without dealing with infrastructure.

# Comparison

Unlike Ray or Dask, Burla doesn‚Äôt require cluster setup, orchestration, or YAML configs. It‚Äôs just:

    from burla import remote_parallel_map
    remote_parallel_map(func, inputs)
    

That‚Äôs it. It automatically handles distribution, retries, logging, and scaling across up to 10,000 VMs.

# Open Source & Free Credits

Burla is open source, and I‚Äôm improving the installation process. I also created managed versions for testing. If you want to try it, I‚Äôll cover 1,000 CPU hours and 100 GPU hours. Email me at [joe@burla.dev]() if interested.

Here‚Äôs a short intro video:  
[https://www.youtube.com/watch?v=9d22y\_kWjyE](https://www.youtube.com/watch?v=9d22y_kWjyE)

GitHub ‚Üí¬†[https://github.com/Burla-Cloud/burla](https://github.com/Burla-Cloud/burla)  
Docs ‚Üí¬†[https://docs.burla.dev](https://docs.burla.dev/)",2025-10-21T10:09:09.599969
1oborpj,https://www.reddit.com/r/Python/comments/1oborpj/i_made_a_python_bot_that_turns_your_text_images/,I made a Python bot that turns your text & images into diagrams right in Telegram.,No_Mongoose_8139,2025-10-21 01:51:22,0,5,"https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project ...","https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project structure, a mind map, or just explain a concept. Every time, I had to open heavy editors like Miro or Figma, which felt like overkill.

So, I decided to build a tool that lives right inside the app I use for communication all day: Telegram.

I'm excited to share my side project: **Diagrammer Bot**. It's a simple yet powerful bot in Python that lets you create diagrams on the fly.

**Here are the key features:**
*   **Text & Image Nodes:** You can create blocks not just from text, but from any image you send.
*   **Full Editing:** Create, connect, edit, and delete both nodes and edges.
*   **Project System:** Save your diagrams with custom names, load them later, or start new ones.
*   **Themes & Export:** Switch between a sleek dark mode and a clean light mode. Export your final diagram as a high-quality PNG.
*   **Open-Source:** The entire project is available on GitHub!

**Tech Stack:** Python, `python-telegram-bot`, `Graphviz` for rendering, and `Pillow` for watermarking.

I would be incredibly grateful for any feedback, feature ideas, or bug reports. And of course, a star ‚≠ê on GitHub would make my day!

*   **Try the bot here:** [https://t.me/diagrammer_robot](https://t.me/diagrammer_robot)
*   **Check out the code on GitHub:** [https://github.com/Lixher/Diagrammer-bot](https://github.com/Lixher/Diagrammer-Bot)",2025-10-21T10:09:09.600385
1oborib,https://www.reddit.com/r/Python/comments/1oborib/i_built_a_persistent_kv_store_in_pure_python/,I built a Persistent KV Store in Pure Python,vollhard-natta,2025-10-21 01:51:07,34,1,"Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been work...","Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been working on for the past few months. It is a lightweight, persistent key-value storage engine in Python, built from scratch to understand and implement the Log-Structured Merge-tree (LSM-tree) architecture. The project, which is fully open-source, is explicitly optimized for write-heavy workloads. 



# Core Architecture:

The engine implements the three fundamental LSM components: the **Write Ahead Log (WAL)** for durability, an in-memory **Memtable** (using `SortedDict` for sorted writes), and immutable persistent **SSTables (Sorted String Tables)**.

Some features that I'm proud of:

* **Async Compaction**: Merging and compaction are handled by a **separate background worker thread**. The process itself takes a hybrid approach.
* **Client/Server Model**: The entire storage engine runs behind a **FastAPI server**. This allows multiple clients to connect via REST APIs or the included CLI tool.
* **Efficient Range Queries**: Added full support for range queries from `start_key` to `end_key`. This is achieved via a memory-efficient **k-way merge iterator** that combines results from the Memtable and all SSTables. The FastAPI server delivers the results using a `StreamingResponse` to prevent memory exhaustion for large result sets.
* **Bloom Filter**: Implemented a **Bloom Filter** for each SSTable to drastically reduce disk I/O by confirming that a key definitely does not exist before attempting a disk seek.
* **Binary Storage**: SSTables now use **Msgpack binary format** instead of JSON for smaller file sizes and reduced CPU load during serialization/deserialization.

My favourite part of the project is that I actually got to see a practical implementation of [Merge Sorted Arrays - GeeksforGeeks](https://www.geeksforgeeks.org/dsa/merge-k-sorted-arrays/). This is a pretty popular interview question and to see DSA being actually implemented is a crazy moment.

# Get Started

    pip install lsm_storage_engine_key_value_store

**Usage via CLI/Server:**

1. **Terminal 1 (Server):** `lsm-server`
2. **Terminal 2 (Client):** `lsm-cli` (Follow the CLI help for commands).

# Looking for Feedback

I'd love to hear your thoughts about this implementation and how I can make it better and what features I can add in later versions. Ideas and constructive criticism are always welcome. I'm also looking for contributors, if anyone is interested, please feel free to PM and we can discuss.

Repo link: [Shashank1985/storage-engine](https://github.com/Shashank1985/storage-engine)  
Thanks!!",2025-10-21T10:09:09.600512
1obo3rg,https://www.reddit.com/r/Python/comments/1obo3rg/kryypto_an_open_source_python_text_editor/,Kryypto an open source python text editor.,SxxVe,2025-10-21 01:21:30,3,5,"Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
*...","Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
* Full Keyboard Support ‚Äì no need for the mouse, every feature is accessible via hotkeys
* Discord presence
* Live MarkDown Preview
* Session Restore
* Custom Styling
   * `config\configuration.cfg` for editor settings
   * CSS for theme and style customization
* Editing Tools
   * Find text in file
   * Jump to line
   * Adjustable cursor (color & width)
   * Configurable animations (types & duration)
* Git & GitHub Integration
   * View total commits
   * See last commit message & date
   * Track file changes directly inside the editor
* Productivity Features
   * Autocompleter
   * Builtin Terminal
   * Docstring panel (hover to see function/class docstring)
   * Tab-based file switching
   * Bookmarking lines
   * Custom title bar
* Syntax Highlighting for
   * Python
   * CSS
   * JSON
   * Config files
   * Markdown

Target Audience

* Developers who prefer keyboard-driven workflows (no mouse required)
* Users looking for a lightweight alternative to heavier IDEs
* People who want to customize their editor with CSS and configuration settings
* Anyone experimenting with Python-based editors or open-source text editing tools

# Comparison:

* Lightweight ‚Äì minimal overhead, focused on speed
* Highly customizable ‚Äì styling via CSS and config files
* Keyboard-centric ‚Äì designed to be fully usable without a mouse

  
github repo: [https://github.com/NaturalCapsule/Kryypto](https://github.com/NaturalCapsule/Kryypto)

  
website: [https://naturalcapsule.github.io/Kryypto/](https://naturalcapsule.github.io/Kryypto/)",2025-10-21T10:09:09.600655
1obo0ze,https://www.reddit.com/r/Python/comments/1obo0ze/forgetting_python/,Forgetting Python,Ashamed-Society-2875,2025-10-21 01:17:52,0,4,"I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping f...","I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping for college exams , now when i come back to python it feels i have lost my level and my touch i feel like fkn loser , all those hrs spent in 8th grade for nothing , i forgot a lot , is it common or just me???",2025-10-21T10:09:09.600775
1obzlam,https://www.reddit.com/r/Python/comments/1obzlam/about_me_and_the_order_i_code_in/,About Me (and the order i code in),Consistent_Hall631,2025-10-21 09:13:32,0,4,"hi, i recently started python, and i am really happy, i enjoy it very much and it has become a hobby,

the order i code in: 1: imports 2 variables: 3:...","hi, i recently started python, and i am really happy, i enjoy it very much and it has become a hobby,

the order i code in: 1: imports 2 variables: 3: normal code (print, lists etc) 4: if/else statements. (i put notes at the tops of each section.)",2025-10-21T10:10:33.594858
1obxzya,https://www.reddit.com/r/Python/comments/1obxzya/tuesday_daily_thread_advanced_questions/,Tuesday Daily Thread: Advanced questions,AutoModerator,2025-10-21 08:00:30,1,0,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about ...","# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",2025-10-21T10:10:33.594927
1obrz11,https://www.reddit.com/r/Python/comments/1obrz11/assemblytominecraftcommandblockcompiler_python/,Assembly-to-Minecraft-Command-Block-Compiler (Python) ‚Äî updated ‚Äî testers & contributors wanted,bowser04410,2025-10-21 03:57:47,1,0,"¬†I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedba...","I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedback, and contributors. Repo:¬†[https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler](https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler)

What My Project Does:

* Parses a tiny assembly-style language (labels, arithmetic, branches, simple I/O) and emits Minecraft command sequences tailored for command blocks.
* Produces low-level, inspectable output so you can see how program logic maps to in-game command-block logic.
* Implemented in Python for readability and easy contribution.

Target Audience:

* Minecraft command-block creators who want to run low-level programs without mods.
* Hobbyist compiler writers and learners looking for a compact Python codegen example.
* Contributors interested in parsing, code generation, testing strategies, or command optimization.
* This is an educational/hobby tool for small demos and experiments ‚Äî not a production compiler for large-scale programs.

Comparison (how it differs from alternatives):

* Assembly-focused: unlike high-level language‚ÜíMinecraft tools, it targets an assembly-like input so outputs are low-level and easy to debug in command blocks.
* Python-first and lightweight: prioritizes clarity and contributor-friendliness over performance.
* Command-block oriented: designed to work with vanilla in-game command blocks (does not target datapacks or mods).

How to help:

* Test: run examples, try outputs in a world, and note Minecraft version and exact steps when something fails.
* Report: open issues with minimal reproduction files and steps.
* Contribute: PRs welcome for bug fixes, examples, optimizations, docs, or tests ‚Äî look for good-first-issue.",2025-10-21T10:10:33.595052
1obqtmz,https://www.reddit.com/r/Python/comments/1obqtmz/has_any_library_emerged_as_the_replacement_for/,Has any library emerged as the replacement for Poliastro?,KerPop42,2025-10-21 03:15:23,2,2,"I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-...","I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-go. Even if you restrict yourself to 3.11 you *also* have to go back to pip <24.1 because of how some package requirements are written. I've looked around and can't find any other orbital dynamics libraries that are more than personal projects. Is the field just dead in python?",2025-10-21T10:10:33.595148
1obprx2,https://www.reddit.com/r/Python/comments/1obprx2/building_an_opensource_observability_tool_for/,Building an open-source observability tool for multi-agent systems - looking for feedback,Standard_Career_8603,2025-10-21 02:35:45,3,4,"I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-sour...","I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-source observability tool.   
  
**What it does**:  
\- Tracks information flow between agents   
\- Shows which tools are being called with what parameters   
\- Monitors how prompt changes affect agent behavior   
\- Works in both development and production   
  
**The gap I'm trying to fill**: Existing tools (LangSmith, LangFuse, AgentOps) are great at LLM observability (tokens, costs, latency), but I feel like they don't help much with multi-agent coordination. They show you **what** happened but not **why** agents failed to coordinate.   
  
  
**Looking for feedback**:  
1. Have you built multi-agent systems? What do you use for debugging?   
2. Does this solve a real problem or am I overengineering?   
3. What features would actually make this useful for you? Still early days, but happy to share the repo if folks are interested.",2025-10-21T10:10:33.595186
1obpjnf,https://www.reddit.com/r/Python/comments/1obpjnf/i_built_a_tool_that_runs_your_python_function_on/,i built a tool that runs your python function on 10k vms in parallel with one line of code.,Ok_Post_149,2025-10-21 02:25:33,14,8,"# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to ...","# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to hand it over to DevOps, the backlog would grow, and overall throughput would tank.

So I built **Burla**, the simplest cluster compute software that lets even Python beginners run code on massive clusters in the cloud. It‚Äôs one function with two parameters: the function and the inputs. You can bring your own Docker image, set hardware requirements, and run jobs as background tasks so you can fire and forget. Responses are fast, and you can call a million simple functions in just a few seconds.

Burla is built for embarrassingly parallel workloads like preprocessing data, hyperparameter tuning, and batch inference.

# Target Audience

Engineers, data scientists, and analysts who want to scale their code in production or research environments without dealing with infrastructure.

# Comparison

Unlike Ray or Dask, Burla doesn‚Äôt require cluster setup, orchestration, or YAML configs. It‚Äôs just:

    from burla import remote_parallel_map
    remote_parallel_map(func, inputs)
    

That‚Äôs it. It automatically handles distribution, retries, logging, and scaling across up to 10,000 VMs.

# Open Source & Free Credits

Burla is open source, and I‚Äôm improving the installation process. I also created managed versions for testing. If you want to try it, I‚Äôll cover 1,000 CPU hours and 100 GPU hours. Email me at [joe@burla.dev]() if interested.

Here‚Äôs a short intro video:  
[https://www.youtube.com/watch?v=9d22y\_kWjyE](https://www.youtube.com/watch?v=9d22y_kWjyE)

GitHub ‚Üí¬†[https://github.com/Burla-Cloud/burla](https://github.com/Burla-Cloud/burla)  
Docs ‚Üí¬†[https://docs.burla.dev](https://docs.burla.dev/)",2025-10-21T10:10:33.595242
1oborpj,https://www.reddit.com/r/Python/comments/1oborpj/i_made_a_python_bot_that_turns_your_text_images/,I made a Python bot that turns your text & images into diagrams right in Telegram.,No_Mongoose_8139,2025-10-21 01:51:22,0,5,"https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project ...","https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project structure, a mind map, or just explain a concept. Every time, I had to open heavy editors like Miro or Figma, which felt like overkill.

So, I decided to build a tool that lives right inside the app I use for communication all day: Telegram.

I'm excited to share my side project: **Diagrammer Bot**. It's a simple yet powerful bot in Python that lets you create diagrams on the fly.

**Here are the key features:**
*   **Text & Image Nodes:** You can create blocks not just from text, but from any image you send.
*   **Full Editing:** Create, connect, edit, and delete both nodes and edges.
*   **Project System:** Save your diagrams with custom names, load them later, or start new ones.
*   **Themes & Export:** Switch between a sleek dark mode and a clean light mode. Export your final diagram as a high-quality PNG.
*   **Open-Source:** The entire project is available on GitHub!

**Tech Stack:** Python, `python-telegram-bot`, `Graphviz` for rendering, and `Pillow` for watermarking.

I would be incredibly grateful for any feedback, feature ideas, or bug reports. And of course, a star ‚≠ê on GitHub would make my day!

*   **Try the bot here:** [https://t.me/diagrammer_robot](https://t.me/diagrammer_robot)
*   **Check out the code on GitHub:** [https://github.com/Lixher/Diagrammer-bot](https://github.com/Lixher/Diagrammer-Bot)",2025-10-21T10:10:33.595597
1oborib,https://www.reddit.com/r/Python/comments/1oborib/i_built_a_persistent_kv_store_in_pure_python/,I built a Persistent KV Store in Pure Python,vollhard-natta,2025-10-21 01:51:07,32,1,"Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been work...","Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been working on for the past few months. It is a lightweight, persistent key-value storage engine in Python, built from scratch to understand and implement the Log-Structured Merge-tree (LSM-tree) architecture. The project, which is fully open-source, is explicitly optimized for write-heavy workloads. 



# Core Architecture:

The engine implements the three fundamental LSM components: the **Write Ahead Log (WAL)** for durability, an in-memory **Memtable** (using `SortedDict` for sorted writes), and immutable persistent **SSTables (Sorted String Tables)**.

Some features that I'm proud of:

* **Async Compaction**: Merging and compaction are handled by a **separate background worker thread**. The process itself takes a hybrid approach.
* **Client/Server Model**: The entire storage engine runs behind a **FastAPI server**. This allows multiple clients to connect via REST APIs or the included CLI tool.
* **Efficient Range Queries**: Added full support for range queries from `start_key` to `end_key`. This is achieved via a memory-efficient **k-way merge iterator** that combines results from the Memtable and all SSTables. The FastAPI server delivers the results using a `StreamingResponse` to prevent memory exhaustion for large result sets.
* **Bloom Filter**: Implemented a **Bloom Filter** for each SSTable to drastically reduce disk I/O by confirming that a key definitely does not exist before attempting a disk seek.
* **Binary Storage**: SSTables now use **Msgpack binary format** instead of JSON for smaller file sizes and reduced CPU load during serialization/deserialization.

My favourite part of the project is that I actually got to see a practical implementation of [Merge Sorted Arrays - GeeksforGeeks](https://www.geeksforgeeks.org/dsa/merge-k-sorted-arrays/). This is a pretty popular interview question and to see DSA being actually implemented is a crazy moment.

# Get Started

    pip install lsm_storage_engine_key_value_store

**Usage via CLI/Server:**

1. **Terminal 1 (Server):** `lsm-server`
2. **Terminal 2 (Client):** `lsm-cli` (Follow the CLI help for commands).

# Looking for Feedback

I'd love to hear your thoughts about this implementation and how I can make it better and what features I can add in later versions. Ideas and constructive criticism are always welcome. I'm also looking for contributors, if anyone is interested, please feel free to PM and we can discuss.

Repo link: [Shashank1985/storage-engine](https://github.com/Shashank1985/storage-engine)  
Thanks!!",2025-10-21T10:10:33.595692
1obo3rg,https://www.reddit.com/r/Python/comments/1obo3rg/kryypto_an_open_source_python_text_editor/,Kryypto an open source python text editor.,SxxVe,2025-10-21 01:21:30,3,5,"Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
*...","Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
* Full Keyboard Support ‚Äì no need for the mouse, every feature is accessible via hotkeys
* Discord presence
* Live MarkDown Preview
* Session Restore
* Custom Styling
   * `config\configuration.cfg` for editor settings
   * CSS for theme and style customization
* Editing Tools
   * Find text in file
   * Jump to line
   * Adjustable cursor (color & width)
   * Configurable animations (types & duration)
* Git & GitHub Integration
   * View total commits
   * See last commit message & date
   * Track file changes directly inside the editor
* Productivity Features
   * Autocompleter
   * Builtin Terminal
   * Docstring panel (hover to see function/class docstring)
   * Tab-based file switching
   * Bookmarking lines
   * Custom title bar
* Syntax Highlighting for
   * Python
   * CSS
   * JSON
   * Config files
   * Markdown

Target Audience

* Developers who prefer keyboard-driven workflows (no mouse required)
* Users looking for a lightweight alternative to heavier IDEs
* People who want to customize their editor with CSS and configuration settings
* Anyone experimenting with Python-based editors or open-source text editing tools

# Comparison:

* Lightweight ‚Äì minimal overhead, focused on speed
* Highly customizable ‚Äì styling via CSS and config files
* Keyboard-centric ‚Äì designed to be fully usable without a mouse

  
github repo: [https://github.com/NaturalCapsule/Kryypto](https://github.com/NaturalCapsule/Kryypto)

  
website: [https://naturalcapsule.github.io/Kryypto/](https://naturalcapsule.github.io/Kryypto/)",2025-10-21T10:10:33.595804
1obo0ze,https://www.reddit.com/r/Python/comments/1obo0ze/forgetting_python/,Forgetting Python,Ashamed-Society-2875,2025-10-21 01:17:52,0,4,"I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping f...","I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping for college exams , now when i come back to python it feels i have lost my level and my touch i feel like fkn loser , all those hrs spent in 8th grade for nothing , i forgot a lot , is it common or just me???",2025-10-21T10:10:33.595895
1obzlam,https://www.reddit.com/r/Python/comments/1obzlam/about_me_and_the_order_i_code_in/,About Me (and the order i code in),Consistent_Hall631,2025-10-21 09:13:32,0,4,"hi, i recently started python, and i am really happy, i enjoy it very much and it has become a hobby,

the order i code in: 1: imports 2 variables: 3:...","hi, i recently started python, and i am really happy, i enjoy it very much and it has become a hobby,

the order i code in: 1: imports 2 variables: 3: normal code (print, lists etc) 4: if/else statements. (i put notes at the tops of each section.)",2025-10-21T10:11:58.330297
1obxzya,https://www.reddit.com/r/Python/comments/1obxzya/tuesday_daily_thread_advanced_questions/,Tuesday Daily Thread: Advanced questions,AutoModerator,2025-10-21 08:00:30,1,0,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about ...","# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",2025-10-21T10:11:58.330377
1obrz11,https://www.reddit.com/r/Python/comments/1obrz11/assemblytominecraftcommandblockcompiler_python/,Assembly-to-Minecraft-Command-Block-Compiler (Python) ‚Äî updated ‚Äî testers & contributors wanted,bowser04410,2025-10-21 03:57:47,3,0,"¬†I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedba...","I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedback, and contributors. Repo:¬†[https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler](https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler)

What My Project Does:

* Parses a tiny assembly-style language (labels, arithmetic, branches, simple I/O) and emits Minecraft command sequences tailored for command blocks.
* Produces low-level, inspectable output so you can see how program logic maps to in-game command-block logic.
* Implemented in Python for readability and easy contribution.

Target Audience:

* Minecraft command-block creators who want to run low-level programs without mods.
* Hobbyist compiler writers and learners looking for a compact Python codegen example.
* Contributors interested in parsing, code generation, testing strategies, or command optimization.
* This is an educational/hobby tool for small demos and experiments ‚Äî not a production compiler for large-scale programs.

Comparison (how it differs from alternatives):

* Assembly-focused: unlike high-level language‚ÜíMinecraft tools, it targets an assembly-like input so outputs are low-level and easy to debug in command blocks.
* Python-first and lightweight: prioritizes clarity and contributor-friendliness over performance.
* Command-block oriented: designed to work with vanilla in-game command blocks (does not target datapacks or mods).

How to help:

* Test: run examples, try outputs in a world, and note Minecraft version and exact steps when something fails.
* Report: open issues with minimal reproduction files and steps.
* Contribute: PRs welcome for bug fixes, examples, optimizations, docs, or tests ‚Äî look for good-first-issue.",2025-10-21T10:11:58.330527
1obqtmz,https://www.reddit.com/r/Python/comments/1obqtmz/has_any_library_emerged_as_the_replacement_for/,Has any library emerged as the replacement for Poliastro?,KerPop42,2025-10-21 03:15:23,2,2,"I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-...","I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-go. Even if you restrict yourself to 3.11 you *also* have to go back to pip <24.1 because of how some package requirements are written. I've looked around and can't find any other orbital dynamics libraries that are more than personal projects. Is the field just dead in python?",2025-10-21T10:11:58.330669
1obprx2,https://www.reddit.com/r/Python/comments/1obprx2/building_an_opensource_observability_tool_for/,Building an open-source observability tool for multi-agent systems - looking for feedback,Standard_Career_8603,2025-10-21 02:35:45,3,4,"I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-sour...","I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-source observability tool.   
  
**What it does**:  
\- Tracks information flow between agents   
\- Shows which tools are being called with what parameters   
\- Monitors how prompt changes affect agent behavior   
\- Works in both development and production   
  
**The gap I'm trying to fill**: Existing tools (LangSmith, LangFuse, AgentOps) are great at LLM observability (tokens, costs, latency), but I feel like they don't help much with multi-agent coordination. They show you **what** happened but not **why** agents failed to coordinate.   
  
  
**Looking for feedback**:  
1. Have you built multi-agent systems? What do you use for debugging?   
2. Does this solve a real problem or am I overengineering?   
3. What features would actually make this useful for you? Still early days, but happy to share the repo if folks are interested.",2025-10-21T10:11:58.330720
1obpjnf,https://www.reddit.com/r/Python/comments/1obpjnf/i_built_a_tool_that_runs_your_python_function_on/,i built a tool that runs your python function on 10k vms in parallel with one line of code.,Ok_Post_149,2025-10-21 02:25:33,11,8,"# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to ...","# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to hand it over to DevOps, the backlog would grow, and overall throughput would tank.

So I built **Burla**, the simplest cluster compute software that lets even Python beginners run code on massive clusters in the cloud. It‚Äôs one function with two parameters: the function and the inputs. You can bring your own Docker image, set hardware requirements, and run jobs as background tasks so you can fire and forget. Responses are fast, and you can call a million simple functions in just a few seconds.

Burla is built for embarrassingly parallel workloads like preprocessing data, hyperparameter tuning, and batch inference.

# Target Audience

Engineers, data scientists, and analysts who want to scale their code in production or research environments without dealing with infrastructure.

# Comparison

Unlike Ray or Dask, Burla doesn‚Äôt require cluster setup, orchestration, or YAML configs. It‚Äôs just:

    from burla import remote_parallel_map
    remote_parallel_map(func, inputs)
    

That‚Äôs it. It automatically handles distribution, retries, logging, and scaling across up to 10,000 VMs.

# Open Source & Free Credits

Burla is open source, and I‚Äôm improving the installation process. I also created managed versions for testing. If you want to try it, I‚Äôll cover 1,000 CPU hours and 100 GPU hours. Email me at [joe@burla.dev]() if interested.

Here‚Äôs a short intro video:  
[https://www.youtube.com/watch?v=9d22y\_kWjyE](https://www.youtube.com/watch?v=9d22y_kWjyE)

GitHub ‚Üí¬†[https://github.com/Burla-Cloud/burla](https://github.com/Burla-Cloud/burla)  
Docs ‚Üí¬†[https://docs.burla.dev](https://docs.burla.dev/)",2025-10-21T10:11:58.330793
1oborpj,https://www.reddit.com/r/Python/comments/1oborpj/i_made_a_python_bot_that_turns_your_text_images/,I made a Python bot that turns your text & images into diagrams right in Telegram.,No_Mongoose_8139,2025-10-21 01:51:22,0,5,"https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project ...","https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project structure, a mind map, or just explain a concept. Every time, I had to open heavy editors like Miro or Figma, which felt like overkill.

So, I decided to build a tool that lives right inside the app I use for communication all day: Telegram.

I'm excited to share my side project: **Diagrammer Bot**. It's a simple yet powerful bot in Python that lets you create diagrams on the fly.

**Here are the key features:**
*   **Text & Image Nodes:** You can create blocks not just from text, but from any image you send.
*   **Full Editing:** Create, connect, edit, and delete both nodes and edges.
*   **Project System:** Save your diagrams with custom names, load them later, or start new ones.
*   **Themes & Export:** Switch between a sleek dark mode and a clean light mode. Export your final diagram as a high-quality PNG.
*   **Open-Source:** The entire project is available on GitHub!

**Tech Stack:** Python, `python-telegram-bot`, `Graphviz` for rendering, and `Pillow` for watermarking.

I would be incredibly grateful for any feedback, feature ideas, or bug reports. And of course, a star ‚≠ê on GitHub would make my day!

*   **Try the bot here:** [https://t.me/diagrammer_robot](https://t.me/diagrammer_robot)
*   **Check out the code on GitHub:** [https://github.com/Lixher/Diagrammer-bot](https://github.com/Lixher/Diagrammer-Bot)",2025-10-21T10:11:58.331219
1oborib,https://www.reddit.com/r/Python/comments/1oborib/i_built_a_persistent_kv_store_in_pure_python/,I built a Persistent KV Store in Pure Python,vollhard-natta,2025-10-21 01:51:07,33,1,"Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been work...","Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been working on for the past few months. It is a lightweight, persistent key-value storage engine in Python, built from scratch to understand and implement the Log-Structured Merge-tree (LSM-tree) architecture. The project, which is fully open-source, is explicitly optimized for write-heavy workloads. 



# Core Architecture:

The engine implements the three fundamental LSM components: the **Write Ahead Log (WAL)** for durability, an in-memory **Memtable** (using `SortedDict` for sorted writes), and immutable persistent **SSTables (Sorted String Tables)**.

Some features that I'm proud of:

* **Async Compaction**: Merging and compaction are handled by a **separate background worker thread**. The process itself takes a hybrid approach.
* **Client/Server Model**: The entire storage engine runs behind a **FastAPI server**. This allows multiple clients to connect via REST APIs or the included CLI tool.
* **Efficient Range Queries**: Added full support for range queries from `start_key` to `end_key`. This is achieved via a memory-efficient **k-way merge iterator** that combines results from the Memtable and all SSTables. The FastAPI server delivers the results using a `StreamingResponse` to prevent memory exhaustion for large result sets.
* **Bloom Filter**: Implemented a **Bloom Filter** for each SSTable to drastically reduce disk I/O by confirming that a key definitely does not exist before attempting a disk seek.
* **Binary Storage**: SSTables now use **Msgpack binary format** instead of JSON for smaller file sizes and reduced CPU load during serialization/deserialization.

My favourite part of the project is that I actually got to see a practical implementation of [Merge Sorted Arrays - GeeksforGeeks](https://www.geeksforgeeks.org/dsa/merge-k-sorted-arrays/). This is a pretty popular interview question and to see DSA being actually implemented is a crazy moment.

# Get Started

    pip install lsm_storage_engine_key_value_store

**Usage via CLI/Server:**

1. **Terminal 1 (Server):** `lsm-server`
2. **Terminal 2 (Client):** `lsm-cli` (Follow the CLI help for commands).

# Looking for Feedback

I'd love to hear your thoughts about this implementation and how I can make it better and what features I can add in later versions. Ideas and constructive criticism are always welcome. I'm also looking for contributors, if anyone is interested, please feel free to PM and we can discuss.

Repo link: [Shashank1985/storage-engine](https://github.com/Shashank1985/storage-engine)  
Thanks!!",2025-10-21T10:11:58.331351
1obo3rg,https://www.reddit.com/r/Python/comments/1obo3rg/kryypto_an_open_source_python_text_editor/,Kryypto an open source python text editor.,SxxVe,2025-10-21 01:21:30,3,5,"Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
*...","Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
* Full Keyboard Support ‚Äì no need for the mouse, every feature is accessible via hotkeys
* Discord presence
* Live MarkDown Preview
* Session Restore
* Custom Styling
   * `config\configuration.cfg` for editor settings
   * CSS for theme and style customization
* Editing Tools
   * Find text in file
   * Jump to line
   * Adjustable cursor (color & width)
   * Configurable animations (types & duration)
* Git & GitHub Integration
   * View total commits
   * See last commit message & date
   * Track file changes directly inside the editor
* Productivity Features
   * Autocompleter
   * Builtin Terminal
   * Docstring panel (hover to see function/class docstring)
   * Tab-based file switching
   * Bookmarking lines
   * Custom title bar
* Syntax Highlighting for
   * Python
   * CSS
   * JSON
   * Config files
   * Markdown

Target Audience

* Developers who prefer keyboard-driven workflows (no mouse required)
* Users looking for a lightweight alternative to heavier IDEs
* People who want to customize their editor with CSS and configuration settings
* Anyone experimenting with Python-based editors or open-source text editing tools

# Comparison:

* Lightweight ‚Äì minimal overhead, focused on speed
* Highly customizable ‚Äì styling via CSS and config files
* Keyboard-centric ‚Äì designed to be fully usable without a mouse

  
github repo: [https://github.com/NaturalCapsule/Kryypto](https://github.com/NaturalCapsule/Kryypto)

  
website: [https://naturalcapsule.github.io/Kryypto/](https://naturalcapsule.github.io/Kryypto/)",2025-10-21T10:11:58.331515
1obo0ze,https://www.reddit.com/r/Python/comments/1obo0ze/forgetting_python/,Forgetting Python,Ashamed-Society-2875,2025-10-21 01:17:52,0,4,"I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping f...","I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping for college exams , now when i come back to python it feels i have lost my level and my touch i feel like fkn loser , all those hrs spent in 8th grade for nothing , i forgot a lot , is it common or just me???",2025-10-21T10:11:58.331644
1obzlam,https://www.reddit.com/r/Python/comments/1obzlam/about_me_and_the_order_i_code_in/,About Me (and the order i code in),Consistent_Hall631,2025-10-21 09:13:32,0,4,"hi, i recently started python, and i am really happy, i enjoy it very much and it has become a hobby,

the order i code in: 1: imports 2 variables: 3:...","hi, i recently started python, and i am really happy, i enjoy it very much and it has become a hobby,

the order i code in: 1: imports 2 variables: 3: normal code (print, lists etc) 4: if/else statements. (i put notes at the tops of each section.)",2025-10-21T10:13:24.553124
1obxzya,https://www.reddit.com/r/Python/comments/1obxzya/tuesday_daily_thread_advanced_questions/,Tuesday Daily Thread: Advanced questions,AutoModerator,2025-10-21 08:00:30,1,0,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about ...","# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",2025-10-21T10:13:24.553179
1obrz11,https://www.reddit.com/r/Python/comments/1obrz11/assemblytominecraftcommandblockcompiler_python/,Assembly-to-Minecraft-Command-Block-Compiler (Python) ‚Äî updated ‚Äî testers & contributors wanted,bowser04410,2025-10-21 03:57:47,5,0,"¬†I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedba...","I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedback, and contributors. Repo:¬†[https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler](https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler)

What My Project Does:

* Parses a tiny assembly-style language (labels, arithmetic, branches, simple I/O) and emits Minecraft command sequences tailored for command blocks.
* Produces low-level, inspectable output so you can see how program logic maps to in-game command-block logic.
* Implemented in Python for readability and easy contribution.

Target Audience:

* Minecraft command-block creators who want to run low-level programs without mods.
* Hobbyist compiler writers and learners looking for a compact Python codegen example.
* Contributors interested in parsing, code generation, testing strategies, or command optimization.
* This is an educational/hobby tool for small demos and experiments ‚Äî not a production compiler for large-scale programs.

Comparison (how it differs from alternatives):

* Assembly-focused: unlike high-level language‚ÜíMinecraft tools, it targets an assembly-like input so outputs are low-level and easy to debug in command blocks.
* Python-first and lightweight: prioritizes clarity and contributor-friendliness over performance.
* Command-block oriented: designed to work with vanilla in-game command blocks (does not target datapacks or mods).

How to help:

* Test: run examples, try outputs in a world, and note Minecraft version and exact steps when something fails.
* Report: open issues with minimal reproduction files and steps.
* Contribute: PRs welcome for bug fixes, examples, optimizations, docs, or tests ‚Äî look for good-first-issue.",2025-10-21T10:13:24.553251
1obqtmz,https://www.reddit.com/r/Python/comments/1obqtmz/has_any_library_emerged_as_the_replacement_for/,Has any library emerged as the replacement for Poliastro?,KerPop42,2025-10-21 03:15:23,2,2,"I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-...","I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-go. Even if you restrict yourself to 3.11 you *also* have to go back to pip <24.1 because of how some package requirements are written. I've looked around and can't find any other orbital dynamics libraries that are more than personal projects. Is the field just dead in python?",2025-10-21T10:13:24.553314
1obprx2,https://www.reddit.com/r/Python/comments/1obprx2/building_an_opensource_observability_tool_for/,Building an open-source observability tool for multi-agent systems - looking for feedback,Standard_Career_8603,2025-10-21 02:35:45,5,4,"I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-sour...","I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-source observability tool.   
  
**What it does**:  
\- Tracks information flow between agents   
\- Shows which tools are being called with what parameters   
\- Monitors how prompt changes affect agent behavior   
\- Works in both development and production   
  
**The gap I'm trying to fill**: Existing tools (LangSmith, LangFuse, AgentOps) are great at LLM observability (tokens, costs, latency), but I feel like they don't help much with multi-agent coordination. They show you **what** happened but not **why** agents failed to coordinate.   
  
  
**Looking for feedback**:  
1. Have you built multi-agent systems? What do you use for debugging?   
2. Does this solve a real problem or am I overengineering?   
3. What features would actually make this useful for you? Still early days, but happy to share the repo if folks are interested.",2025-10-21T10:13:24.553339
1obpjnf,https://www.reddit.com/r/Python/comments/1obpjnf/i_built_a_tool_that_runs_your_python_function_on/,i built a tool that runs your python function on 10k vms in parallel with one line of code.,Ok_Post_149,2025-10-21 02:25:33,11,8,"# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to ...","# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to hand it over to DevOps, the backlog would grow, and overall throughput would tank.

So I built **Burla**, the simplest cluster compute software that lets even Python beginners run code on massive clusters in the cloud. It‚Äôs one function with two parameters: the function and the inputs. You can bring your own Docker image, set hardware requirements, and run jobs as background tasks so you can fire and forget. Responses are fast, and you can call a million simple functions in just a few seconds.

Burla is built for embarrassingly parallel workloads like preprocessing data, hyperparameter tuning, and batch inference.

# Target Audience

Engineers, data scientists, and analysts who want to scale their code in production or research environments without dealing with infrastructure.

# Comparison

Unlike Ray or Dask, Burla doesn‚Äôt require cluster setup, orchestration, or YAML configs. It‚Äôs just:

    from burla import remote_parallel_map
    remote_parallel_map(func, inputs)
    

That‚Äôs it. It automatically handles distribution, retries, logging, and scaling across up to 10,000 VMs.

# Open Source & Free Credits

Burla is open source, and I‚Äôm improving the installation process. I also created managed versions for testing. If you want to try it, I‚Äôll cover 1,000 CPU hours and 100 GPU hours. Email me at [joe@burla.dev]() if interested.

Here‚Äôs a short intro video:  
[https://www.youtube.com/watch?v=9d22y\_kWjyE](https://www.youtube.com/watch?v=9d22y_kWjyE)

GitHub ‚Üí¬†[https://github.com/Burla-Cloud/burla](https://github.com/Burla-Cloud/burla)  
Docs ‚Üí¬†[https://docs.burla.dev](https://docs.burla.dev/)",2025-10-21T10:13:24.553376
1oborpj,https://www.reddit.com/r/Python/comments/1oborpj/i_made_a_python_bot_that_turns_your_text_images/,I made a Python bot that turns your text & images into diagrams right in Telegram.,No_Mongoose_8139,2025-10-21 01:51:22,0,5,"https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project ...","https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project structure, a mind map, or just explain a concept. Every time, I had to open heavy editors like Miro or Figma, which felt like overkill.

So, I decided to build a tool that lives right inside the app I use for communication all day: Telegram.

I'm excited to share my side project: **Diagrammer Bot**. It's a simple yet powerful bot in Python that lets you create diagrams on the fly.

**Here are the key features:**
*   **Text & Image Nodes:** You can create blocks not just from text, but from any image you send.
*   **Full Editing:** Create, connect, edit, and delete both nodes and edges.
*   **Project System:** Save your diagrams with custom names, load them later, or start new ones.
*   **Themes & Export:** Switch between a sleek dark mode and a clean light mode. Export your final diagram as a high-quality PNG.
*   **Open-Source:** The entire project is available on GitHub!

**Tech Stack:** Python, `python-telegram-bot`, `Graphviz` for rendering, and `Pillow` for watermarking.

I would be incredibly grateful for any feedback, feature ideas, or bug reports. And of course, a star ‚≠ê on GitHub would make my day!

*   **Try the bot here:** [https://t.me/diagrammer_robot](https://t.me/diagrammer_robot)
*   **Check out the code on GitHub:** [https://github.com/Lixher/Diagrammer-bot](https://github.com/Lixher/Diagrammer-Bot)",2025-10-21T10:13:24.553643
1oborib,https://www.reddit.com/r/Python/comments/1oborib/i_built_a_persistent_kv_store_in_pure_python/,I built a Persistent KV Store in Pure Python,vollhard-natta,2025-10-21 01:51:07,34,1,"Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been work...","Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been working on for the past few months. It is a lightweight, persistent key-value storage engine in Python, built from scratch to understand and implement the Log-Structured Merge-tree (LSM-tree) architecture. The project, which is fully open-source, is explicitly optimized for write-heavy workloads. 



# Core Architecture:

The engine implements the three fundamental LSM components: the **Write Ahead Log (WAL)** for durability, an in-memory **Memtable** (using `SortedDict` for sorted writes), and immutable persistent **SSTables (Sorted String Tables)**.

Some features that I'm proud of:

* **Async Compaction**: Merging and compaction are handled by a **separate background worker thread**. The process itself takes a hybrid approach.
* **Client/Server Model**: The entire storage engine runs behind a **FastAPI server**. This allows multiple clients to connect via REST APIs or the included CLI tool.
* **Efficient Range Queries**: Added full support for range queries from `start_key` to `end_key`. This is achieved via a memory-efficient **k-way merge iterator** that combines results from the Memtable and all SSTables. The FastAPI server delivers the results using a `StreamingResponse` to prevent memory exhaustion for large result sets.
* **Bloom Filter**: Implemented a **Bloom Filter** for each SSTable to drastically reduce disk I/O by confirming that a key definitely does not exist before attempting a disk seek.
* **Binary Storage**: SSTables now use **Msgpack binary format** instead of JSON for smaller file sizes and reduced CPU load during serialization/deserialization.

My favourite part of the project is that I actually got to see a practical implementation of [Merge Sorted Arrays - GeeksforGeeks](https://www.geeksforgeeks.org/dsa/merge-k-sorted-arrays/). This is a pretty popular interview question and to see DSA being actually implemented is a crazy moment.

# Get Started

    pip install lsm_storage_engine_key_value_store

**Usage via CLI/Server:**

1. **Terminal 1 (Server):** `lsm-server`
2. **Terminal 2 (Client):** `lsm-cli` (Follow the CLI help for commands).

# Looking for Feedback

I'd love to hear your thoughts about this implementation and how I can make it better and what features I can add in later versions. Ideas and constructive criticism are always welcome. I'm also looking for contributors, if anyone is interested, please feel free to PM and we can discuss.

Repo link: [Shashank1985/storage-engine](https://github.com/Shashank1985/storage-engine)  
Thanks!!",2025-10-21T10:13:24.553703
1obo3rg,https://www.reddit.com/r/Python/comments/1obo3rg/kryypto_an_open_source_python_text_editor/,Kryypto an open source python text editor.,SxxVe,2025-10-21 01:21:30,3,5,"Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
*...","Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
* Full Keyboard Support ‚Äì no need for the mouse, every feature is accessible via hotkeys
* Discord presence
* Live MarkDown Preview
* Session Restore
* Custom Styling
   * `config\configuration.cfg` for editor settings
   * CSS for theme and style customization
* Editing Tools
   * Find text in file
   * Jump to line
   * Adjustable cursor (color & width)
   * Configurable animations (types & duration)
* Git & GitHub Integration
   * View total commits
   * See last commit message & date
   * Track file changes directly inside the editor
* Productivity Features
   * Autocompleter
   * Builtin Terminal
   * Docstring panel (hover to see function/class docstring)
   * Tab-based file switching
   * Bookmarking lines
   * Custom title bar
* Syntax Highlighting for
   * Python
   * CSS
   * JSON
   * Config files
   * Markdown

Target Audience

* Developers who prefer keyboard-driven workflows (no mouse required)
* Users looking for a lightweight alternative to heavier IDEs
* People who want to customize their editor with CSS and configuration settings
* Anyone experimenting with Python-based editors or open-source text editing tools

# Comparison:

* Lightweight ‚Äì minimal overhead, focused on speed
* Highly customizable ‚Äì styling via CSS and config files
* Keyboard-centric ‚Äì designed to be fully usable without a mouse

  
github repo: [https://github.com/NaturalCapsule/Kryypto](https://github.com/NaturalCapsule/Kryypto)

  
website: [https://naturalcapsule.github.io/Kryypto/](https://naturalcapsule.github.io/Kryypto/)",2025-10-21T10:13:24.553775
1obo0ze,https://www.reddit.com/r/Python/comments/1obo0ze/forgetting_python/,Forgetting Python,Ashamed-Society-2875,2025-10-21 01:17:52,0,4,"I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping f...","I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping for college exams , now when i come back to python it feels i have lost my level and my touch i feel like fkn loser , all those hrs spent in 8th grade for nothing , i forgot a lot , is it common or just me???",2025-10-21T10:13:24.553831
1obzlam,https://www.reddit.com/r/Python/comments/1obzlam/about_me_and_the_order_i_code_in/,About Me (and the order i code in),Consistent_Hall631,2025-10-21 09:13:32,0,4,"hi, i recently started python, and i am really happy, i enjoy it very much and it has become a hobby,

the order i code in: 1: imports 2 variables: 3:...","hi, i recently started python, and i am really happy, i enjoy it very much and it has become a hobby,

the order i code in: 1: imports 2 variables: 3: normal code (print, lists etc) 4: if/else statements. (i put notes at the tops of each section.)",2025-10-21T10:14:51.957990
1obxzya,https://www.reddit.com/r/Python/comments/1obxzya/tuesday_daily_thread_advanced_questions/,Tuesday Daily Thread: Advanced questions,AutoModerator,2025-10-21 08:00:30,1,0,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about ...","# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",2025-10-21T10:14:51.958055
1obrz11,https://www.reddit.com/r/Python/comments/1obrz11/assemblytominecraftcommandblockcompiler_python/,Assembly-to-Minecraft-Command-Block-Compiler (Python) ‚Äî updated ‚Äî testers & contributors wanted,bowser04410,2025-10-21 03:57:47,2,0,"¬†I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedba...","I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedback, and contributors. Repo:¬†[https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler](https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler)

What My Project Does:

* Parses a tiny assembly-style language (labels, arithmetic, branches, simple I/O) and emits Minecraft command sequences tailored for command blocks.
* Produces low-level, inspectable output so you can see how program logic maps to in-game command-block logic.
* Implemented in Python for readability and easy contribution.

Target Audience:

* Minecraft command-block creators who want to run low-level programs without mods.
* Hobbyist compiler writers and learners looking for a compact Python codegen example.
* Contributors interested in parsing, code generation, testing strategies, or command optimization.
* This is an educational/hobby tool for small demos and experiments ‚Äî not a production compiler for large-scale programs.

Comparison (how it differs from alternatives):

* Assembly-focused: unlike high-level language‚ÜíMinecraft tools, it targets an assembly-like input so outputs are low-level and easy to debug in command blocks.
* Python-first and lightweight: prioritizes clarity and contributor-friendliness over performance.
* Command-block oriented: designed to work with vanilla in-game command blocks (does not target datapacks or mods).

How to help:

* Test: run examples, try outputs in a world, and note Minecraft version and exact steps when something fails.
* Report: open issues with minimal reproduction files and steps.
* Contribute: PRs welcome for bug fixes, examples, optimizations, docs, or tests ‚Äî look for good-first-issue.",2025-10-21T10:14:51.958134
1obqtmz,https://www.reddit.com/r/Python/comments/1obqtmz/has_any_library_emerged_as_the_replacement_for/,Has any library emerged as the replacement for Poliastro?,KerPop42,2025-10-21 03:15:23,2,2,"I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-...","I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-go. Even if you restrict yourself to 3.11 you *also* have to go back to pip <24.1 because of how some package requirements are written. I've looked around and can't find any other orbital dynamics libraries that are more than personal projects. Is the field just dead in python?",2025-10-21T10:14:51.958199
1obprx2,https://www.reddit.com/r/Python/comments/1obprx2/building_an_opensource_observability_tool_for/,Building an open-source observability tool for multi-agent systems - looking for feedback,Standard_Career_8603,2025-10-21 02:35:45,4,4,"I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-sour...","I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-source observability tool.   
  
**What it does**:  
\- Tracks information flow between agents   
\- Shows which tools are being called with what parameters   
\- Monitors how prompt changes affect agent behavior   
\- Works in both development and production   
  
**The gap I'm trying to fill**: Existing tools (LangSmith, LangFuse, AgentOps) are great at LLM observability (tokens, costs, latency), but I feel like they don't help much with multi-agent coordination. They show you **what** happened but not **why** agents failed to coordinate.   
  
  
**Looking for feedback**:  
1. Have you built multi-agent systems? What do you use for debugging?   
2. Does this solve a real problem or am I overengineering?   
3. What features would actually make this useful for you? Still early days, but happy to share the repo if folks are interested.",2025-10-21T10:14:51.958225
1obpjnf,https://www.reddit.com/r/Python/comments/1obpjnf/i_built_a_tool_that_runs_your_python_function_on/,i built a tool that runs your python function on 10k vms in parallel with one line of code.,Ok_Post_149,2025-10-21 02:25:33,13,8,"# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to ...","# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to hand it over to DevOps, the backlog would grow, and overall throughput would tank.

So I built **Burla**, the simplest cluster compute software that lets even Python beginners run code on massive clusters in the cloud. It‚Äôs one function with two parameters: the function and the inputs. You can bring your own Docker image, set hardware requirements, and run jobs as background tasks so you can fire and forget. Responses are fast, and you can call a million simple functions in just a few seconds.

Burla is built for embarrassingly parallel workloads like preprocessing data, hyperparameter tuning, and batch inference.

# Target Audience

Engineers, data scientists, and analysts who want to scale their code in production or research environments without dealing with infrastructure.

# Comparison

Unlike Ray or Dask, Burla doesn‚Äôt require cluster setup, orchestration, or YAML configs. It‚Äôs just:

    from burla import remote_parallel_map
    remote_parallel_map(func, inputs)
    

That‚Äôs it. It automatically handles distribution, retries, logging, and scaling across up to 10,000 VMs.

# Open Source & Free Credits

Burla is open source, and I‚Äôm improving the installation process. I also created managed versions for testing. If you want to try it, I‚Äôll cover 1,000 CPU hours and 100 GPU hours. Email me at [joe@burla.dev]() if interested.

Here‚Äôs a short intro video:  
[https://www.youtube.com/watch?v=9d22y\_kWjyE](https://www.youtube.com/watch?v=9d22y_kWjyE)

GitHub ‚Üí¬†[https://github.com/Burla-Cloud/burla](https://github.com/Burla-Cloud/burla)  
Docs ‚Üí¬†[https://docs.burla.dev](https://docs.burla.dev/)",2025-10-21T10:14:51.958262
1oborpj,https://www.reddit.com/r/Python/comments/1oborpj/i_made_a_python_bot_that_turns_your_text_images/,I made a Python bot that turns your text & images into diagrams right in Telegram.,No_Mongoose_8139,2025-10-21 01:51:22,0,5,"https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project ...","https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project structure, a mind map, or just explain a concept. Every time, I had to open heavy editors like Miro or Figma, which felt like overkill.

So, I decided to build a tool that lives right inside the app I use for communication all day: Telegram.

I'm excited to share my side project: **Diagrammer Bot**. It's a simple yet powerful bot in Python that lets you create diagrams on the fly.

**Here are the key features:**
*   **Text & Image Nodes:** You can create blocks not just from text, but from any image you send.
*   **Full Editing:** Create, connect, edit, and delete both nodes and edges.
*   **Project System:** Save your diagrams with custom names, load them later, or start new ones.
*   **Themes & Export:** Switch between a sleek dark mode and a clean light mode. Export your final diagram as a high-quality PNG.
*   **Open-Source:** The entire project is available on GitHub!

**Tech Stack:** Python, `python-telegram-bot`, `Graphviz` for rendering, and `Pillow` for watermarking.

I would be incredibly grateful for any feedback, feature ideas, or bug reports. And of course, a star ‚≠ê on GitHub would make my day!

*   **Try the bot here:** [https://t.me/diagrammer_robot](https://t.me/diagrammer_robot)
*   **Check out the code on GitHub:** [https://github.com/Lixher/Diagrammer-bot](https://github.com/Lixher/Diagrammer-Bot)",2025-10-21T10:14:51.958556
1oborib,https://www.reddit.com/r/Python/comments/1oborib/i_built_a_persistent_kv_store_in_pure_python/,I built a Persistent KV Store in Pure Python,vollhard-natta,2025-10-21 01:51:07,35,1,"Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been work...","Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been working on for the past few months. It is a lightweight, persistent key-value storage engine in Python, built from scratch to understand and implement the Log-Structured Merge-tree (LSM-tree) architecture. The project, which is fully open-source, is explicitly optimized for write-heavy workloads. 



# Core Architecture:

The engine implements the three fundamental LSM components: the **Write Ahead Log (WAL)** for durability, an in-memory **Memtable** (using `SortedDict` for sorted writes), and immutable persistent **SSTables (Sorted String Tables)**.

Some features that I'm proud of:

* **Async Compaction**: Merging and compaction are handled by a **separate background worker thread**. The process itself takes a hybrid approach.
* **Client/Server Model**: The entire storage engine runs behind a **FastAPI server**. This allows multiple clients to connect via REST APIs or the included CLI tool.
* **Efficient Range Queries**: Added full support for range queries from `start_key` to `end_key`. This is achieved via a memory-efficient **k-way merge iterator** that combines results from the Memtable and all SSTables. The FastAPI server delivers the results using a `StreamingResponse` to prevent memory exhaustion for large result sets.
* **Bloom Filter**: Implemented a **Bloom Filter** for each SSTable to drastically reduce disk I/O by confirming that a key definitely does not exist before attempting a disk seek.
* **Binary Storage**: SSTables now use **Msgpack binary format** instead of JSON for smaller file sizes and reduced CPU load during serialization/deserialization.

My favourite part of the project is that I actually got to see a practical implementation of [Merge Sorted Arrays - GeeksforGeeks](https://www.geeksforgeeks.org/dsa/merge-k-sorted-arrays/). This is a pretty popular interview question and to see DSA being actually implemented is a crazy moment.

# Get Started

    pip install lsm_storage_engine_key_value_store

**Usage via CLI/Server:**

1. **Terminal 1 (Server):** `lsm-server`
2. **Terminal 2 (Client):** `lsm-cli` (Follow the CLI help for commands).

# Looking for Feedback

I'd love to hear your thoughts about this implementation and how I can make it better and what features I can add in later versions. Ideas and constructive criticism are always welcome. I'm also looking for contributors, if anyone is interested, please feel free to PM and we can discuss.

Repo link: [Shashank1985/storage-engine](https://github.com/Shashank1985/storage-engine)  
Thanks!!",2025-10-21T10:14:51.958617
1obo3rg,https://www.reddit.com/r/Python/comments/1obo3rg/kryypto_an_open_source_python_text_editor/,Kryypto an open source python text editor.,SxxVe,2025-10-21 01:21:30,3,5,"Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
*...","Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
* Full Keyboard Support ‚Äì no need for the mouse, every feature is accessible via hotkeys
* Discord presence
* Live MarkDown Preview
* Session Restore
* Custom Styling
   * `config\configuration.cfg` for editor settings
   * CSS for theme and style customization
* Editing Tools
   * Find text in file
   * Jump to line
   * Adjustable cursor (color & width)
   * Configurable animations (types & duration)
* Git & GitHub Integration
   * View total commits
   * See last commit message & date
   * Track file changes directly inside the editor
* Productivity Features
   * Autocompleter
   * Builtin Terminal
   * Docstring panel (hover to see function/class docstring)
   * Tab-based file switching
   * Bookmarking lines
   * Custom title bar
* Syntax Highlighting for
   * Python
   * CSS
   * JSON
   * Config files
   * Markdown

Target Audience

* Developers who prefer keyboard-driven workflows (no mouse required)
* Users looking for a lightweight alternative to heavier IDEs
* People who want to customize their editor with CSS and configuration settings
* Anyone experimenting with Python-based editors or open-source text editing tools

# Comparison:

* Lightweight ‚Äì minimal overhead, focused on speed
* Highly customizable ‚Äì styling via CSS and config files
* Keyboard-centric ‚Äì designed to be fully usable without a mouse

  
github repo: [https://github.com/NaturalCapsule/Kryypto](https://github.com/NaturalCapsule/Kryypto)

  
website: [https://naturalcapsule.github.io/Kryypto/](https://naturalcapsule.github.io/Kryypto/)",2025-10-21T10:14:51.958695
1obo0ze,https://www.reddit.com/r/Python/comments/1obo0ze/forgetting_python/,Forgetting Python,Ashamed-Society-2875,2025-10-21 01:17:52,0,4,"I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping f...","I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping for college exams , now when i come back to python it feels i have lost my level and my touch i feel like fkn loser , all those hrs spent in 8th grade for nothing , i forgot a lot , is it common or just me???",2025-10-21T10:14:51.958753
1obzlam,https://www.reddit.com/r/Python/comments/1obzlam/about_me_and_the_order_i_code_in/,About Me (and the order i code in),Consistent_Hall631,2025-10-21 09:13:32,0,4,"hi, i recently started python, and i am really happy, i enjoy it very much and it has become a hobby,

the order i code in: 1: imports 2 variables: 3:...","hi, i recently started python, and i am really happy, i enjoy it very much and it has become a hobby,

the order i code in: 1: imports 2 variables: 3: normal code (print, lists etc) 4: if/else statements. (i put notes at the tops of each section.)",2025-10-21T10:16:29.529745
1obxzya,https://www.reddit.com/r/Python/comments/1obxzya/tuesday_daily_thread_advanced_questions/,Tuesday Daily Thread: Advanced questions,AutoModerator,2025-10-21 08:00:30,1,0,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about ...","# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",2025-10-21T10:16:29.529807
1obrz11,https://www.reddit.com/r/Python/comments/1obrz11/assemblytominecraftcommandblockcompiler_python/,Assembly-to-Minecraft-Command-Block-Compiler (Python) ‚Äî updated ‚Äî testers & contributors wanted,bowser04410,2025-10-21 03:57:47,4,0,"¬†I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedba...","I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedback, and contributors. Repo:¬†[https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler](https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler)

What My Project Does:

* Parses a tiny assembly-style language (labels, arithmetic, branches, simple I/O) and emits Minecraft command sequences tailored for command blocks.
* Produces low-level, inspectable output so you can see how program logic maps to in-game command-block logic.
* Implemented in Python for readability and easy contribution.

Target Audience:

* Minecraft command-block creators who want to run low-level programs without mods.
* Hobbyist compiler writers and learners looking for a compact Python codegen example.
* Contributors interested in parsing, code generation, testing strategies, or command optimization.
* This is an educational/hobby tool for small demos and experiments ‚Äî not a production compiler for large-scale programs.

Comparison (how it differs from alternatives):

* Assembly-focused: unlike high-level language‚ÜíMinecraft tools, it targets an assembly-like input so outputs are low-level and easy to debug in command blocks.
* Python-first and lightweight: prioritizes clarity and contributor-friendliness over performance.
* Command-block oriented: designed to work with vanilla in-game command blocks (does not target datapacks or mods).

How to help:

* Test: run examples, try outputs in a world, and note Minecraft version and exact steps when something fails.
* Report: open issues with minimal reproduction files and steps.
* Contribute: PRs welcome for bug fixes, examples, optimizations, docs, or tests ‚Äî look for good-first-issue.",2025-10-21T10:16:29.529884
1obqtmz,https://www.reddit.com/r/Python/comments/1obqtmz/has_any_library_emerged_as_the_replacement_for/,Has any library emerged as the replacement for Poliastro?,KerPop42,2025-10-21 03:15:23,2,2,"I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-...","I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-go. Even if you restrict yourself to 3.11 you *also* have to go back to pip <24.1 because of how some package requirements are written. I've looked around and can't find any other orbital dynamics libraries that are more than personal projects. Is the field just dead in python?",2025-10-21T10:16:29.529948
1obprx2,https://www.reddit.com/r/Python/comments/1obprx2/building_an_opensource_observability_tool_for/,Building an open-source observability tool for multi-agent systems - looking for feedback,Standard_Career_8603,2025-10-21 02:35:45,4,4,"I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-sour...","I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-source observability tool.   
  
**What it does**:  
\- Tracks information flow between agents   
\- Shows which tools are being called with what parameters   
\- Monitors how prompt changes affect agent behavior   
\- Works in both development and production   
  
**The gap I'm trying to fill**: Existing tools (LangSmith, LangFuse, AgentOps) are great at LLM observability (tokens, costs, latency), but I feel like they don't help much with multi-agent coordination. They show you **what** happened but not **why** agents failed to coordinate.   
  
  
**Looking for feedback**:  
1. Have you built multi-agent systems? What do you use for debugging?   
2. Does this solve a real problem or am I overengineering?   
3. What features would actually make this useful for you? Still early days, but happy to share the repo if folks are interested.",2025-10-21T10:16:29.529972
1obpjnf,https://www.reddit.com/r/Python/comments/1obpjnf/i_built_a_tool_that_runs_your_python_function_on/,i built a tool that runs your python function on 10k vms in parallel with one line of code.,Ok_Post_149,2025-10-21 02:25:33,11,8,"# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to ...","# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to hand it over to DevOps, the backlog would grow, and overall throughput would tank.

So I built **Burla**, the simplest cluster compute software that lets even Python beginners run code on massive clusters in the cloud. It‚Äôs one function with two parameters: the function and the inputs. You can bring your own Docker image, set hardware requirements, and run jobs as background tasks so you can fire and forget. Responses are fast, and you can call a million simple functions in just a few seconds.

Burla is built for embarrassingly parallel workloads like preprocessing data, hyperparameter tuning, and batch inference.

# Target Audience

Engineers, data scientists, and analysts who want to scale their code in production or research environments without dealing with infrastructure.

# Comparison

Unlike Ray or Dask, Burla doesn‚Äôt require cluster setup, orchestration, or YAML configs. It‚Äôs just:

    from burla import remote_parallel_map
    remote_parallel_map(func, inputs)
    

That‚Äôs it. It automatically handles distribution, retries, logging, and scaling across up to 10,000 VMs.

# Open Source & Free Credits

Burla is open source, and I‚Äôm improving the installation process. I also created managed versions for testing. If you want to try it, I‚Äôll cover 1,000 CPU hours and 100 GPU hours. Email me at [joe@burla.dev]() if interested.

Here‚Äôs a short intro video:  
[https://www.youtube.com/watch?v=9d22y\_kWjyE](https://www.youtube.com/watch?v=9d22y_kWjyE)

GitHub ‚Üí¬†[https://github.com/Burla-Cloud/burla](https://github.com/Burla-Cloud/burla)  
Docs ‚Üí¬†[https://docs.burla.dev](https://docs.burla.dev/)",2025-10-21T10:16:29.530009
1oborpj,https://www.reddit.com/r/Python/comments/1oborpj/i_made_a_python_bot_that_turns_your_text_images/,I made a Python bot that turns your text & images into diagrams right in Telegram.,No_Mongoose_8139,2025-10-21 01:51:22,0,5,"https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project ...","https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project structure, a mind map, or just explain a concept. Every time, I had to open heavy editors like Miro or Figma, which felt like overkill.

So, I decided to build a tool that lives right inside the app I use for communication all day: Telegram.

I'm excited to share my side project: **Diagrammer Bot**. It's a simple yet powerful bot in Python that lets you create diagrams on the fly.

**Here are the key features:**
*   **Text & Image Nodes:** You can create blocks not just from text, but from any image you send.
*   **Full Editing:** Create, connect, edit, and delete both nodes and edges.
*   **Project System:** Save your diagrams with custom names, load them later, or start new ones.
*   **Themes & Export:** Switch between a sleek dark mode and a clean light mode. Export your final diagram as a high-quality PNG.
*   **Open-Source:** The entire project is available on GitHub!

**Tech Stack:** Python, `python-telegram-bot`, `Graphviz` for rendering, and `Pillow` for watermarking.

I would be incredibly grateful for any feedback, feature ideas, or bug reports. And of course, a star ‚≠ê on GitHub would make my day!

*   **Try the bot here:** [https://t.me/diagrammer_robot](https://t.me/diagrammer_robot)
*   **Check out the code on GitHub:** [https://github.com/Lixher/Diagrammer-bot](https://github.com/Lixher/Diagrammer-Bot)",2025-10-21T10:16:29.530281
1oborib,https://www.reddit.com/r/Python/comments/1oborib/i_built_a_persistent_kv_store_in_pure_python/,I built a Persistent KV Store in Pure Python,vollhard-natta,2025-10-21 01:51:07,32,1,"Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been work...","Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been working on for the past few months. It is a lightweight, persistent key-value storage engine in Python, built from scratch to understand and implement the Log-Structured Merge-tree (LSM-tree) architecture. The project, which is fully open-source, is explicitly optimized for write-heavy workloads. 



# Core Architecture:

The engine implements the three fundamental LSM components: the **Write Ahead Log (WAL)** for durability, an in-memory **Memtable** (using `SortedDict` for sorted writes), and immutable persistent **SSTables (Sorted String Tables)**.

Some features that I'm proud of:

* **Async Compaction**: Merging and compaction are handled by a **separate background worker thread**. The process itself takes a hybrid approach.
* **Client/Server Model**: The entire storage engine runs behind a **FastAPI server**. This allows multiple clients to connect via REST APIs or the included CLI tool.
* **Efficient Range Queries**: Added full support for range queries from `start_key` to `end_key`. This is achieved via a memory-efficient **k-way merge iterator** that combines results from the Memtable and all SSTables. The FastAPI server delivers the results using a `StreamingResponse` to prevent memory exhaustion for large result sets.
* **Bloom Filter**: Implemented a **Bloom Filter** for each SSTable to drastically reduce disk I/O by confirming that a key definitely does not exist before attempting a disk seek.
* **Binary Storage**: SSTables now use **Msgpack binary format** instead of JSON for smaller file sizes and reduced CPU load during serialization/deserialization.

My favourite part of the project is that I actually got to see a practical implementation of [Merge Sorted Arrays - GeeksforGeeks](https://www.geeksforgeeks.org/dsa/merge-k-sorted-arrays/). This is a pretty popular interview question and to see DSA being actually implemented is a crazy moment.

# Get Started

    pip install lsm_storage_engine_key_value_store

**Usage via CLI/Server:**

1. **Terminal 1 (Server):** `lsm-server`
2. **Terminal 2 (Client):** `lsm-cli` (Follow the CLI help for commands).

# Looking for Feedback

I'd love to hear your thoughts about this implementation and how I can make it better and what features I can add in later versions. Ideas and constructive criticism are always welcome. I'm also looking for contributors, if anyone is interested, please feel free to PM and we can discuss.

Repo link: [Shashank1985/storage-engine](https://github.com/Shashank1985/storage-engine)  
Thanks!!",2025-10-21T10:16:29.530341
1obo3rg,https://www.reddit.com/r/Python/comments/1obo3rg/kryypto_an_open_source_python_text_editor/,Kryypto an open source python text editor.,SxxVe,2025-10-21 01:21:30,3,5,"Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
*...","Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
* Full Keyboard Support ‚Äì no need for the mouse, every feature is accessible via hotkeys
* Discord presence
* Live MarkDown Preview
* Session Restore
* Custom Styling
   * `config\configuration.cfg` for editor settings
   * CSS for theme and style customization
* Editing Tools
   * Find text in file
   * Jump to line
   * Adjustable cursor (color & width)
   * Configurable animations (types & duration)
* Git & GitHub Integration
   * View total commits
   * See last commit message & date
   * Track file changes directly inside the editor
* Productivity Features
   * Autocompleter
   * Builtin Terminal
   * Docstring panel (hover to see function/class docstring)
   * Tab-based file switching
   * Bookmarking lines
   * Custom title bar
* Syntax Highlighting for
   * Python
   * CSS
   * JSON
   * Config files
   * Markdown

Target Audience

* Developers who prefer keyboard-driven workflows (no mouse required)
* Users looking for a lightweight alternative to heavier IDEs
* People who want to customize their editor with CSS and configuration settings
* Anyone experimenting with Python-based editors or open-source text editing tools

# Comparison:

* Lightweight ‚Äì minimal overhead, focused on speed
* Highly customizable ‚Äì styling via CSS and config files
* Keyboard-centric ‚Äì designed to be fully usable without a mouse

  
github repo: [https://github.com/NaturalCapsule/Kryypto](https://github.com/NaturalCapsule/Kryypto)

  
website: [https://naturalcapsule.github.io/Kryypto/](https://naturalcapsule.github.io/Kryypto/)",2025-10-21T10:16:29.530416
1obo0ze,https://www.reddit.com/r/Python/comments/1obo0ze/forgetting_python/,Forgetting Python,Ashamed-Society-2875,2025-10-21 01:17:52,0,4,"I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping f...","I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping for college exams , now when i come back to python it feels i have lost my level and my touch i feel like fkn loser , all those hrs spent in 8th grade for nothing , i forgot a lot , is it common or just me???",2025-10-21T10:16:29.530473
1obzlam,https://www.reddit.com/r/Python/comments/1obzlam/about_me_and_the_order_i_code_in/,About Me (and the order i code in),Consistent_Hall631,2025-10-21 09:13:32,0,4,"hi, i recently started python, and i am really happy, i enjoy it very much and it has become a hobby,

the order i code in: 1: imports 2 variables: 3:...","hi, i recently started python, and i am really happy, i enjoy it very much and it has become a hobby,

the order i code in: 1: imports 2 variables: 3: normal code (print, lists etc) 4: if/else statements. (i put notes at the tops of each section.)",2025-10-21T10:18:01.465510
1obxzya,https://www.reddit.com/r/Python/comments/1obxzya/tuesday_daily_thread_advanced_questions/,Tuesday Daily Thread: Advanced questions,AutoModerator,2025-10-21 08:00:30,1,0,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about ...","# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",2025-10-21T10:18:01.465571
1obrz11,https://www.reddit.com/r/Python/comments/1obrz11/assemblytominecraftcommandblockcompiler_python/,Assembly-to-Minecraft-Command-Block-Compiler (Python) ‚Äî updated ‚Äî testers & contributors wanted,bowser04410,2025-10-21 03:57:47,5,0,"¬†I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedba...","I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedback, and contributors. Repo:¬†[https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler](https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler)

What My Project Does:

* Parses a tiny assembly-style language (labels, arithmetic, branches, simple I/O) and emits Minecraft command sequences tailored for command blocks.
* Produces low-level, inspectable output so you can see how program logic maps to in-game command-block logic.
* Implemented in Python for readability and easy contribution.

Target Audience:

* Minecraft command-block creators who want to run low-level programs without mods.
* Hobbyist compiler writers and learners looking for a compact Python codegen example.
* Contributors interested in parsing, code generation, testing strategies, or command optimization.
* This is an educational/hobby tool for small demos and experiments ‚Äî not a production compiler for large-scale programs.

Comparison (how it differs from alternatives):

* Assembly-focused: unlike high-level language‚ÜíMinecraft tools, it targets an assembly-like input so outputs are low-level and easy to debug in command blocks.
* Python-first and lightweight: prioritizes clarity and contributor-friendliness over performance.
* Command-block oriented: designed to work with vanilla in-game command blocks (does not target datapacks or mods).

How to help:

* Test: run examples, try outputs in a world, and note Minecraft version and exact steps when something fails.
* Report: open issues with minimal reproduction files and steps.
* Contribute: PRs welcome for bug fixes, examples, optimizations, docs, or tests ‚Äî look for good-first-issue.",2025-10-21T10:18:01.465655
1obqtmz,https://www.reddit.com/r/Python/comments/1obqtmz/has_any_library_emerged_as_the_replacement_for/,Has any library emerged as the replacement for Poliastro?,KerPop42,2025-10-21 03:15:23,2,2,"I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-...","I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-go. Even if you restrict yourself to 3.11 you *also* have to go back to pip <24.1 because of how some package requirements are written. I've looked around and can't find any other orbital dynamics libraries that are more than personal projects. Is the field just dead in python?",2025-10-21T10:18:01.465721
1obprx2,https://www.reddit.com/r/Python/comments/1obprx2/building_an_opensource_observability_tool_for/,Building an open-source observability tool for multi-agent systems - looking for feedback,Standard_Career_8603,2025-10-21 02:35:45,4,4,"I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-sour...","I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-source observability tool.   
  
**What it does**:  
\- Tracks information flow between agents   
\- Shows which tools are being called with what parameters   
\- Monitors how prompt changes affect agent behavior   
\- Works in both development and production   
  
**The gap I'm trying to fill**: Existing tools (LangSmith, LangFuse, AgentOps) are great at LLM observability (tokens, costs, latency), but I feel like they don't help much with multi-agent coordination. They show you **what** happened but not **why** agents failed to coordinate.   
  
  
**Looking for feedback**:  
1. Have you built multi-agent systems? What do you use for debugging?   
2. Does this solve a real problem or am I overengineering?   
3. What features would actually make this useful for you? Still early days, but happy to share the repo if folks are interested.",2025-10-21T10:18:01.465746
1obpjnf,https://www.reddit.com/r/Python/comments/1obpjnf/i_built_a_tool_that_runs_your_python_function_on/,i built a tool that runs your python function on 10k vms in parallel with one line of code.,Ok_Post_149,2025-10-21 02:25:33,11,8,"# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to ...","# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to hand it over to DevOps, the backlog would grow, and overall throughput would tank.

So I built **Burla**, the simplest cluster compute software that lets even Python beginners run code on massive clusters in the cloud. It‚Äôs one function with two parameters: the function and the inputs. You can bring your own Docker image, set hardware requirements, and run jobs as background tasks so you can fire and forget. Responses are fast, and you can call a million simple functions in just a few seconds.

Burla is built for embarrassingly parallel workloads like preprocessing data, hyperparameter tuning, and batch inference.

# Target Audience

Engineers, data scientists, and analysts who want to scale their code in production or research environments without dealing with infrastructure.

# Comparison

Unlike Ray or Dask, Burla doesn‚Äôt require cluster setup, orchestration, or YAML configs. It‚Äôs just:

    from burla import remote_parallel_map
    remote_parallel_map(func, inputs)
    

That‚Äôs it. It automatically handles distribution, retries, logging, and scaling across up to 10,000 VMs.

# Open Source & Free Credits

Burla is open source, and I‚Äôm improving the installation process. I also created managed versions for testing. If you want to try it, I‚Äôll cover 1,000 CPU hours and 100 GPU hours. Email me at [joe@burla.dev]() if interested.

Here‚Äôs a short intro video:  
[https://www.youtube.com/watch?v=9d22y\_kWjyE](https://www.youtube.com/watch?v=9d22y_kWjyE)

GitHub ‚Üí¬†[https://github.com/Burla-Cloud/burla](https://github.com/Burla-Cloud/burla)  
Docs ‚Üí¬†[https://docs.burla.dev](https://docs.burla.dev/)",2025-10-21T10:18:01.465784
1oborpj,https://www.reddit.com/r/Python/comments/1oborpj/i_made_a_python_bot_that_turns_your_text_images/,I made a Python bot that turns your text & images into diagrams right in Telegram.,No_Mongoose_8139,2025-10-21 01:51:22,0,5,"https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project ...","https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project structure, a mind map, or just explain a concept. Every time, I had to open heavy editors like Miro or Figma, which felt like overkill.

So, I decided to build a tool that lives right inside the app I use for communication all day: Telegram.

I'm excited to share my side project: **Diagrammer Bot**. It's a simple yet powerful bot in Python that lets you create diagrams on the fly.

**Here are the key features:**
*   **Text & Image Nodes:** You can create blocks not just from text, but from any image you send.
*   **Full Editing:** Create, connect, edit, and delete both nodes and edges.
*   **Project System:** Save your diagrams with custom names, load them later, or start new ones.
*   **Themes & Export:** Switch between a sleek dark mode and a clean light mode. Export your final diagram as a high-quality PNG.
*   **Open-Source:** The entire project is available on GitHub!

**Tech Stack:** Python, `python-telegram-bot`, `Graphviz` for rendering, and `Pillow` for watermarking.

I would be incredibly grateful for any feedback, feature ideas, or bug reports. And of course, a star ‚≠ê on GitHub would make my day!

*   **Try the bot here:** [https://t.me/diagrammer_robot](https://t.me/diagrammer_robot)
*   **Check out the code on GitHub:** [https://github.com/Lixher/Diagrammer-bot](https://github.com/Lixher/Diagrammer-Bot)",2025-10-21T10:18:01.466081
1oborib,https://www.reddit.com/r/Python/comments/1oborib/i_built_a_persistent_kv_store_in_pure_python/,I built a Persistent KV Store in Pure Python,vollhard-natta,2025-10-21 01:51:07,31,1,"Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been work...","Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been working on for the past few months. It is a lightweight, persistent key-value storage engine in Python, built from scratch to understand and implement the Log-Structured Merge-tree (LSM-tree) architecture. The project, which is fully open-source, is explicitly optimized for write-heavy workloads. 



# Core Architecture:

The engine implements the three fundamental LSM components: the **Write Ahead Log (WAL)** for durability, an in-memory **Memtable** (using `SortedDict` for sorted writes), and immutable persistent **SSTables (Sorted String Tables)**.

Some features that I'm proud of:

* **Async Compaction**: Merging and compaction are handled by a **separate background worker thread**. The process itself takes a hybrid approach.
* **Client/Server Model**: The entire storage engine runs behind a **FastAPI server**. This allows multiple clients to connect via REST APIs or the included CLI tool.
* **Efficient Range Queries**: Added full support for range queries from `start_key` to `end_key`. This is achieved via a memory-efficient **k-way merge iterator** that combines results from the Memtable and all SSTables. The FastAPI server delivers the results using a `StreamingResponse` to prevent memory exhaustion for large result sets.
* **Bloom Filter**: Implemented a **Bloom Filter** for each SSTable to drastically reduce disk I/O by confirming that a key definitely does not exist before attempting a disk seek.
* **Binary Storage**: SSTables now use **Msgpack binary format** instead of JSON for smaller file sizes and reduced CPU load during serialization/deserialization.

My favourite part of the project is that I actually got to see a practical implementation of [Merge Sorted Arrays - GeeksforGeeks](https://www.geeksforgeeks.org/dsa/merge-k-sorted-arrays/). This is a pretty popular interview question and to see DSA being actually implemented is a crazy moment.

# Get Started

    pip install lsm_storage_engine_key_value_store

**Usage via CLI/Server:**

1. **Terminal 1 (Server):** `lsm-server`
2. **Terminal 2 (Client):** `lsm-cli` (Follow the CLI help for commands).

# Looking for Feedback

I'd love to hear your thoughts about this implementation and how I can make it better and what features I can add in later versions. Ideas and constructive criticism are always welcome. I'm also looking for contributors, if anyone is interested, please feel free to PM and we can discuss.

Repo link: [Shashank1985/storage-engine](https://github.com/Shashank1985/storage-engine)  
Thanks!!",2025-10-21T10:18:01.466142
1obo3rg,https://www.reddit.com/r/Python/comments/1obo3rg/kryypto_an_open_source_python_text_editor/,Kryypto an open source python text editor.,SxxVe,2025-10-21 01:21:30,3,5,"Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
*...","Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
* Full Keyboard Support ‚Äì no need for the mouse, every feature is accessible via hotkeys
* Discord presence
* Live MarkDown Preview
* Session Restore
* Custom Styling
   * `config\configuration.cfg` for editor settings
   * CSS for theme and style customization
* Editing Tools
   * Find text in file
   * Jump to line
   * Adjustable cursor (color & width)
   * Configurable animations (types & duration)
* Git & GitHub Integration
   * View total commits
   * See last commit message & date
   * Track file changes directly inside the editor
* Productivity Features
   * Autocompleter
   * Builtin Terminal
   * Docstring panel (hover to see function/class docstring)
   * Tab-based file switching
   * Bookmarking lines
   * Custom title bar
* Syntax Highlighting for
   * Python
   * CSS
   * JSON
   * Config files
   * Markdown

Target Audience

* Developers who prefer keyboard-driven workflows (no mouse required)
* Users looking for a lightweight alternative to heavier IDEs
* People who want to customize their editor with CSS and configuration settings
* Anyone experimenting with Python-based editors or open-source text editing tools

# Comparison:

* Lightweight ‚Äì minimal overhead, focused on speed
* Highly customizable ‚Äì styling via CSS and config files
* Keyboard-centric ‚Äì designed to be fully usable without a mouse

  
github repo: [https://github.com/NaturalCapsule/Kryypto](https://github.com/NaturalCapsule/Kryypto)

  
website: [https://naturalcapsule.github.io/Kryypto/](https://naturalcapsule.github.io/Kryypto/)",2025-10-21T10:18:01.466214
1obo0ze,https://www.reddit.com/r/Python/comments/1obo0ze/forgetting_python/,Forgetting Python,Ashamed-Society-2875,2025-10-21 01:17:52,0,4,"I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping f...","I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping for college exams , now when i come back to python it feels i have lost my level and my touch i feel like fkn loser , all those hrs spent in 8th grade for nothing , i forgot a lot , is it common or just me???",2025-10-21T10:18:01.466276
1obzlam,https://www.reddit.com/r/Python/comments/1obzlam/about_me_and_the_order_i_code_in/,About Me (and the order i code in),Consistent_Hall631,2025-10-21 09:13:32,0,4,"hi, i recently started python, and i am really happy, i enjoy it very much and it has become a hobby,

the order i code in: 1: imports 2 variables: 3:...","hi, i recently started python, and i am really happy, i enjoy it very much and it has become a hobby,

the order i code in: 1: imports 2 variables: 3: normal code (print, lists etc) 4: if/else statements. (i put notes at the tops of each section.)",2025-10-21T10:19:26.016594
1obxzya,https://www.reddit.com/r/Python/comments/1obxzya/tuesday_daily_thread_advanced_questions/,Tuesday Daily Thread: Advanced questions,AutoModerator,2025-10-21 08:00:30,1,0,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about ...","# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",2025-10-21T10:19:26.016644
1obrz11,https://www.reddit.com/r/Python/comments/1obrz11/assemblytominecraftcommandblockcompiler_python/,Assembly-to-Minecraft-Command-Block-Compiler (Python) ‚Äî updated ‚Äî testers & contributors wanted,bowser04410,2025-10-21 03:57:47,2,0,"¬†I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedba...","I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedback, and contributors. Repo:¬†[https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler](https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler)

What My Project Does:

* Parses a tiny assembly-style language (labels, arithmetic, branches, simple I/O) and emits Minecraft command sequences tailored for command blocks.
* Produces low-level, inspectable output so you can see how program logic maps to in-game command-block logic.
* Implemented in Python for readability and easy contribution.

Target Audience:

* Minecraft command-block creators who want to run low-level programs without mods.
* Hobbyist compiler writers and learners looking for a compact Python codegen example.
* Contributors interested in parsing, code generation, testing strategies, or command optimization.
* This is an educational/hobby tool for small demos and experiments ‚Äî not a production compiler for large-scale programs.

Comparison (how it differs from alternatives):

* Assembly-focused: unlike high-level language‚ÜíMinecraft tools, it targets an assembly-like input so outputs are low-level and easy to debug in command blocks.
* Python-first and lightweight: prioritizes clarity and contributor-friendliness over performance.
* Command-block oriented: designed to work with vanilla in-game command blocks (does not target datapacks or mods).

How to help:

* Test: run examples, try outputs in a world, and note Minecraft version and exact steps when something fails.
* Report: open issues with minimal reproduction files and steps.
* Contribute: PRs welcome for bug fixes, examples, optimizations, docs, or tests ‚Äî look for good-first-issue.",2025-10-21T10:19:26.016729
1obqtmz,https://www.reddit.com/r/Python/comments/1obqtmz/has_any_library_emerged_as_the_replacement_for/,Has any library emerged as the replacement for Poliastro?,KerPop42,2025-10-21 03:15:23,2,2,"I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-...","I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-go. Even if you restrict yourself to 3.11 you *also* have to go back to pip <24.1 because of how some package requirements are written. I've looked around and can't find any other orbital dynamics libraries that are more than personal projects. Is the field just dead in python?",2025-10-21T10:19:26.016848
1obprx2,https://www.reddit.com/r/Python/comments/1obprx2/building_an_opensource_observability_tool_for/,Building an open-source observability tool for multi-agent systems - looking for feedback,Standard_Career_8603,2025-10-21 02:35:45,6,4,"I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-sour...","I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-source observability tool.   
  
**What it does**:  
\- Tracks information flow between agents   
\- Shows which tools are being called with what parameters   
\- Monitors how prompt changes affect agent behavior   
\- Works in both development and production   
  
**The gap I'm trying to fill**: Existing tools (LangSmith, LangFuse, AgentOps) are great at LLM observability (tokens, costs, latency), but I feel like they don't help much with multi-agent coordination. They show you **what** happened but not **why** agents failed to coordinate.   
  
  
**Looking for feedback**:  
1. Have you built multi-agent systems? What do you use for debugging?   
2. Does this solve a real problem or am I overengineering?   
3. What features would actually make this useful for you? Still early days, but happy to share the repo if folks are interested.",2025-10-21T10:19:26.016895
1obpjnf,https://www.reddit.com/r/Python/comments/1obpjnf/i_built_a_tool_that_runs_your_python_function_on/,i built a tool that runs your python function on 10k vms in parallel with one line of code.,Ok_Post_149,2025-10-21 02:25:33,12,8,"# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to ...","# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to hand it over to DevOps, the backlog would grow, and overall throughput would tank.

So I built **Burla**, the simplest cluster compute software that lets even Python beginners run code on massive clusters in the cloud. It‚Äôs one function with two parameters: the function and the inputs. You can bring your own Docker image, set hardware requirements, and run jobs as background tasks so you can fire and forget. Responses are fast, and you can call a million simple functions in just a few seconds.

Burla is built for embarrassingly parallel workloads like preprocessing data, hyperparameter tuning, and batch inference.

# Target Audience

Engineers, data scientists, and analysts who want to scale their code in production or research environments without dealing with infrastructure.

# Comparison

Unlike Ray or Dask, Burla doesn‚Äôt require cluster setup, orchestration, or YAML configs. It‚Äôs just:

    from burla import remote_parallel_map
    remote_parallel_map(func, inputs)
    

That‚Äôs it. It automatically handles distribution, retries, logging, and scaling across up to 10,000 VMs.

# Open Source & Free Credits

Burla is open source, and I‚Äôm improving the installation process. I also created managed versions for testing. If you want to try it, I‚Äôll cover 1,000 CPU hours and 100 GPU hours. Email me at [joe@burla.dev]() if interested.

Here‚Äôs a short intro video:  
[https://www.youtube.com/watch?v=9d22y\_kWjyE](https://www.youtube.com/watch?v=9d22y_kWjyE)

GitHub ‚Üí¬†[https://github.com/Burla-Cloud/burla](https://github.com/Burla-Cloud/burla)  
Docs ‚Üí¬†[https://docs.burla.dev](https://docs.burla.dev/)",2025-10-21T10:19:26.016964
1oborpj,https://www.reddit.com/r/Python/comments/1oborpj/i_made_a_python_bot_that_turns_your_text_images/,I made a Python bot that turns your text & images into diagrams right in Telegram.,No_Mongoose_8139,2025-10-21 01:51:22,0,5,"https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project ...","https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project structure, a mind map, or just explain a concept. Every time, I had to open heavy editors like Miro or Figma, which felt like overkill.

So, I decided to build a tool that lives right inside the app I use for communication all day: Telegram.

I'm excited to share my side project: **Diagrammer Bot**. It's a simple yet powerful bot in Python that lets you create diagrams on the fly.

**Here are the key features:**
*   **Text & Image Nodes:** You can create blocks not just from text, but from any image you send.
*   **Full Editing:** Create, connect, edit, and delete both nodes and edges.
*   **Project System:** Save your diagrams with custom names, load them later, or start new ones.
*   **Themes & Export:** Switch between a sleek dark mode and a clean light mode. Export your final diagram as a high-quality PNG.
*   **Open-Source:** The entire project is available on GitHub!

**Tech Stack:** Python, `python-telegram-bot`, `Graphviz` for rendering, and `Pillow` for watermarking.

I would be incredibly grateful for any feedback, feature ideas, or bug reports. And of course, a star ‚≠ê on GitHub would make my day!

*   **Try the bot here:** [https://t.me/diagrammer_robot](https://t.me/diagrammer_robot)
*   **Check out the code on GitHub:** [https://github.com/Lixher/Diagrammer-bot](https://github.com/Lixher/Diagrammer-Bot)",2025-10-21T10:19:26.017239
1oborib,https://www.reddit.com/r/Python/comments/1oborib/i_built_a_persistent_kv_store_in_pure_python/,I built a Persistent KV Store in Pure Python,vollhard-natta,2025-10-21 01:51:07,35,1,"Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been work...","Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been working on for the past few months. It is a lightweight, persistent key-value storage engine in Python, built from scratch to understand and implement the Log-Structured Merge-tree (LSM-tree) architecture. The project, which is fully open-source, is explicitly optimized for write-heavy workloads. 



# Core Architecture:

The engine implements the three fundamental LSM components: the **Write Ahead Log (WAL)** for durability, an in-memory **Memtable** (using `SortedDict` for sorted writes), and immutable persistent **SSTables (Sorted String Tables)**.

Some features that I'm proud of:

* **Async Compaction**: Merging and compaction are handled by a **separate background worker thread**. The process itself takes a hybrid approach.
* **Client/Server Model**: The entire storage engine runs behind a **FastAPI server**. This allows multiple clients to connect via REST APIs or the included CLI tool.
* **Efficient Range Queries**: Added full support for range queries from `start_key` to `end_key`. This is achieved via a memory-efficient **k-way merge iterator** that combines results from the Memtable and all SSTables. The FastAPI server delivers the results using a `StreamingResponse` to prevent memory exhaustion for large result sets.
* **Bloom Filter**: Implemented a **Bloom Filter** for each SSTable to drastically reduce disk I/O by confirming that a key definitely does not exist before attempting a disk seek.
* **Binary Storage**: SSTables now use **Msgpack binary format** instead of JSON for smaller file sizes and reduced CPU load during serialization/deserialization.

My favourite part of the project is that I actually got to see a practical implementation of [Merge Sorted Arrays - GeeksforGeeks](https://www.geeksforgeeks.org/dsa/merge-k-sorted-arrays/). This is a pretty popular interview question and to see DSA being actually implemented is a crazy moment.

# Get Started

    pip install lsm_storage_engine_key_value_store

**Usage via CLI/Server:**

1. **Terminal 1 (Server):** `lsm-server`
2. **Terminal 2 (Client):** `lsm-cli` (Follow the CLI help for commands).

# Looking for Feedback

I'd love to hear your thoughts about this implementation and how I can make it better and what features I can add in later versions. Ideas and constructive criticism are always welcome. I'm also looking for contributors, if anyone is interested, please feel free to PM and we can discuss.

Repo link: [Shashank1985/storage-engine](https://github.com/Shashank1985/storage-engine)  
Thanks!!",2025-10-21T10:19:26.017299
1obo3rg,https://www.reddit.com/r/Python/comments/1obo3rg/kryypto_an_open_source_python_text_editor/,Kryypto an open source python text editor.,SxxVe,2025-10-21 01:21:30,3,5,"Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
*...","Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
* Full Keyboard Support ‚Äì no need for the mouse, every feature is accessible via hotkeys
* Discord presence
* Live MarkDown Preview
* Session Restore
* Custom Styling
   * `config\configuration.cfg` for editor settings
   * CSS for theme and style customization
* Editing Tools
   * Find text in file
   * Jump to line
   * Adjustable cursor (color & width)
   * Configurable animations (types & duration)
* Git & GitHub Integration
   * View total commits
   * See last commit message & date
   * Track file changes directly inside the editor
* Productivity Features
   * Autocompleter
   * Builtin Terminal
   * Docstring panel (hover to see function/class docstring)
   * Tab-based file switching
   * Bookmarking lines
   * Custom title bar
* Syntax Highlighting for
   * Python
   * CSS
   * JSON
   * Config files
   * Markdown

Target Audience

* Developers who prefer keyboard-driven workflows (no mouse required)
* Users looking for a lightweight alternative to heavier IDEs
* People who want to customize their editor with CSS and configuration settings
* Anyone experimenting with Python-based editors or open-source text editing tools

# Comparison:

* Lightweight ‚Äì minimal overhead, focused on speed
* Highly customizable ‚Äì styling via CSS and config files
* Keyboard-centric ‚Äì designed to be fully usable without a mouse

  
github repo: [https://github.com/NaturalCapsule/Kryypto](https://github.com/NaturalCapsule/Kryypto)

  
website: [https://naturalcapsule.github.io/Kryypto/](https://naturalcapsule.github.io/Kryypto/)",2025-10-21T10:19:26.017377
1obo0ze,https://www.reddit.com/r/Python/comments/1obo0ze/forgetting_python/,Forgetting Python,Ashamed-Society-2875,2025-10-21 01:17:52,0,4,"I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping f...","I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping for college exams , now when i come back to python it feels i have lost my level and my touch i feel like fkn loser , all those hrs spent in 8th grade for nothing , i forgot a lot , is it common or just me???",2025-10-21T10:19:26.017433
1obzlam,https://www.reddit.com/r/Python/comments/1obzlam/about_me_and_the_order_i_code_in/,About Me (and the order i code in),Consistent_Hall631,2025-10-21 09:13:32,0,4,"hi, i recently started python, and i am really happy, i enjoy it very much and it has become a hobby,

the order i code in: 1: imports 2 variables: 3:...","hi, i recently started python, and i am really happy, i enjoy it very much and it has become a hobby,

the order i code in: 1: imports 2 variables: 3: normal code (print, lists etc) 4: if/else statements. (i put notes at the tops of each section.)",2025-10-21T10:20:45.610881
1obxzya,https://www.reddit.com/r/Python/comments/1obxzya/tuesday_daily_thread_advanced_questions/,Tuesday Daily Thread: Advanced questions,AutoModerator,2025-10-21 08:00:30,1,0,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about ...","# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",2025-10-21T10:20:45.610931
1obrz11,https://www.reddit.com/r/Python/comments/1obrz11/assemblytominecraftcommandblockcompiler_python/,Assembly-to-Minecraft-Command-Block-Compiler (Python) ‚Äî updated ‚Äî testers & contributors wanted,bowser04410,2025-10-21 03:57:47,2,0,"¬†I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedba...","I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedback, and contributors. Repo:¬†[https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler](https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler)

What My Project Does:

* Parses a tiny assembly-style language (labels, arithmetic, branches, simple I/O) and emits Minecraft command sequences tailored for command blocks.
* Produces low-level, inspectable output so you can see how program logic maps to in-game command-block logic.
* Implemented in Python for readability and easy contribution.

Target Audience:

* Minecraft command-block creators who want to run low-level programs without mods.
* Hobbyist compiler writers and learners looking for a compact Python codegen example.
* Contributors interested in parsing, code generation, testing strategies, or command optimization.
* This is an educational/hobby tool for small demos and experiments ‚Äî not a production compiler for large-scale programs.

Comparison (how it differs from alternatives):

* Assembly-focused: unlike high-level language‚ÜíMinecraft tools, it targets an assembly-like input so outputs are low-level and easy to debug in command blocks.
* Python-first and lightweight: prioritizes clarity and contributor-friendliness over performance.
* Command-block oriented: designed to work with vanilla in-game command blocks (does not target datapacks or mods).

How to help:

* Test: run examples, try outputs in a world, and note Minecraft version and exact steps when something fails.
* Report: open issues with minimal reproduction files and steps.
* Contribute: PRs welcome for bug fixes, examples, optimizations, docs, or tests ‚Äî look for good-first-issue.",2025-10-21T10:20:45.611012
1obqtmz,https://www.reddit.com/r/Python/comments/1obqtmz/has_any_library_emerged_as_the_replacement_for/,Has any library emerged as the replacement for Poliastro?,KerPop42,2025-10-21 03:15:23,2,2,"I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-...","I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-go. Even if you restrict yourself to 3.11 you *also* have to go back to pip <24.1 because of how some package requirements are written. I've looked around and can't find any other orbital dynamics libraries that are more than personal projects. Is the field just dead in python?",2025-10-21T10:20:45.611076
1obprx2,https://www.reddit.com/r/Python/comments/1obprx2/building_an_opensource_observability_tool_for/,Building an open-source observability tool for multi-agent systems - looking for feedback,Standard_Career_8603,2025-10-21 02:35:45,4,4,"I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-sour...","I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-source observability tool.   
  
**What it does**:  
\- Tracks information flow between agents   
\- Shows which tools are being called with what parameters   
\- Monitors how prompt changes affect agent behavior   
\- Works in both development and production   
  
**The gap I'm trying to fill**: Existing tools (LangSmith, LangFuse, AgentOps) are great at LLM observability (tokens, costs, latency), but I feel like they don't help much with multi-agent coordination. They show you **what** happened but not **why** agents failed to coordinate.   
  
  
**Looking for feedback**:  
1. Have you built multi-agent systems? What do you use for debugging?   
2. Does this solve a real problem or am I overengineering?   
3. What features would actually make this useful for you? Still early days, but happy to share the repo if folks are interested.",2025-10-21T10:20:45.611100
1obpjnf,https://www.reddit.com/r/Python/comments/1obpjnf/i_built_a_tool_that_runs_your_python_function_on/,i built a tool that runs your python function on 10k vms in parallel with one line of code.,Ok_Post_149,2025-10-21 02:25:33,12,8,"# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to ...","# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to hand it over to DevOps, the backlog would grow, and overall throughput would tank.

So I built **Burla**, the simplest cluster compute software that lets even Python beginners run code on massive clusters in the cloud. It‚Äôs one function with two parameters: the function and the inputs. You can bring your own Docker image, set hardware requirements, and run jobs as background tasks so you can fire and forget. Responses are fast, and you can call a million simple functions in just a few seconds.

Burla is built for embarrassingly parallel workloads like preprocessing data, hyperparameter tuning, and batch inference.

# Target Audience

Engineers, data scientists, and analysts who want to scale their code in production or research environments without dealing with infrastructure.

# Comparison

Unlike Ray or Dask, Burla doesn‚Äôt require cluster setup, orchestration, or YAML configs. It‚Äôs just:

    from burla import remote_parallel_map
    remote_parallel_map(func, inputs)
    

That‚Äôs it. It automatically handles distribution, retries, logging, and scaling across up to 10,000 VMs.

# Open Source & Free Credits

Burla is open source, and I‚Äôm improving the installation process. I also created managed versions for testing. If you want to try it, I‚Äôll cover 1,000 CPU hours and 100 GPU hours. Email me at [joe@burla.dev]() if interested.

Here‚Äôs a short intro video:  
[https://www.youtube.com/watch?v=9d22y\_kWjyE](https://www.youtube.com/watch?v=9d22y_kWjyE)

GitHub ‚Üí¬†[https://github.com/Burla-Cloud/burla](https://github.com/Burla-Cloud/burla)  
Docs ‚Üí¬†[https://docs.burla.dev](https://docs.burla.dev/)",2025-10-21T10:20:45.611137
1oborpj,https://www.reddit.com/r/Python/comments/1oborpj/i_made_a_python_bot_that_turns_your_text_images/,I made a Python bot that turns your text & images into diagrams right in Telegram.,No_Mongoose_8139,2025-10-21 01:51:22,0,5,"https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project ...","https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project structure, a mind map, or just explain a concept. Every time, I had to open heavy editors like Miro or Figma, which felt like overkill.

So, I decided to build a tool that lives right inside the app I use for communication all day: Telegram.

I'm excited to share my side project: **Diagrammer Bot**. It's a simple yet powerful bot in Python that lets you create diagrams on the fly.

**Here are the key features:**
*   **Text & Image Nodes:** You can create blocks not just from text, but from any image you send.
*   **Full Editing:** Create, connect, edit, and delete both nodes and edges.
*   **Project System:** Save your diagrams with custom names, load them later, or start new ones.
*   **Themes & Export:** Switch between a sleek dark mode and a clean light mode. Export your final diagram as a high-quality PNG.
*   **Open-Source:** The entire project is available on GitHub!

**Tech Stack:** Python, `python-telegram-bot`, `Graphviz` for rendering, and `Pillow` for watermarking.

I would be incredibly grateful for any feedback, feature ideas, or bug reports. And of course, a star ‚≠ê on GitHub would make my day!

*   **Try the bot here:** [https://t.me/diagrammer_robot](https://t.me/diagrammer_robot)
*   **Check out the code on GitHub:** [https://github.com/Lixher/Diagrammer-bot](https://github.com/Lixher/Diagrammer-Bot)",2025-10-21T10:20:45.611395
1oborib,https://www.reddit.com/r/Python/comments/1oborib/i_built_a_persistent_kv_store_in_pure_python/,I built a Persistent KV Store in Pure Python,vollhard-natta,2025-10-21 01:51:07,31,1,"Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been work...","Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been working on for the past few months. It is a lightweight, persistent key-value storage engine in Python, built from scratch to understand and implement the Log-Structured Merge-tree (LSM-tree) architecture. The project, which is fully open-source, is explicitly optimized for write-heavy workloads. 



# Core Architecture:

The engine implements the three fundamental LSM components: the **Write Ahead Log (WAL)** for durability, an in-memory **Memtable** (using `SortedDict` for sorted writes), and immutable persistent **SSTables (Sorted String Tables)**.

Some features that I'm proud of:

* **Async Compaction**: Merging and compaction are handled by a **separate background worker thread**. The process itself takes a hybrid approach.
* **Client/Server Model**: The entire storage engine runs behind a **FastAPI server**. This allows multiple clients to connect via REST APIs or the included CLI tool.
* **Efficient Range Queries**: Added full support for range queries from `start_key` to `end_key`. This is achieved via a memory-efficient **k-way merge iterator** that combines results from the Memtable and all SSTables. The FastAPI server delivers the results using a `StreamingResponse` to prevent memory exhaustion for large result sets.
* **Bloom Filter**: Implemented a **Bloom Filter** for each SSTable to drastically reduce disk I/O by confirming that a key definitely does not exist before attempting a disk seek.
* **Binary Storage**: SSTables now use **Msgpack binary format** instead of JSON for smaller file sizes and reduced CPU load during serialization/deserialization.

My favourite part of the project is that I actually got to see a practical implementation of [Merge Sorted Arrays - GeeksforGeeks](https://www.geeksforgeeks.org/dsa/merge-k-sorted-arrays/). This is a pretty popular interview question and to see DSA being actually implemented is a crazy moment.

# Get Started

    pip install lsm_storage_engine_key_value_store

**Usage via CLI/Server:**

1. **Terminal 1 (Server):** `lsm-server`
2. **Terminal 2 (Client):** `lsm-cli` (Follow the CLI help for commands).

# Looking for Feedback

I'd love to hear your thoughts about this implementation and how I can make it better and what features I can add in later versions. Ideas and constructive criticism are always welcome. I'm also looking for contributors, if anyone is interested, please feel free to PM and we can discuss.

Repo link: [Shashank1985/storage-engine](https://github.com/Shashank1985/storage-engine)  
Thanks!!",2025-10-21T10:20:45.611455
1obo3rg,https://www.reddit.com/r/Python/comments/1obo3rg/kryypto_an_open_source_python_text_editor/,Kryypto an open source python text editor.,SxxVe,2025-10-21 01:21:30,3,5,"Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
*...","Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
* Full Keyboard Support ‚Äì no need for the mouse, every feature is accessible via hotkeys
* Discord presence
* Live MarkDown Preview
* Session Restore
* Custom Styling
   * `config\configuration.cfg` for editor settings
   * CSS for theme and style customization
* Editing Tools
   * Find text in file
   * Jump to line
   * Adjustable cursor (color & width)
   * Configurable animations (types & duration)
* Git & GitHub Integration
   * View total commits
   * See last commit message & date
   * Track file changes directly inside the editor
* Productivity Features
   * Autocompleter
   * Builtin Terminal
   * Docstring panel (hover to see function/class docstring)
   * Tab-based file switching
   * Bookmarking lines
   * Custom title bar
* Syntax Highlighting for
   * Python
   * CSS
   * JSON
   * Config files
   * Markdown

Target Audience

* Developers who prefer keyboard-driven workflows (no mouse required)
* Users looking for a lightweight alternative to heavier IDEs
* People who want to customize their editor with CSS and configuration settings
* Anyone experimenting with Python-based editors or open-source text editing tools

# Comparison:

* Lightweight ‚Äì minimal overhead, focused on speed
* Highly customizable ‚Äì styling via CSS and config files
* Keyboard-centric ‚Äì designed to be fully usable without a mouse

  
github repo: [https://github.com/NaturalCapsule/Kryypto](https://github.com/NaturalCapsule/Kryypto)

  
website: [https://naturalcapsule.github.io/Kryypto/](https://naturalcapsule.github.io/Kryypto/)",2025-10-21T10:20:45.611527
1obo0ze,https://www.reddit.com/r/Python/comments/1obo0ze/forgetting_python/,Forgetting Python,Ashamed-Society-2875,2025-10-21 01:17:52,0,4,"I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping f...","I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping for college exams , now when i come back to python it feels i have lost my level and my touch i feel like fkn loser , all those hrs spent in 8th grade for nothing , i forgot a lot , is it common or just me???",2025-10-21T10:20:45.611585
1obzlam,https://www.reddit.com/r/Python/comments/1obzlam/about_me_and_the_order_i_code_in/,About Me (and the order i code in),Consistent_Hall631,2025-10-21 09:13:32,0,4,"hi, i recently started python, and i am really happy, i enjoy it very much and it has become a hobby,

the order i code in: 1: imports 2 variables: 3:...","hi, i recently started python, and i am really happy, i enjoy it very much and it has become a hobby,

the order i code in: 1: imports 2 variables: 3: normal code (print, lists etc) 4: if/else statements. (i put notes at the tops of each section.)",2025-10-21T10:22:06.601625
1obxzya,https://www.reddit.com/r/Python/comments/1obxzya/tuesday_daily_thread_advanced_questions/,Tuesday Daily Thread: Advanced questions,AutoModerator,2025-10-21 08:00:30,1,0,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about ...","# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",2025-10-21T10:22:06.601680
1obrz11,https://www.reddit.com/r/Python/comments/1obrz11/assemblytominecraftcommandblockcompiler_python/,Assembly-to-Minecraft-Command-Block-Compiler (Python) ‚Äî updated ‚Äî testers & contributors wanted,bowser04410,2025-10-21 03:57:47,3,0,"¬†I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedba...","I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedback, and contributors. Repo:¬†[https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler](https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler)

What My Project Does:

* Parses a tiny assembly-style language (labels, arithmetic, branches, simple I/O) and emits Minecraft command sequences tailored for command blocks.
* Produces low-level, inspectable output so you can see how program logic maps to in-game command-block logic.
* Implemented in Python for readability and easy contribution.

Target Audience:

* Minecraft command-block creators who want to run low-level programs without mods.
* Hobbyist compiler writers and learners looking for a compact Python codegen example.
* Contributors interested in parsing, code generation, testing strategies, or command optimization.
* This is an educational/hobby tool for small demos and experiments ‚Äî not a production compiler for large-scale programs.

Comparison (how it differs from alternatives):

* Assembly-focused: unlike high-level language‚ÜíMinecraft tools, it targets an assembly-like input so outputs are low-level and easy to debug in command blocks.
* Python-first and lightweight: prioritizes clarity and contributor-friendliness over performance.
* Command-block oriented: designed to work with vanilla in-game command blocks (does not target datapacks or mods).

How to help:

* Test: run examples, try outputs in a world, and note Minecraft version and exact steps when something fails.
* Report: open issues with minimal reproduction files and steps.
* Contribute: PRs welcome for bug fixes, examples, optimizations, docs, or tests ‚Äî look for good-first-issue.",2025-10-21T10:22:06.601757
1obqtmz,https://www.reddit.com/r/Python/comments/1obqtmz/has_any_library_emerged_as_the_replacement_for/,Has any library emerged as the replacement for Poliastro?,KerPop42,2025-10-21 03:15:23,2,2,"I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-...","I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-go. Even if you restrict yourself to 3.11 you *also* have to go back to pip <24.1 because of how some package requirements are written. I've looked around and can't find any other orbital dynamics libraries that are more than personal projects. Is the field just dead in python?",2025-10-21T10:22:06.601822
1obprx2,https://www.reddit.com/r/Python/comments/1obprx2/building_an_opensource_observability_tool_for/,Building an open-source observability tool for multi-agent systems - looking for feedback,Standard_Career_8603,2025-10-21 02:35:45,4,4,"I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-sour...","I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-source observability tool.   
  
**What it does**:  
\- Tracks information flow between agents   
\- Shows which tools are being called with what parameters   
\- Monitors how prompt changes affect agent behavior   
\- Works in both development and production   
  
**The gap I'm trying to fill**: Existing tools (LangSmith, LangFuse, AgentOps) are great at LLM observability (tokens, costs, latency), but I feel like they don't help much with multi-agent coordination. They show you **what** happened but not **why** agents failed to coordinate.   
  
  
**Looking for feedback**:  
1. Have you built multi-agent systems? What do you use for debugging?   
2. Does this solve a real problem or am I overengineering?   
3. What features would actually make this useful for you? Still early days, but happy to share the repo if folks are interested.",2025-10-21T10:22:06.601846
1obpjnf,https://www.reddit.com/r/Python/comments/1obpjnf/i_built_a_tool_that_runs_your_python_function_on/,i built a tool that runs your python function on 10k vms in parallel with one line of code.,Ok_Post_149,2025-10-21 02:25:33,13,9,"# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to ...","# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to hand it over to DevOps, the backlog would grow, and overall throughput would tank.

So I built **Burla**, the simplest cluster compute software that lets even Python beginners run code on massive clusters in the cloud. It‚Äôs one function with two parameters: the function and the inputs. You can bring your own Docker image, set hardware requirements, and run jobs as background tasks so you can fire and forget. Responses are fast, and you can call a million simple functions in just a few seconds.

Burla is built for embarrassingly parallel workloads like preprocessing data, hyperparameter tuning, and batch inference.

# Target Audience

Engineers, data scientists, and analysts who want to scale their code in production or research environments without dealing with infrastructure.

# Comparison

Unlike Ray or Dask, Burla doesn‚Äôt require cluster setup, orchestration, or YAML configs. It‚Äôs just:

    from burla import remote_parallel_map
    remote_parallel_map(func, inputs)
    

That‚Äôs it. It automatically handles distribution, retries, logging, and scaling across up to 10,000 VMs.

# Open Source & Free Credits

Burla is open source, and I‚Äôm improving the installation process. I also created managed versions for testing. If you want to try it, I‚Äôll cover 1,000 CPU hours and 100 GPU hours. Email me at [joe@burla.dev]() if interested.

Here‚Äôs a short intro video:  
[https://www.youtube.com/watch?v=9d22y\_kWjyE](https://www.youtube.com/watch?v=9d22y_kWjyE)

GitHub ‚Üí¬†[https://github.com/Burla-Cloud/burla](https://github.com/Burla-Cloud/burla)  
Docs ‚Üí¬†[https://docs.burla.dev](https://docs.burla.dev/)",2025-10-21T10:22:06.601882
1oborpj,https://www.reddit.com/r/Python/comments/1oborpj/i_made_a_python_bot_that_turns_your_text_images/,I made a Python bot that turns your text & images into diagrams right in Telegram.,No_Mongoose_8139,2025-10-21 01:51:22,0,5,"https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project ...","https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project structure, a mind map, or just explain a concept. Every time, I had to open heavy editors like Miro or Figma, which felt like overkill.

So, I decided to build a tool that lives right inside the app I use for communication all day: Telegram.

I'm excited to share my side project: **Diagrammer Bot**. It's a simple yet powerful bot in Python that lets you create diagrams on the fly.

**Here are the key features:**
*   **Text & Image Nodes:** You can create blocks not just from text, but from any image you send.
*   **Full Editing:** Create, connect, edit, and delete both nodes and edges.
*   **Project System:** Save your diagrams with custom names, load them later, or start new ones.
*   **Themes & Export:** Switch between a sleek dark mode and a clean light mode. Export your final diagram as a high-quality PNG.
*   **Open-Source:** The entire project is available on GitHub!

**Tech Stack:** Python, `python-telegram-bot`, `Graphviz` for rendering, and `Pillow` for watermarking.

I would be incredibly grateful for any feedback, feature ideas, or bug reports. And of course, a star ‚≠ê on GitHub would make my day!

*   **Try the bot here:** [https://t.me/diagrammer_robot](https://t.me/diagrammer_robot)
*   **Check out the code on GitHub:** [https://github.com/Lixher/Diagrammer-bot](https://github.com/Lixher/Diagrammer-Bot)",2025-10-21T10:22:06.602152
1oborib,https://www.reddit.com/r/Python/comments/1oborib/i_built_a_persistent_kv_store_in_pure_python/,I built a Persistent KV Store in Pure Python,vollhard-natta,2025-10-21 01:51:07,36,1,"Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been work...","Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been working on for the past few months. It is a lightweight, persistent key-value storage engine in Python, built from scratch to understand and implement the Log-Structured Merge-tree (LSM-tree) architecture. The project, which is fully open-source, is explicitly optimized for write-heavy workloads. 



# Core Architecture:

The engine implements the three fundamental LSM components: the **Write Ahead Log (WAL)** for durability, an in-memory **Memtable** (using `SortedDict` for sorted writes), and immutable persistent **SSTables (Sorted String Tables)**.

Some features that I'm proud of:

* **Async Compaction**: Merging and compaction are handled by a **separate background worker thread**. The process itself takes a hybrid approach.
* **Client/Server Model**: The entire storage engine runs behind a **FastAPI server**. This allows multiple clients to connect via REST APIs or the included CLI tool.
* **Efficient Range Queries**: Added full support for range queries from `start_key` to `end_key`. This is achieved via a memory-efficient **k-way merge iterator** that combines results from the Memtable and all SSTables. The FastAPI server delivers the results using a `StreamingResponse` to prevent memory exhaustion for large result sets.
* **Bloom Filter**: Implemented a **Bloom Filter** for each SSTable to drastically reduce disk I/O by confirming that a key definitely does not exist before attempting a disk seek.
* **Binary Storage**: SSTables now use **Msgpack binary format** instead of JSON for smaller file sizes and reduced CPU load during serialization/deserialization.

My favourite part of the project is that I actually got to see a practical implementation of [Merge Sorted Arrays - GeeksforGeeks](https://www.geeksforgeeks.org/dsa/merge-k-sorted-arrays/). This is a pretty popular interview question and to see DSA being actually implemented is a crazy moment.

# Get Started

    pip install lsm_storage_engine_key_value_store

**Usage via CLI/Server:**

1. **Terminal 1 (Server):** `lsm-server`
2. **Terminal 2 (Client):** `lsm-cli` (Follow the CLI help for commands).

# Looking for Feedback

I'd love to hear your thoughts about this implementation and how I can make it better and what features I can add in later versions. Ideas and constructive criticism are always welcome. I'm also looking for contributors, if anyone is interested, please feel free to PM and we can discuss.

Repo link: [Shashank1985/storage-engine](https://github.com/Shashank1985/storage-engine)  
Thanks!!",2025-10-21T10:22:06.602212
1obo3rg,https://www.reddit.com/r/Python/comments/1obo3rg/kryypto_an_open_source_python_text_editor/,Kryypto an open source python text editor.,SxxVe,2025-10-21 01:21:30,3,5,"Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
*...","Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
* Full Keyboard Support ‚Äì no need for the mouse, every feature is accessible via hotkeys
* Discord presence
* Live MarkDown Preview
* Session Restore
* Custom Styling
   * `config\configuration.cfg` for editor settings
   * CSS for theme and style customization
* Editing Tools
   * Find text in file
   * Jump to line
   * Adjustable cursor (color & width)
   * Configurable animations (types & duration)
* Git & GitHub Integration
   * View total commits
   * See last commit message & date
   * Track file changes directly inside the editor
* Productivity Features
   * Autocompleter
   * Builtin Terminal
   * Docstring panel (hover to see function/class docstring)
   * Tab-based file switching
   * Bookmarking lines
   * Custom title bar
* Syntax Highlighting for
   * Python
   * CSS
   * JSON
   * Config files
   * Markdown

Target Audience

* Developers who prefer keyboard-driven workflows (no mouse required)
* Users looking for a lightweight alternative to heavier IDEs
* People who want to customize their editor with CSS and configuration settings
* Anyone experimenting with Python-based editors or open-source text editing tools

# Comparison:

* Lightweight ‚Äì minimal overhead, focused on speed
* Highly customizable ‚Äì styling via CSS and config files
* Keyboard-centric ‚Äì designed to be fully usable without a mouse

  
github repo: [https://github.com/NaturalCapsule/Kryypto](https://github.com/NaturalCapsule/Kryypto)

  
website: [https://naturalcapsule.github.io/Kryypto/](https://naturalcapsule.github.io/Kryypto/)",2025-10-21T10:22:06.602290
1obo0ze,https://www.reddit.com/r/Python/comments/1obo0ze/forgetting_python/,Forgetting Python,Ashamed-Society-2875,2025-10-21 01:17:52,0,4,"I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping f...","I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping for college exams , now when i come back to python it feels i have lost my level and my touch i feel like fkn loser , all those hrs spent in 8th grade for nothing , i forgot a lot , is it common or just me???",2025-10-21T10:22:06.602346
1obzlam,https://www.reddit.com/r/Python/comments/1obzlam/about_me_and_the_order_i_code_in/,About Me (and the order i code in),Consistent_Hall631,2025-10-21 09:13:32,0,4,"hi, i recently started python, and i am really happy, i enjoy it very much and it has become a hobby,

the order i code in: 1: imports 2 variables: 3:...","hi, i recently started python, and i am really happy, i enjoy it very much and it has become a hobby,

the order i code in: 1: imports 2 variables: 3: normal code (print, lists etc) 4: if/else statements. (i put notes at the tops of each section.)",2025-10-21T10:23:30.421136
1obxzya,https://www.reddit.com/r/Python/comments/1obxzya/tuesday_daily_thread_advanced_questions/,Tuesday Daily Thread: Advanced questions,AutoModerator,2025-10-21 08:00:30,1,0,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about ...","# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",2025-10-21T10:23:30.421179
1obrz11,https://www.reddit.com/r/Python/comments/1obrz11/assemblytominecraftcommandblockcompiler_python/,Assembly-to-Minecraft-Command-Block-Compiler (Python) ‚Äî updated ‚Äî testers & contributors wanted,bowser04410,2025-10-21 03:57:47,2,0,"¬†I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedba...","I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedback, and contributors. Repo:¬†[https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler](https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler)

What My Project Does:

* Parses a tiny assembly-style language (labels, arithmetic, branches, simple I/O) and emits Minecraft command sequences tailored for command blocks.
* Produces low-level, inspectable output so you can see how program logic maps to in-game command-block logic.
* Implemented in Python for readability and easy contribution.

Target Audience:

* Minecraft command-block creators who want to run low-level programs without mods.
* Hobbyist compiler writers and learners looking for a compact Python codegen example.
* Contributors interested in parsing, code generation, testing strategies, or command optimization.
* This is an educational/hobby tool for small demos and experiments ‚Äî not a production compiler for large-scale programs.

Comparison (how it differs from alternatives):

* Assembly-focused: unlike high-level language‚ÜíMinecraft tools, it targets an assembly-like input so outputs are low-level and easy to debug in command blocks.
* Python-first and lightweight: prioritizes clarity and contributor-friendliness over performance.
* Command-block oriented: designed to work with vanilla in-game command blocks (does not target datapacks or mods).

How to help:

* Test: run examples, try outputs in a world, and note Minecraft version and exact steps when something fails.
* Report: open issues with minimal reproduction files and steps.
* Contribute: PRs welcome for bug fixes, examples, optimizations, docs, or tests ‚Äî look for good-first-issue.",2025-10-21T10:23:30.421256
1obqtmz,https://www.reddit.com/r/Python/comments/1obqtmz/has_any_library_emerged_as_the_replacement_for/,Has any library emerged as the replacement for Poliastro?,KerPop42,2025-10-21 03:15:23,2,2,"I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-...","I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-go. Even if you restrict yourself to 3.11 you *also* have to go back to pip <24.1 because of how some package requirements are written. I've looked around and can't find any other orbital dynamics libraries that are more than personal projects. Is the field just dead in python?",2025-10-21T10:23:30.421319
1obprx2,https://www.reddit.com/r/Python/comments/1obprx2/building_an_opensource_observability_tool_for/,Building an open-source observability tool for multi-agent systems - looking for feedback,Standard_Career_8603,2025-10-21 02:35:45,4,4,"I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-sour...","I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-source observability tool.   
  
**What it does**:  
\- Tracks information flow between agents   
\- Shows which tools are being called with what parameters   
\- Monitors how prompt changes affect agent behavior   
\- Works in both development and production   
  
**The gap I'm trying to fill**: Existing tools (LangSmith, LangFuse, AgentOps) are great at LLM observability (tokens, costs, latency), but I feel like they don't help much with multi-agent coordination. They show you **what** happened but not **why** agents failed to coordinate.   
  
  
**Looking for feedback**:  
1. Have you built multi-agent systems? What do you use for debugging?   
2. Does this solve a real problem or am I overengineering?   
3. What features would actually make this useful for you? Still early days, but happy to share the repo if folks are interested.",2025-10-21T10:23:30.421343
1obpjnf,https://www.reddit.com/r/Python/comments/1obpjnf/i_built_a_tool_that_runs_your_python_function_on/,i built a tool that runs your python function on 10k vms in parallel with one line of code.,Ok_Post_149,2025-10-21 02:25:33,11,9,"# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to ...","# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to hand it over to DevOps, the backlog would grow, and overall throughput would tank.

So I built **Burla**, the simplest cluster compute software that lets even Python beginners run code on massive clusters in the cloud. It‚Äôs one function with two parameters: the function and the inputs. You can bring your own Docker image, set hardware requirements, and run jobs as background tasks so you can fire and forget. Responses are fast, and you can call a million simple functions in just a few seconds.

Burla is built for embarrassingly parallel workloads like preprocessing data, hyperparameter tuning, and batch inference.

# Target Audience

Engineers, data scientists, and analysts who want to scale their code in production or research environments without dealing with infrastructure.

# Comparison

Unlike Ray or Dask, Burla doesn‚Äôt require cluster setup, orchestration, or YAML configs. It‚Äôs just:

    from burla import remote_parallel_map
    remote_parallel_map(func, inputs)
    

That‚Äôs it. It automatically handles distribution, retries, logging, and scaling across up to 10,000 VMs.

# Open Source & Free Credits

Burla is open source, and I‚Äôm improving the installation process. I also created managed versions for testing. If you want to try it, I‚Äôll cover 1,000 CPU hours and 100 GPU hours. Email me at [joe@burla.dev]() if interested.

Here‚Äôs a short intro video:  
[https://www.youtube.com/watch?v=9d22y\_kWjyE](https://www.youtube.com/watch?v=9d22y_kWjyE)

GitHub ‚Üí¬†[https://github.com/Burla-Cloud/burla](https://github.com/Burla-Cloud/burla)  
Docs ‚Üí¬†[https://docs.burla.dev](https://docs.burla.dev/)",2025-10-21T10:23:30.421380
1oborpj,https://www.reddit.com/r/Python/comments/1oborpj/i_made_a_python_bot_that_turns_your_text_images/,I made a Python bot that turns your text & images into diagrams right in Telegram.,No_Mongoose_8139,2025-10-21 01:51:22,0,5,"https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project ...","https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project structure, a mind map, or just explain a concept. Every time, I had to open heavy editors like Miro or Figma, which felt like overkill.

So, I decided to build a tool that lives right inside the app I use for communication all day: Telegram.

I'm excited to share my side project: **Diagrammer Bot**. It's a simple yet powerful bot in Python that lets you create diagrams on the fly.

**Here are the key features:**
*   **Text & Image Nodes:** You can create blocks not just from text, but from any image you send.
*   **Full Editing:** Create, connect, edit, and delete both nodes and edges.
*   **Project System:** Save your diagrams with custom names, load them later, or start new ones.
*   **Themes & Export:** Switch between a sleek dark mode and a clean light mode. Export your final diagram as a high-quality PNG.
*   **Open-Source:** The entire project is available on GitHub!

**Tech Stack:** Python, `python-telegram-bot`, `Graphviz` for rendering, and `Pillow` for watermarking.

I would be incredibly grateful for any feedback, feature ideas, or bug reports. And of course, a star ‚≠ê on GitHub would make my day!

*   **Try the bot here:** [https://t.me/diagrammer_robot](https://t.me/diagrammer_robot)
*   **Check out the code on GitHub:** [https://github.com/Lixher/Diagrammer-bot](https://github.com/Lixher/Diagrammer-Bot)",2025-10-21T10:23:30.421640
1oborib,https://www.reddit.com/r/Python/comments/1oborib/i_built_a_persistent_kv_store_in_pure_python/,I built a Persistent KV Store in Pure Python,vollhard-natta,2025-10-21 01:51:07,36,1,"Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been work...","Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been working on for the past few months. It is a lightweight, persistent key-value storage engine in Python, built from scratch to understand and implement the Log-Structured Merge-tree (LSM-tree) architecture. The project, which is fully open-source, is explicitly optimized for write-heavy workloads. 



# Core Architecture:

The engine implements the three fundamental LSM components: the **Write Ahead Log (WAL)** for durability, an in-memory **Memtable** (using `SortedDict` for sorted writes), and immutable persistent **SSTables (Sorted String Tables)**.

Some features that I'm proud of:

* **Async Compaction**: Merging and compaction are handled by a **separate background worker thread**. The process itself takes a hybrid approach.
* **Client/Server Model**: The entire storage engine runs behind a **FastAPI server**. This allows multiple clients to connect via REST APIs or the included CLI tool.
* **Efficient Range Queries**: Added full support for range queries from `start_key` to `end_key`. This is achieved via a memory-efficient **k-way merge iterator** that combines results from the Memtable and all SSTables. The FastAPI server delivers the results using a `StreamingResponse` to prevent memory exhaustion for large result sets.
* **Bloom Filter**: Implemented a **Bloom Filter** for each SSTable to drastically reduce disk I/O by confirming that a key definitely does not exist before attempting a disk seek.
* **Binary Storage**: SSTables now use **Msgpack binary format** instead of JSON for smaller file sizes and reduced CPU load during serialization/deserialization.

My favourite part of the project is that I actually got to see a practical implementation of [Merge Sorted Arrays - GeeksforGeeks](https://www.geeksforgeeks.org/dsa/merge-k-sorted-arrays/). This is a pretty popular interview question and to see DSA being actually implemented is a crazy moment.

# Get Started

    pip install lsm_storage_engine_key_value_store

**Usage via CLI/Server:**

1. **Terminal 1 (Server):** `lsm-server`
2. **Terminal 2 (Client):** `lsm-cli` (Follow the CLI help for commands).

# Looking for Feedback

I'd love to hear your thoughts about this implementation and how I can make it better and what features I can add in later versions. Ideas and constructive criticism are always welcome. I'm also looking for contributors, if anyone is interested, please feel free to PM and we can discuss.

Repo link: [Shashank1985/storage-engine](https://github.com/Shashank1985/storage-engine)  
Thanks!!",2025-10-21T10:23:30.421701
1obo3rg,https://www.reddit.com/r/Python/comments/1obo3rg/kryypto_an_open_source_python_text_editor/,Kryypto an open source python text editor.,SxxVe,2025-10-21 01:21:30,3,5,"Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
*...","Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
* Full Keyboard Support ‚Äì no need for the mouse, every feature is accessible via hotkeys
* Discord presence
* Live MarkDown Preview
* Session Restore
* Custom Styling
   * `config\configuration.cfg` for editor settings
   * CSS for theme and style customization
* Editing Tools
   * Find text in file
   * Jump to line
   * Adjustable cursor (color & width)
   * Configurable animations (types & duration)
* Git & GitHub Integration
   * View total commits
   * See last commit message & date
   * Track file changes directly inside the editor
* Productivity Features
   * Autocompleter
   * Builtin Terminal
   * Docstring panel (hover to see function/class docstring)
   * Tab-based file switching
   * Bookmarking lines
   * Custom title bar
* Syntax Highlighting for
   * Python
   * CSS
   * JSON
   * Config files
   * Markdown

Target Audience

* Developers who prefer keyboard-driven workflows (no mouse required)
* Users looking for a lightweight alternative to heavier IDEs
* People who want to customize their editor with CSS and configuration settings
* Anyone experimenting with Python-based editors or open-source text editing tools

# Comparison:

* Lightweight ‚Äì minimal overhead, focused on speed
* Highly customizable ‚Äì styling via CSS and config files
* Keyboard-centric ‚Äì designed to be fully usable without a mouse

  
github repo: [https://github.com/NaturalCapsule/Kryypto](https://github.com/NaturalCapsule/Kryypto)

  
website: [https://naturalcapsule.github.io/Kryypto/](https://naturalcapsule.github.io/Kryypto/)",2025-10-21T10:23:30.421774
1obo0ze,https://www.reddit.com/r/Python/comments/1obo0ze/forgetting_python/,Forgetting Python,Ashamed-Society-2875,2025-10-21 01:17:52,0,4,"I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping f...","I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping for college exams , now when i come back to python it feels i have lost my level and my touch i feel like fkn loser , all those hrs spent in 8th grade for nothing , i forgot a lot , is it common or just me???",2025-10-21T10:23:30.421851
1obzlam,https://www.reddit.com/r/Python/comments/1obzlam/about_me_and_the_order_i_code_in/,About Me (and the order i code in),Consistent_Hall631,2025-10-21 09:13:32,0,4,"hi, i recently started python, and i am really happy, i enjoy it very much and it has become a hobby,

the order i code in: 1: imports 2 variables: 3:...","hi, i recently started python, and i am really happy, i enjoy it very much and it has become a hobby,

the order i code in: 1: imports 2 variables: 3: normal code (print, lists etc) 4: if/else statements. (i put notes at the tops of each section.)",2025-10-21T10:24:58.388491
1obxzya,https://www.reddit.com/r/Python/comments/1obxzya/tuesday_daily_thread_advanced_questions/,Tuesday Daily Thread: Advanced questions,AutoModerator,2025-10-21 08:00:30,1,0,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about ...","# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",2025-10-21T10:24:58.388538
1obrz11,https://www.reddit.com/r/Python/comments/1obrz11/assemblytominecraftcommandblockcompiler_python/,Assembly-to-Minecraft-Command-Block-Compiler (Python) ‚Äî updated ‚Äî testers & contributors wanted,bowser04410,2025-10-21 03:57:47,3,0,"¬†I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedba...","I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedback, and contributors. Repo:¬†[https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler](https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler)

What My Project Does:

* Parses a tiny assembly-style language (labels, arithmetic, branches, simple I/O) and emits Minecraft command sequences tailored for command blocks.
* Produces low-level, inspectable output so you can see how program logic maps to in-game command-block logic.
* Implemented in Python for readability and easy contribution.

Target Audience:

* Minecraft command-block creators who want to run low-level programs without mods.
* Hobbyist compiler writers and learners looking for a compact Python codegen example.
* Contributors interested in parsing, code generation, testing strategies, or command optimization.
* This is an educational/hobby tool for small demos and experiments ‚Äî not a production compiler for large-scale programs.

Comparison (how it differs from alternatives):

* Assembly-focused: unlike high-level language‚ÜíMinecraft tools, it targets an assembly-like input so outputs are low-level and easy to debug in command blocks.
* Python-first and lightweight: prioritizes clarity and contributor-friendliness over performance.
* Command-block oriented: designed to work with vanilla in-game command blocks (does not target datapacks or mods).

How to help:

* Test: run examples, try outputs in a world, and note Minecraft version and exact steps when something fails.
* Report: open issues with minimal reproduction files and steps.
* Contribute: PRs welcome for bug fixes, examples, optimizations, docs, or tests ‚Äî look for good-first-issue.",2025-10-21T10:24:58.388622
1obqtmz,https://www.reddit.com/r/Python/comments/1obqtmz/has_any_library_emerged_as_the_replacement_for/,Has any library emerged as the replacement for Poliastro?,KerPop42,2025-10-21 03:15:23,2,2,"I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-...","I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-go. Even if you restrict yourself to 3.11 you *also* have to go back to pip <24.1 because of how some package requirements are written. I've looked around and can't find any other orbital dynamics libraries that are more than personal projects. Is the field just dead in python?",2025-10-21T10:24:58.388687
1obprx2,https://www.reddit.com/r/Python/comments/1obprx2/building_an_opensource_observability_tool_for/,Building an open-source observability tool for multi-agent systems - looking for feedback,Standard_Career_8603,2025-10-21 02:35:45,4,4,"I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-sour...","I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-source observability tool.   
  
**What it does**:  
\- Tracks information flow between agents   
\- Shows which tools are being called with what parameters   
\- Monitors how prompt changes affect agent behavior   
\- Works in both development and production   
  
**The gap I'm trying to fill**: Existing tools (LangSmith, LangFuse, AgentOps) are great at LLM observability (tokens, costs, latency), but I feel like they don't help much with multi-agent coordination. They show you **what** happened but not **why** agents failed to coordinate.   
  
  
**Looking for feedback**:  
1. Have you built multi-agent systems? What do you use for debugging?   
2. Does this solve a real problem or am I overengineering?   
3. What features would actually make this useful for you? Still early days, but happy to share the repo if folks are interested.",2025-10-21T10:24:58.388713
1obpjnf,https://www.reddit.com/r/Python/comments/1obpjnf/i_built_a_tool_that_runs_your_python_function_on/,i built a tool that runs your python function on 10k vms in parallel with one line of code.,Ok_Post_149,2025-10-21 02:25:33,9,9,"# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to ...","# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to hand it over to DevOps, the backlog would grow, and overall throughput would tank.

So I built **Burla**, the simplest cluster compute software that lets even Python beginners run code on massive clusters in the cloud. It‚Äôs one function with two parameters: the function and the inputs. You can bring your own Docker image, set hardware requirements, and run jobs as background tasks so you can fire and forget. Responses are fast, and you can call a million simple functions in just a few seconds.

Burla is built for embarrassingly parallel workloads like preprocessing data, hyperparameter tuning, and batch inference.

# Target Audience

Engineers, data scientists, and analysts who want to scale their code in production or research environments without dealing with infrastructure.

# Comparison

Unlike Ray or Dask, Burla doesn‚Äôt require cluster setup, orchestration, or YAML configs. It‚Äôs just:

    from burla import remote_parallel_map
    remote_parallel_map(func, inputs)
    

That‚Äôs it. It automatically handles distribution, retries, logging, and scaling across up to 10,000 VMs.

# Open Source & Free Credits

Burla is open source, and I‚Äôm improving the installation process. I also created managed versions for testing. If you want to try it, I‚Äôll cover 1,000 CPU hours and 100 GPU hours. Email me at [joe@burla.dev]() if interested.

Here‚Äôs a short intro video:  
[https://www.youtube.com/watch?v=9d22y\_kWjyE](https://www.youtube.com/watch?v=9d22y_kWjyE)

GitHub ‚Üí¬†[https://github.com/Burla-Cloud/burla](https://github.com/Burla-Cloud/burla)  
Docs ‚Üí¬†[https://docs.burla.dev](https://docs.burla.dev/)",2025-10-21T10:24:58.388750
1oborpj,https://www.reddit.com/r/Python/comments/1oborpj/i_made_a_python_bot_that_turns_your_text_images/,I made a Python bot that turns your text & images into diagrams right in Telegram.,No_Mongoose_8139,2025-10-21 01:51:22,0,5,"https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project ...","https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project structure, a mind map, or just explain a concept. Every time, I had to open heavy editors like Miro or Figma, which felt like overkill.

So, I decided to build a tool that lives right inside the app I use for communication all day: Telegram.

I'm excited to share my side project: **Diagrammer Bot**. It's a simple yet powerful bot in Python that lets you create diagrams on the fly.

**Here are the key features:**
*   **Text & Image Nodes:** You can create blocks not just from text, but from any image you send.
*   **Full Editing:** Create, connect, edit, and delete both nodes and edges.
*   **Project System:** Save your diagrams with custom names, load them later, or start new ones.
*   **Themes & Export:** Switch between a sleek dark mode and a clean light mode. Export your final diagram as a high-quality PNG.
*   **Open-Source:** The entire project is available on GitHub!

**Tech Stack:** Python, `python-telegram-bot`, `Graphviz` for rendering, and `Pillow` for watermarking.

I would be incredibly grateful for any feedback, feature ideas, or bug reports. And of course, a star ‚≠ê on GitHub would make my day!

*   **Try the bot here:** [https://t.me/diagrammer_robot](https://t.me/diagrammer_robot)
*   **Check out the code on GitHub:** [https://github.com/Lixher/Diagrammer-bot](https://github.com/Lixher/Diagrammer-Bot)",2025-10-21T10:24:58.389021
1oborib,https://www.reddit.com/r/Python/comments/1oborib/i_built_a_persistent_kv_store_in_pure_python/,I built a Persistent KV Store in Pure Python,vollhard-natta,2025-10-21 01:51:07,32,1,"Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been work...","Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been working on for the past few months. It is a lightweight, persistent key-value storage engine in Python, built from scratch to understand and implement the Log-Structured Merge-tree (LSM-tree) architecture. The project, which is fully open-source, is explicitly optimized for write-heavy workloads. 



# Core Architecture:

The engine implements the three fundamental LSM components: the **Write Ahead Log (WAL)** for durability, an in-memory **Memtable** (using `SortedDict` for sorted writes), and immutable persistent **SSTables (Sorted String Tables)**.

Some features that I'm proud of:

* **Async Compaction**: Merging and compaction are handled by a **separate background worker thread**. The process itself takes a hybrid approach.
* **Client/Server Model**: The entire storage engine runs behind a **FastAPI server**. This allows multiple clients to connect via REST APIs or the included CLI tool.
* **Efficient Range Queries**: Added full support for range queries from `start_key` to `end_key`. This is achieved via a memory-efficient **k-way merge iterator** that combines results from the Memtable and all SSTables. The FastAPI server delivers the results using a `StreamingResponse` to prevent memory exhaustion for large result sets.
* **Bloom Filter**: Implemented a **Bloom Filter** for each SSTable to drastically reduce disk I/O by confirming that a key definitely does not exist before attempting a disk seek.
* **Binary Storage**: SSTables now use **Msgpack binary format** instead of JSON for smaller file sizes and reduced CPU load during serialization/deserialization.

My favourite part of the project is that I actually got to see a practical implementation of [Merge Sorted Arrays - GeeksforGeeks](https://www.geeksforgeeks.org/dsa/merge-k-sorted-arrays/). This is a pretty popular interview question and to see DSA being actually implemented is a crazy moment.

# Get Started

    pip install lsm_storage_engine_key_value_store

**Usage via CLI/Server:**

1. **Terminal 1 (Server):** `lsm-server`
2. **Terminal 2 (Client):** `lsm-cli` (Follow the CLI help for commands).

# Looking for Feedback

I'd love to hear your thoughts about this implementation and how I can make it better and what features I can add in later versions. Ideas and constructive criticism are always welcome. I'm also looking for contributors, if anyone is interested, please feel free to PM and we can discuss.

Repo link: [Shashank1985/storage-engine](https://github.com/Shashank1985/storage-engine)  
Thanks!!",2025-10-21T10:24:58.389082
1obo3rg,https://www.reddit.com/r/Python/comments/1obo3rg/kryypto_an_open_source_python_text_editor/,Kryypto an open source python text editor.,SxxVe,2025-10-21 01:21:30,3,5,"Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
*...","Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
* Full Keyboard Support ‚Äì no need for the mouse, every feature is accessible via hotkeys
* Discord presence
* Live MarkDown Preview
* Session Restore
* Custom Styling
   * `config\configuration.cfg` for editor settings
   * CSS for theme and style customization
* Editing Tools
   * Find text in file
   * Jump to line
   * Adjustable cursor (color & width)
   * Configurable animations (types & duration)
* Git & GitHub Integration
   * View total commits
   * See last commit message & date
   * Track file changes directly inside the editor
* Productivity Features
   * Autocompleter
   * Builtin Terminal
   * Docstring panel (hover to see function/class docstring)
   * Tab-based file switching
   * Bookmarking lines
   * Custom title bar
* Syntax Highlighting for
   * Python
   * CSS
   * JSON
   * Config files
   * Markdown

Target Audience

* Developers who prefer keyboard-driven workflows (no mouse required)
* Users looking for a lightweight alternative to heavier IDEs
* People who want to customize their editor with CSS and configuration settings
* Anyone experimenting with Python-based editors or open-source text editing tools

# Comparison:

* Lightweight ‚Äì minimal overhead, focused on speed
* Highly customizable ‚Äì styling via CSS and config files
* Keyboard-centric ‚Äì designed to be fully usable without a mouse

  
github repo: [https://github.com/NaturalCapsule/Kryypto](https://github.com/NaturalCapsule/Kryypto)

  
website: [https://naturalcapsule.github.io/Kryypto/](https://naturalcapsule.github.io/Kryypto/)",2025-10-21T10:24:58.389154
1obo0ze,https://www.reddit.com/r/Python/comments/1obo0ze/forgetting_python/,Forgetting Python,Ashamed-Society-2875,2025-10-21 01:17:52,0,4,"I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping f...","I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping for college exams , now when i come back to python it feels i have lost my level and my touch i feel like fkn loser , all those hrs spent in 8th grade for nothing , i forgot a lot , is it common or just me???",2025-10-21T10:24:58.389211
1obzlam,https://www.reddit.com/r/Python/comments/1obzlam/about_me_and_the_order_i_code_in/,About Me (and the order i code in),Consistent_Hall631,2025-10-21 09:13:32,0,4,"hi, i recently started python, and i am really happy, i enjoy it very much and it has become a hobby,

the order i code in: 1: imports 2 variables: 3:...","hi, i recently started python, and i am really happy, i enjoy it very much and it has become a hobby,

the order i code in: 1: imports 2 variables: 3: normal code (print, lists etc) 4: if/else statements. (i put notes at the tops of each section.)",2025-10-21T10:26:22.965892
1obxzya,https://www.reddit.com/r/Python/comments/1obxzya/tuesday_daily_thread_advanced_questions/,Tuesday Daily Thread: Advanced questions,AutoModerator,2025-10-21 08:00:30,1,0,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about ...","# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",2025-10-21T10:26:22.965938
1obrz11,https://www.reddit.com/r/Python/comments/1obrz11/assemblytominecraftcommandblockcompiler_python/,Assembly-to-Minecraft-Command-Block-Compiler (Python) ‚Äî updated ‚Äî testers & contributors wanted,bowser04410,2025-10-21 03:57:47,1,0,"¬†I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedba...","I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedback, and contributors. Repo:¬†[https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler](https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler)

What My Project Does:

* Parses a tiny assembly-style language (labels, arithmetic, branches, simple I/O) and emits Minecraft command sequences tailored for command blocks.
* Produces low-level, inspectable output so you can see how program logic maps to in-game command-block logic.
* Implemented in Python for readability and easy contribution.

Target Audience:

* Minecraft command-block creators who want to run low-level programs without mods.
* Hobbyist compiler writers and learners looking for a compact Python codegen example.
* Contributors interested in parsing, code generation, testing strategies, or command optimization.
* This is an educational/hobby tool for small demos and experiments ‚Äî not a production compiler for large-scale programs.

Comparison (how it differs from alternatives):

* Assembly-focused: unlike high-level language‚ÜíMinecraft tools, it targets an assembly-like input so outputs are low-level and easy to debug in command blocks.
* Python-first and lightweight: prioritizes clarity and contributor-friendliness over performance.
* Command-block oriented: designed to work with vanilla in-game command blocks (does not target datapacks or mods).

How to help:

* Test: run examples, try outputs in a world, and note Minecraft version and exact steps when something fails.
* Report: open issues with minimal reproduction files and steps.
* Contribute: PRs welcome for bug fixes, examples, optimizations, docs, or tests ‚Äî look for good-first-issue.",2025-10-21T10:26:22.966008
1obqtmz,https://www.reddit.com/r/Python/comments/1obqtmz/has_any_library_emerged_as_the_replacement_for/,Has any library emerged as the replacement for Poliastro?,KerPop42,2025-10-21 03:15:23,2,2,"I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-...","I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-go. Even if you restrict yourself to 3.11 you *also* have to go back to pip <24.1 because of how some package requirements are written. I've looked around and can't find any other orbital dynamics libraries that are more than personal projects. Is the field just dead in python?",2025-10-21T10:26:22.966072
1obprx2,https://www.reddit.com/r/Python/comments/1obprx2/building_an_opensource_observability_tool_for/,Building an open-source observability tool for multi-agent systems - looking for feedback,Standard_Career_8603,2025-10-21 02:35:45,5,4,"I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-sour...","I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-source observability tool.   
  
**What it does**:  
\- Tracks information flow between agents   
\- Shows which tools are being called with what parameters   
\- Monitors how prompt changes affect agent behavior   
\- Works in both development and production   
  
**The gap I'm trying to fill**: Existing tools (LangSmith, LangFuse, AgentOps) are great at LLM observability (tokens, costs, latency), but I feel like they don't help much with multi-agent coordination. They show you **what** happened but not **why** agents failed to coordinate.   
  
  
**Looking for feedback**:  
1. Have you built multi-agent systems? What do you use for debugging?   
2. Does this solve a real problem or am I overengineering?   
3. What features would actually make this useful for you? Still early days, but happy to share the repo if folks are interested.",2025-10-21T10:26:22.966096
1obpjnf,https://www.reddit.com/r/Python/comments/1obpjnf/i_built_a_tool_that_runs_your_python_function_on/,i built a tool that runs your python function on 10k vms in parallel with one line of code.,Ok_Post_149,2025-10-21 02:25:33,12,9,"# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to ...","# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to hand it over to DevOps, the backlog would grow, and overall throughput would tank.

So I built **Burla**, the simplest cluster compute software that lets even Python beginners run code on massive clusters in the cloud. It‚Äôs one function with two parameters: the function and the inputs. You can bring your own Docker image, set hardware requirements, and run jobs as background tasks so you can fire and forget. Responses are fast, and you can call a million simple functions in just a few seconds.

Burla is built for embarrassingly parallel workloads like preprocessing data, hyperparameter tuning, and batch inference.

# Target Audience

Engineers, data scientists, and analysts who want to scale their code in production or research environments without dealing with infrastructure.

# Comparison

Unlike Ray or Dask, Burla doesn‚Äôt require cluster setup, orchestration, or YAML configs. It‚Äôs just:

    from burla import remote_parallel_map
    remote_parallel_map(func, inputs)
    

That‚Äôs it. It automatically handles distribution, retries, logging, and scaling across up to 10,000 VMs.

# Open Source & Free Credits

Burla is open source, and I‚Äôm improving the installation process. I also created managed versions for testing. If you want to try it, I‚Äôll cover 1,000 CPU hours and 100 GPU hours. Email me at [joe@burla.dev]() if interested.

Here‚Äôs a short intro video:  
[https://www.youtube.com/watch?v=9d22y\_kWjyE](https://www.youtube.com/watch?v=9d22y_kWjyE)

GitHub ‚Üí¬†[https://github.com/Burla-Cloud/burla](https://github.com/Burla-Cloud/burla)  
Docs ‚Üí¬†[https://docs.burla.dev](https://docs.burla.dev/)",2025-10-21T10:26:22.966133
1oborpj,https://www.reddit.com/r/Python/comments/1oborpj/i_made_a_python_bot_that_turns_your_text_images/,I made a Python bot that turns your text & images into diagrams right in Telegram.,No_Mongoose_8139,2025-10-21 01:51:22,0,5,"https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project ...","https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project structure, a mind map, or just explain a concept. Every time, I had to open heavy editors like Miro or Figma, which felt like overkill.

So, I decided to build a tool that lives right inside the app I use for communication all day: Telegram.

I'm excited to share my side project: **Diagrammer Bot**. It's a simple yet powerful bot in Python that lets you create diagrams on the fly.

**Here are the key features:**
*   **Text & Image Nodes:** You can create blocks not just from text, but from any image you send.
*   **Full Editing:** Create, connect, edit, and delete both nodes and edges.
*   **Project System:** Save your diagrams with custom names, load them later, or start new ones.
*   **Themes & Export:** Switch between a sleek dark mode and a clean light mode. Export your final diagram as a high-quality PNG.
*   **Open-Source:** The entire project is available on GitHub!

**Tech Stack:** Python, `python-telegram-bot`, `Graphviz` for rendering, and `Pillow` for watermarking.

I would be incredibly grateful for any feedback, feature ideas, or bug reports. And of course, a star ‚≠ê on GitHub would make my day!

*   **Try the bot here:** [https://t.me/diagrammer_robot](https://t.me/diagrammer_robot)
*   **Check out the code on GitHub:** [https://github.com/Lixher/Diagrammer-bot](https://github.com/Lixher/Diagrammer-Bot)",2025-10-21T10:26:22.966397
1oborib,https://www.reddit.com/r/Python/comments/1oborib/i_built_a_persistent_kv_store_in_pure_python/,I built a Persistent KV Store in Pure Python,vollhard-natta,2025-10-21 01:51:07,34,1,"Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been work...","Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been working on for the past few months. It is a lightweight, persistent key-value storage engine in Python, built from scratch to understand and implement the Log-Structured Merge-tree (LSM-tree) architecture. The project, which is fully open-source, is explicitly optimized for write-heavy workloads. 



# Core Architecture:

The engine implements the three fundamental LSM components: the **Write Ahead Log (WAL)** for durability, an in-memory **Memtable** (using `SortedDict` for sorted writes), and immutable persistent **SSTables (Sorted String Tables)**.

Some features that I'm proud of:

* **Async Compaction**: Merging and compaction are handled by a **separate background worker thread**. The process itself takes a hybrid approach.
* **Client/Server Model**: The entire storage engine runs behind a **FastAPI server**. This allows multiple clients to connect via REST APIs or the included CLI tool.
* **Efficient Range Queries**: Added full support for range queries from `start_key` to `end_key`. This is achieved via a memory-efficient **k-way merge iterator** that combines results from the Memtable and all SSTables. The FastAPI server delivers the results using a `StreamingResponse` to prevent memory exhaustion for large result sets.
* **Bloom Filter**: Implemented a **Bloom Filter** for each SSTable to drastically reduce disk I/O by confirming that a key definitely does not exist before attempting a disk seek.
* **Binary Storage**: SSTables now use **Msgpack binary format** instead of JSON for smaller file sizes and reduced CPU load during serialization/deserialization.

My favourite part of the project is that I actually got to see a practical implementation of [Merge Sorted Arrays - GeeksforGeeks](https://www.geeksforgeeks.org/dsa/merge-k-sorted-arrays/). This is a pretty popular interview question and to see DSA being actually implemented is a crazy moment.

# Get Started

    pip install lsm_storage_engine_key_value_store

**Usage via CLI/Server:**

1. **Terminal 1 (Server):** `lsm-server`
2. **Terminal 2 (Client):** `lsm-cli` (Follow the CLI help for commands).

# Looking for Feedback

I'd love to hear your thoughts about this implementation and how I can make it better and what features I can add in later versions. Ideas and constructive criticism are always welcome. I'm also looking for contributors, if anyone is interested, please feel free to PM and we can discuss.

Repo link: [Shashank1985/storage-engine](https://github.com/Shashank1985/storage-engine)  
Thanks!!",2025-10-21T10:26:22.966457
1obo3rg,https://www.reddit.com/r/Python/comments/1obo3rg/kryypto_an_open_source_python_text_editor/,Kryypto an open source python text editor.,SxxVe,2025-10-21 01:21:30,3,5,"Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
*...","Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
* Full Keyboard Support ‚Äì no need for the mouse, every feature is accessible via hotkeys
* Discord presence
* Live MarkDown Preview
* Session Restore
* Custom Styling
   * `config\configuration.cfg` for editor settings
   * CSS for theme and style customization
* Editing Tools
   * Find text in file
   * Jump to line
   * Adjustable cursor (color & width)
   * Configurable animations (types & duration)
* Git & GitHub Integration
   * View total commits
   * See last commit message & date
   * Track file changes directly inside the editor
* Productivity Features
   * Autocompleter
   * Builtin Terminal
   * Docstring panel (hover to see function/class docstring)
   * Tab-based file switching
   * Bookmarking lines
   * Custom title bar
* Syntax Highlighting for
   * Python
   * CSS
   * JSON
   * Config files
   * Markdown

Target Audience

* Developers who prefer keyboard-driven workflows (no mouse required)
* Users looking for a lightweight alternative to heavier IDEs
* People who want to customize their editor with CSS and configuration settings
* Anyone experimenting with Python-based editors or open-source text editing tools

# Comparison:

* Lightweight ‚Äì minimal overhead, focused on speed
* Highly customizable ‚Äì styling via CSS and config files
* Keyboard-centric ‚Äì designed to be fully usable without a mouse

  
github repo: [https://github.com/NaturalCapsule/Kryypto](https://github.com/NaturalCapsule/Kryypto)

  
website: [https://naturalcapsule.github.io/Kryypto/](https://naturalcapsule.github.io/Kryypto/)",2025-10-21T10:26:22.966529
1obo0ze,https://www.reddit.com/r/Python/comments/1obo0ze/forgetting_python/,Forgetting Python,Ashamed-Society-2875,2025-10-21 01:17:52,0,4,"I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping f...","I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping for college exams , now when i come back to python it feels i have lost my level and my touch i feel like fkn loser , all those hrs spent in 8th grade for nothing , i forgot a lot , is it common or just me???",2025-10-21T10:26:22.966650
1obzlam,https://www.reddit.com/r/Python/comments/1obzlam/about_me_and_the_order_i_code_in/,About Me (and the order i code in),Consistent_Hall631,2025-10-21 09:13:32,0,4,"hi, i recently started python, and i am really happy, i enjoy it very much and it has become a hobby,

the order i code in: 1: imports 2 variables: 3:...","hi, i recently started python, and i am really happy, i enjoy it very much and it has become a hobby,

the order i code in: 1: imports 2 variables: 3: normal code (print, lists etc) 4: if/else statements. (i put notes at the tops of each section.)",2025-10-21T10:27:50.205126
1obxzya,https://www.reddit.com/r/Python/comments/1obxzya/tuesday_daily_thread_advanced_questions/,Tuesday Daily Thread: Advanced questions,AutoModerator,2025-10-21 08:00:30,1,0,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about ...","# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",2025-10-21T10:27:50.205188
1obrz11,https://www.reddit.com/r/Python/comments/1obrz11/assemblytominecraftcommandblockcompiler_python/,Assembly-to-Minecraft-Command-Block-Compiler (Python) ‚Äî updated ‚Äî testers & contributors wanted,bowser04410,2025-10-21 03:57:47,2,0,"¬†I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedba...","I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedback, and contributors. Repo:¬†[https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler](https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler)

What My Project Does:

* Parses a tiny assembly-style language (labels, arithmetic, branches, simple I/O) and emits Minecraft command sequences tailored for command blocks.
* Produces low-level, inspectable output so you can see how program logic maps to in-game command-block logic.
* Implemented in Python for readability and easy contribution.

Target Audience:

* Minecraft command-block creators who want to run low-level programs without mods.
* Hobbyist compiler writers and learners looking for a compact Python codegen example.
* Contributors interested in parsing, code generation, testing strategies, or command optimization.
* This is an educational/hobby tool for small demos and experiments ‚Äî not a production compiler for large-scale programs.

Comparison (how it differs from alternatives):

* Assembly-focused: unlike high-level language‚ÜíMinecraft tools, it targets an assembly-like input so outputs are low-level and easy to debug in command blocks.
* Python-first and lightweight: prioritizes clarity and contributor-friendliness over performance.
* Command-block oriented: designed to work with vanilla in-game command blocks (does not target datapacks or mods).

How to help:

* Test: run examples, try outputs in a world, and note Minecraft version and exact steps when something fails.
* Report: open issues with minimal reproduction files and steps.
* Contribute: PRs welcome for bug fixes, examples, optimizations, docs, or tests ‚Äî look for good-first-issue.",2025-10-21T10:27:50.205263
1obqtmz,https://www.reddit.com/r/Python/comments/1obqtmz/has_any_library_emerged_as_the_replacement_for/,Has any library emerged as the replacement for Poliastro?,KerPop42,2025-10-21 03:15:23,2,2,"I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-...","I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-go. Even if you restrict yourself to 3.11 you *also* have to go back to pip <24.1 because of how some package requirements are written. I've looked around and can't find any other orbital dynamics libraries that are more than personal projects. Is the field just dead in python?",2025-10-21T10:27:50.205327
1obprx2,https://www.reddit.com/r/Python/comments/1obprx2/building_an_opensource_observability_tool_for/,Building an open-source observability tool for multi-agent systems - looking for feedback,Standard_Career_8603,2025-10-21 02:35:45,4,4,"I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-sour...","I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-source observability tool.   
  
**What it does**:  
\- Tracks information flow between agents   
\- Shows which tools are being called with what parameters   
\- Monitors how prompt changes affect agent behavior   
\- Works in both development and production   
  
**The gap I'm trying to fill**: Existing tools (LangSmith, LangFuse, AgentOps) are great at LLM observability (tokens, costs, latency), but I feel like they don't help much with multi-agent coordination. They show you **what** happened but not **why** agents failed to coordinate.   
  
  
**Looking for feedback**:  
1. Have you built multi-agent systems? What do you use for debugging?   
2. Does this solve a real problem or am I overengineering?   
3. What features would actually make this useful for you? Still early days, but happy to share the repo if folks are interested.",2025-10-21T10:27:50.205351
1obpjnf,https://www.reddit.com/r/Python/comments/1obpjnf/i_built_a_tool_that_runs_your_python_function_on/,i built a tool that runs your python function on 10k vms in parallel with one line of code.,Ok_Post_149,2025-10-21 02:25:33,10,9,"# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to ...","# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to hand it over to DevOps, the backlog would grow, and overall throughput would tank.

So I built **Burla**, the simplest cluster compute software that lets even Python beginners run code on massive clusters in the cloud. It‚Äôs one function with two parameters: the function and the inputs. You can bring your own Docker image, set hardware requirements, and run jobs as background tasks so you can fire and forget. Responses are fast, and you can call a million simple functions in just a few seconds.

Burla is built for embarrassingly parallel workloads like preprocessing data, hyperparameter tuning, and batch inference.

# Target Audience

Engineers, data scientists, and analysts who want to scale their code in production or research environments without dealing with infrastructure.

# Comparison

Unlike Ray or Dask, Burla doesn‚Äôt require cluster setup, orchestration, or YAML configs. It‚Äôs just:

    from burla import remote_parallel_map
    remote_parallel_map(func, inputs)
    

That‚Äôs it. It automatically handles distribution, retries, logging, and scaling across up to 10,000 VMs.

# Open Source & Free Credits

Burla is open source, and I‚Äôm improving the installation process. I also created managed versions for testing. If you want to try it, I‚Äôll cover 1,000 CPU hours and 100 GPU hours. Email me at [joe@burla.dev]() if interested.

Here‚Äôs a short intro video:  
[https://www.youtube.com/watch?v=9d22y\_kWjyE](https://www.youtube.com/watch?v=9d22y_kWjyE)

GitHub ‚Üí¬†[https://github.com/Burla-Cloud/burla](https://github.com/Burla-Cloud/burla)  
Docs ‚Üí¬†[https://docs.burla.dev](https://docs.burla.dev/)",2025-10-21T10:27:50.205387
1oborpj,https://www.reddit.com/r/Python/comments/1oborpj/i_made_a_python_bot_that_turns_your_text_images/,I made a Python bot that turns your text & images into diagrams right in Telegram.,No_Mongoose_8139,2025-10-21 01:51:22,0,5,"https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project ...","https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project structure, a mind map, or just explain a concept. Every time, I had to open heavy editors like Miro or Figma, which felt like overkill.

So, I decided to build a tool that lives right inside the app I use for communication all day: Telegram.

I'm excited to share my side project: **Diagrammer Bot**. It's a simple yet powerful bot in Python that lets you create diagrams on the fly.

**Here are the key features:**
*   **Text & Image Nodes:** You can create blocks not just from text, but from any image you send.
*   **Full Editing:** Create, connect, edit, and delete both nodes and edges.
*   **Project System:** Save your diagrams with custom names, load them later, or start new ones.
*   **Themes & Export:** Switch between a sleek dark mode and a clean light mode. Export your final diagram as a high-quality PNG.
*   **Open-Source:** The entire project is available on GitHub!

**Tech Stack:** Python, `python-telegram-bot`, `Graphviz` for rendering, and `Pillow` for watermarking.

I would be incredibly grateful for any feedback, feature ideas, or bug reports. And of course, a star ‚≠ê on GitHub would make my day!

*   **Try the bot here:** [https://t.me/diagrammer_robot](https://t.me/diagrammer_robot)
*   **Check out the code on GitHub:** [https://github.com/Lixher/Diagrammer-bot](https://github.com/Lixher/Diagrammer-Bot)",2025-10-21T10:27:50.205654
1oborib,https://www.reddit.com/r/Python/comments/1oborib/i_built_a_persistent_kv_store_in_pure_python/,I built a Persistent KV Store in Pure Python,vollhard-natta,2025-10-21 01:51:07,34,1,"Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been work...","Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been working on for the past few months. It is a lightweight, persistent key-value storage engine in Python, built from scratch to understand and implement the Log-Structured Merge-tree (LSM-tree) architecture. The project, which is fully open-source, is explicitly optimized for write-heavy workloads. 



# Core Architecture:

The engine implements the three fundamental LSM components: the **Write Ahead Log (WAL)** for durability, an in-memory **Memtable** (using `SortedDict` for sorted writes), and immutable persistent **SSTables (Sorted String Tables)**.

Some features that I'm proud of:

* **Async Compaction**: Merging and compaction are handled by a **separate background worker thread**. The process itself takes a hybrid approach.
* **Client/Server Model**: The entire storage engine runs behind a **FastAPI server**. This allows multiple clients to connect via REST APIs or the included CLI tool.
* **Efficient Range Queries**: Added full support for range queries from `start_key` to `end_key`. This is achieved via a memory-efficient **k-way merge iterator** that combines results from the Memtable and all SSTables. The FastAPI server delivers the results using a `StreamingResponse` to prevent memory exhaustion for large result sets.
* **Bloom Filter**: Implemented a **Bloom Filter** for each SSTable to drastically reduce disk I/O by confirming that a key definitely does not exist before attempting a disk seek.
* **Binary Storage**: SSTables now use **Msgpack binary format** instead of JSON for smaller file sizes and reduced CPU load during serialization/deserialization.

My favourite part of the project is that I actually got to see a practical implementation of [Merge Sorted Arrays - GeeksforGeeks](https://www.geeksforgeeks.org/dsa/merge-k-sorted-arrays/). This is a pretty popular interview question and to see DSA being actually implemented is a crazy moment.

# Get Started

    pip install lsm_storage_engine_key_value_store

**Usage via CLI/Server:**

1. **Terminal 1 (Server):** `lsm-server`
2. **Terminal 2 (Client):** `lsm-cli` (Follow the CLI help for commands).

# Looking for Feedback

I'd love to hear your thoughts about this implementation and how I can make it better and what features I can add in later versions. Ideas and constructive criticism are always welcome. I'm also looking for contributors, if anyone is interested, please feel free to PM and we can discuss.

Repo link: [Shashank1985/storage-engine](https://github.com/Shashank1985/storage-engine)  
Thanks!!",2025-10-21T10:27:50.205716
1obo3rg,https://www.reddit.com/r/Python/comments/1obo3rg/kryypto_an_open_source_python_text_editor/,Kryypto an open source python text editor.,SxxVe,2025-10-21 01:21:30,3,5,"Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
*...","Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
* Full Keyboard Support ‚Äì no need for the mouse, every feature is accessible via hotkeys
* Discord presence
* Live MarkDown Preview
* Session Restore
* Custom Styling
   * `config\configuration.cfg` for editor settings
   * CSS for theme and style customization
* Editing Tools
   * Find text in file
   * Jump to line
   * Adjustable cursor (color & width)
   * Configurable animations (types & duration)
* Git & GitHub Integration
   * View total commits
   * See last commit message & date
   * Track file changes directly inside the editor
* Productivity Features
   * Autocompleter
   * Builtin Terminal
   * Docstring panel (hover to see function/class docstring)
   * Tab-based file switching
   * Bookmarking lines
   * Custom title bar
* Syntax Highlighting for
   * Python
   * CSS
   * JSON
   * Config files
   * Markdown

Target Audience

* Developers who prefer keyboard-driven workflows (no mouse required)
* Users looking for a lightweight alternative to heavier IDEs
* People who want to customize their editor with CSS and configuration settings
* Anyone experimenting with Python-based editors or open-source text editing tools

# Comparison:

* Lightweight ‚Äì minimal overhead, focused on speed
* Highly customizable ‚Äì styling via CSS and config files
* Keyboard-centric ‚Äì designed to be fully usable without a mouse

  
github repo: [https://github.com/NaturalCapsule/Kryypto](https://github.com/NaturalCapsule/Kryypto)

  
website: [https://naturalcapsule.github.io/Kryypto/](https://naturalcapsule.github.io/Kryypto/)",2025-10-21T10:27:50.205788
1obo0ze,https://www.reddit.com/r/Python/comments/1obo0ze/forgetting_python/,Forgetting Python,Ashamed-Society-2875,2025-10-21 01:17:52,0,4,"I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping f...","I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping for college exams , now when i come back to python it feels i have lost my level and my touch i feel like fkn loser , all those hrs spent in 8th grade for nothing , i forgot a lot , is it common or just me???",2025-10-21T10:27:50.205846
1obzlam,https://www.reddit.com/r/Python/comments/1obzlam/about_me_and_the_order_i_code_in/,About Me (and the order i code in),Consistent_Hall631,2025-10-21 09:13:32,0,4,"hi, i recently started python, and i am really happy, i enjoy it very much and it has become a hobby,

the order i code in: 1: imports 2 variables: 3:...","hi, i recently started python, and i am really happy, i enjoy it very much and it has become a hobby,

the order i code in: 1: imports 2 variables: 3: normal code (print, lists etc) 4: if/else statements. (i put notes at the tops of each section.)",2025-10-21T10:29:19.583625
1obxzya,https://www.reddit.com/r/Python/comments/1obxzya/tuesday_daily_thread_advanced_questions/,Tuesday Daily Thread: Advanced questions,AutoModerator,2025-10-21 08:00:30,1,0,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about ...","# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",2025-10-21T10:29:19.583674
1obrz11,https://www.reddit.com/r/Python/comments/1obrz11/assemblytominecraftcommandblockcompiler_python/,Assembly-to-Minecraft-Command-Block-Compiler (Python) ‚Äî updated ‚Äî testers & contributors wanted,bowser04410,2025-10-21 03:57:47,5,0,"¬†I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedba...","I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedback, and contributors. Repo:¬†[https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler](https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler)

What My Project Does:

* Parses a tiny assembly-style language (labels, arithmetic, branches, simple I/O) and emits Minecraft command sequences tailored for command blocks.
* Produces low-level, inspectable output so you can see how program logic maps to in-game command-block logic.
* Implemented in Python for readability and easy contribution.

Target Audience:

* Minecraft command-block creators who want to run low-level programs without mods.
* Hobbyist compiler writers and learners looking for a compact Python codegen example.
* Contributors interested in parsing, code generation, testing strategies, or command optimization.
* This is an educational/hobby tool for small demos and experiments ‚Äî not a production compiler for large-scale programs.

Comparison (how it differs from alternatives):

* Assembly-focused: unlike high-level language‚ÜíMinecraft tools, it targets an assembly-like input so outputs are low-level and easy to debug in command blocks.
* Python-first and lightweight: prioritizes clarity and contributor-friendliness over performance.
* Command-block oriented: designed to work with vanilla in-game command blocks (does not target datapacks or mods).

How to help:

* Test: run examples, try outputs in a world, and note Minecraft version and exact steps when something fails.
* Report: open issues with minimal reproduction files and steps.
* Contribute: PRs welcome for bug fixes, examples, optimizations, docs, or tests ‚Äî look for good-first-issue.",2025-10-21T10:29:19.583769
1obqtmz,https://www.reddit.com/r/Python/comments/1obqtmz/has_any_library_emerged_as_the_replacement_for/,Has any library emerged as the replacement for Poliastro?,KerPop42,2025-10-21 03:15:23,2,2,"I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-...","I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-go. Even if you restrict yourself to 3.11 you *also* have to go back to pip <24.1 because of how some package requirements are written. I've looked around and can't find any other orbital dynamics libraries that are more than personal projects. Is the field just dead in python?",2025-10-21T10:29:19.583835
1obprx2,https://www.reddit.com/r/Python/comments/1obprx2/building_an_opensource_observability_tool_for/,Building an open-source observability tool for multi-agent systems - looking for feedback,Standard_Career_8603,2025-10-21 02:35:45,4,4,"I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-sour...","I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-source observability tool.   
  
**What it does**:  
\- Tracks information flow between agents   
\- Shows which tools are being called with what parameters   
\- Monitors how prompt changes affect agent behavior   
\- Works in both development and production   
  
**The gap I'm trying to fill**: Existing tools (LangSmith, LangFuse, AgentOps) are great at LLM observability (tokens, costs, latency), but I feel like they don't help much with multi-agent coordination. They show you **what** happened but not **why** agents failed to coordinate.   
  
  
**Looking for feedback**:  
1. Have you built multi-agent systems? What do you use for debugging?   
2. Does this solve a real problem or am I overengineering?   
3. What features would actually make this useful for you? Still early days, but happy to share the repo if folks are interested.",2025-10-21T10:29:19.583860
1obpjnf,https://www.reddit.com/r/Python/comments/1obpjnf/i_built_a_tool_that_runs_your_python_function_on/,i built a tool that runs your python function on 10k vms in parallel with one line of code.,Ok_Post_149,2025-10-21 02:25:33,11,9,"# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to ...","# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to hand it over to DevOps, the backlog would grow, and overall throughput would tank.

So I built **Burla**, the simplest cluster compute software that lets even Python beginners run code on massive clusters in the cloud. It‚Äôs one function with two parameters: the function and the inputs. You can bring your own Docker image, set hardware requirements, and run jobs as background tasks so you can fire and forget. Responses are fast, and you can call a million simple functions in just a few seconds.

Burla is built for embarrassingly parallel workloads like preprocessing data, hyperparameter tuning, and batch inference.

# Target Audience

Engineers, data scientists, and analysts who want to scale their code in production or research environments without dealing with infrastructure.

# Comparison

Unlike Ray or Dask, Burla doesn‚Äôt require cluster setup, orchestration, or YAML configs. It‚Äôs just:

    from burla import remote_parallel_map
    remote_parallel_map(func, inputs)
    

That‚Äôs it. It automatically handles distribution, retries, logging, and scaling across up to 10,000 VMs.

# Open Source & Free Credits

Burla is open source, and I‚Äôm improving the installation process. I also created managed versions for testing. If you want to try it, I‚Äôll cover 1,000 CPU hours and 100 GPU hours. Email me at [joe@burla.dev]() if interested.

Here‚Äôs a short intro video:  
[https://www.youtube.com/watch?v=9d22y\_kWjyE](https://www.youtube.com/watch?v=9d22y_kWjyE)

GitHub ‚Üí¬†[https://github.com/Burla-Cloud/burla](https://github.com/Burla-Cloud/burla)  
Docs ‚Üí¬†[https://docs.burla.dev](https://docs.burla.dev/)",2025-10-21T10:29:19.583898
1oborpj,https://www.reddit.com/r/Python/comments/1oborpj/i_made_a_python_bot_that_turns_your_text_images/,I made a Python bot that turns your text & images into diagrams right in Telegram.,No_Mongoose_8139,2025-10-21 01:51:22,0,5,"https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project ...","https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project structure, a mind map, or just explain a concept. Every time, I had to open heavy editors like Miro or Figma, which felt like overkill.

So, I decided to build a tool that lives right inside the app I use for communication all day: Telegram.

I'm excited to share my side project: **Diagrammer Bot**. It's a simple yet powerful bot in Python that lets you create diagrams on the fly.

**Here are the key features:**
*   **Text & Image Nodes:** You can create blocks not just from text, but from any image you send.
*   **Full Editing:** Create, connect, edit, and delete both nodes and edges.
*   **Project System:** Save your diagrams with custom names, load them later, or start new ones.
*   **Themes & Export:** Switch between a sleek dark mode and a clean light mode. Export your final diagram as a high-quality PNG.
*   **Open-Source:** The entire project is available on GitHub!

**Tech Stack:** Python, `python-telegram-bot`, `Graphviz` for rendering, and `Pillow` for watermarking.

I would be incredibly grateful for any feedback, feature ideas, or bug reports. And of course, a star ‚≠ê on GitHub would make my day!

*   **Try the bot here:** [https://t.me/diagrammer_robot](https://t.me/diagrammer_robot)
*   **Check out the code on GitHub:** [https://github.com/Lixher/Diagrammer-bot](https://github.com/Lixher/Diagrammer-Bot)",2025-10-21T10:29:19.584228
1oborib,https://www.reddit.com/r/Python/comments/1oborib/i_built_a_persistent_kv_store_in_pure_python/,I built a Persistent KV Store in Pure Python,vollhard-natta,2025-10-21 01:51:07,32,1,"Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been work...","Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been working on for the past few months. It is a lightweight, persistent key-value storage engine in Python, built from scratch to understand and implement the Log-Structured Merge-tree (LSM-tree) architecture. The project, which is fully open-source, is explicitly optimized for write-heavy workloads. 



# Core Architecture:

The engine implements the three fundamental LSM components: the **Write Ahead Log (WAL)** for durability, an in-memory **Memtable** (using `SortedDict` for sorted writes), and immutable persistent **SSTables (Sorted String Tables)**.

Some features that I'm proud of:

* **Async Compaction**: Merging and compaction are handled by a **separate background worker thread**. The process itself takes a hybrid approach.
* **Client/Server Model**: The entire storage engine runs behind a **FastAPI server**. This allows multiple clients to connect via REST APIs or the included CLI tool.
* **Efficient Range Queries**: Added full support for range queries from `start_key` to `end_key`. This is achieved via a memory-efficient **k-way merge iterator** that combines results from the Memtable and all SSTables. The FastAPI server delivers the results using a `StreamingResponse` to prevent memory exhaustion for large result sets.
* **Bloom Filter**: Implemented a **Bloom Filter** for each SSTable to drastically reduce disk I/O by confirming that a key definitely does not exist before attempting a disk seek.
* **Binary Storage**: SSTables now use **Msgpack binary format** instead of JSON for smaller file sizes and reduced CPU load during serialization/deserialization.

My favourite part of the project is that I actually got to see a practical implementation of [Merge Sorted Arrays - GeeksforGeeks](https://www.geeksforgeeks.org/dsa/merge-k-sorted-arrays/). This is a pretty popular interview question and to see DSA being actually implemented is a crazy moment.

# Get Started

    pip install lsm_storage_engine_key_value_store

**Usage via CLI/Server:**

1. **Terminal 1 (Server):** `lsm-server`
2. **Terminal 2 (Client):** `lsm-cli` (Follow the CLI help for commands).

# Looking for Feedback

I'd love to hear your thoughts about this implementation and how I can make it better and what features I can add in later versions. Ideas and constructive criticism are always welcome. I'm also looking for contributors, if anyone is interested, please feel free to PM and we can discuss.

Repo link: [Shashank1985/storage-engine](https://github.com/Shashank1985/storage-engine)  
Thanks!!",2025-10-21T10:29:19.584293
1obo3rg,https://www.reddit.com/r/Python/comments/1obo3rg/kryypto_an_open_source_python_text_editor/,Kryypto an open source python text editor.,SxxVe,2025-10-21 01:21:30,3,5,"Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
*...","Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
* Full Keyboard Support ‚Äì no need for the mouse, every feature is accessible via hotkeys
* Discord presence
* Live MarkDown Preview
* Session Restore
* Custom Styling
   * `config\configuration.cfg` for editor settings
   * CSS for theme and style customization
* Editing Tools
   * Find text in file
   * Jump to line
   * Adjustable cursor (color & width)
   * Configurable animations (types & duration)
* Git & GitHub Integration
   * View total commits
   * See last commit message & date
   * Track file changes directly inside the editor
* Productivity Features
   * Autocompleter
   * Builtin Terminal
   * Docstring panel (hover to see function/class docstring)
   * Tab-based file switching
   * Bookmarking lines
   * Custom title bar
* Syntax Highlighting for
   * Python
   * CSS
   * JSON
   * Config files
   * Markdown

Target Audience

* Developers who prefer keyboard-driven workflows (no mouse required)
* Users looking for a lightweight alternative to heavier IDEs
* People who want to customize their editor with CSS and configuration settings
* Anyone experimenting with Python-based editors or open-source text editing tools

# Comparison:

* Lightweight ‚Äì minimal overhead, focused on speed
* Highly customizable ‚Äì styling via CSS and config files
* Keyboard-centric ‚Äì designed to be fully usable without a mouse

  
github repo: [https://github.com/NaturalCapsule/Kryypto](https://github.com/NaturalCapsule/Kryypto)

  
website: [https://naturalcapsule.github.io/Kryypto/](https://naturalcapsule.github.io/Kryypto/)",2025-10-21T10:29:19.584368
1obo0ze,https://www.reddit.com/r/Python/comments/1obo0ze/forgetting_python/,Forgetting Python,Ashamed-Society-2875,2025-10-21 01:17:52,0,4,"I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping f...","I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping for college exams , now when i come back to python it feels i have lost my level and my touch i feel like fkn loser , all those hrs spent in 8th grade for nothing , i forgot a lot , is it common or just me???",2025-10-21T10:29:19.584427
1obzlam,https://www.reddit.com/r/Python/comments/1obzlam/about_me_and_the_order_i_code_in/,About Me (and the order i code in),Consistent_Hall631,2025-10-21 09:13:32,0,4,"hi, i recently started python, and i am really happy, i enjoy it very much and it has become a hobby,

the order i code in: 1: imports 2 variables: 3:...","hi, i recently started python, and i am really happy, i enjoy it very much and it has become a hobby,

the order i code in: 1: imports 2 variables: 3: normal code (print, lists etc) 4: if/else statements. (i put notes at the tops of each section.)",2025-10-21T10:30:41.756674
1obxzya,https://www.reddit.com/r/Python/comments/1obxzya/tuesday_daily_thread_advanced_questions/,Tuesday Daily Thread: Advanced questions,AutoModerator,2025-10-21 08:00:30,1,0,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about ...","# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",2025-10-21T10:30:41.756728
1obrz11,https://www.reddit.com/r/Python/comments/1obrz11/assemblytominecraftcommandblockcompiler_python/,Assembly-to-Minecraft-Command-Block-Compiler (Python) ‚Äî updated ‚Äî testers & contributors wanted,bowser04410,2025-10-21 03:57:47,1,0,"¬†I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedba...","I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedback, and contributors. Repo:¬†[https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler](https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler)

What My Project Does:

* Parses a tiny assembly-style language (labels, arithmetic, branches, simple I/O) and emits Minecraft command sequences tailored for command blocks.
* Produces low-level, inspectable output so you can see how program logic maps to in-game command-block logic.
* Implemented in Python for readability and easy contribution.

Target Audience:

* Minecraft command-block creators who want to run low-level programs without mods.
* Hobbyist compiler writers and learners looking for a compact Python codegen example.
* Contributors interested in parsing, code generation, testing strategies, or command optimization.
* This is an educational/hobby tool for small demos and experiments ‚Äî not a production compiler for large-scale programs.

Comparison (how it differs from alternatives):

* Assembly-focused: unlike high-level language‚ÜíMinecraft tools, it targets an assembly-like input so outputs are low-level and easy to debug in command blocks.
* Python-first and lightweight: prioritizes clarity and contributor-friendliness over performance.
* Command-block oriented: designed to work with vanilla in-game command blocks (does not target datapacks or mods).

How to help:

* Test: run examples, try outputs in a world, and note Minecraft version and exact steps when something fails.
* Report: open issues with minimal reproduction files and steps.
* Contribute: PRs welcome for bug fixes, examples, optimizations, docs, or tests ‚Äî look for good-first-issue.",2025-10-21T10:30:41.756802
1obqtmz,https://www.reddit.com/r/Python/comments/1obqtmz/has_any_library_emerged_as_the_replacement_for/,Has any library emerged as the replacement for Poliastro?,KerPop42,2025-10-21 03:15:23,2,2,"I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-...","I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-go. Even if you restrict yourself to 3.11 you *also* have to go back to pip <24.1 because of how some package requirements are written. I've looked around and can't find any other orbital dynamics libraries that are more than personal projects. Is the field just dead in python?",2025-10-21T10:30:41.756866
1obprx2,https://www.reddit.com/r/Python/comments/1obprx2/building_an_opensource_observability_tool_for/,Building an open-source observability tool for multi-agent systems - looking for feedback,Standard_Career_8603,2025-10-21 02:35:45,2,4,"I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-sour...","I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-source observability tool.   
  
**What it does**:  
\- Tracks information flow between agents   
\- Shows which tools are being called with what parameters   
\- Monitors how prompt changes affect agent behavior   
\- Works in both development and production   
  
**The gap I'm trying to fill**: Existing tools (LangSmith, LangFuse, AgentOps) are great at LLM observability (tokens, costs, latency), but I feel like they don't help much with multi-agent coordination. They show you **what** happened but not **why** agents failed to coordinate.   
  
  
**Looking for feedback**:  
1. Have you built multi-agent systems? What do you use for debugging?   
2. Does this solve a real problem or am I overengineering?   
3. What features would actually make this useful for you? Still early days, but happy to share the repo if folks are interested.",2025-10-21T10:30:41.756890
1obpjnf,https://www.reddit.com/r/Python/comments/1obpjnf/i_built_a_tool_that_runs_your_python_function_on/,i built a tool that runs your python function on 10k vms in parallel with one line of code.,Ok_Post_149,2025-10-21 02:25:33,11,9,"# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to ...","# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to hand it over to DevOps, the backlog would grow, and overall throughput would tank.

So I built **Burla**, the simplest cluster compute software that lets even Python beginners run code on massive clusters in the cloud. It‚Äôs one function with two parameters: the function and the inputs. You can bring your own Docker image, set hardware requirements, and run jobs as background tasks so you can fire and forget. Responses are fast, and you can call a million simple functions in just a few seconds.

Burla is built for embarrassingly parallel workloads like preprocessing data, hyperparameter tuning, and batch inference.

# Target Audience

Engineers, data scientists, and analysts who want to scale their code in production or research environments without dealing with infrastructure.

# Comparison

Unlike Ray or Dask, Burla doesn‚Äôt require cluster setup, orchestration, or YAML configs. It‚Äôs just:

    from burla import remote_parallel_map
    remote_parallel_map(func, inputs)
    

That‚Äôs it. It automatically handles distribution, retries, logging, and scaling across up to 10,000 VMs.

# Open Source & Free Credits

Burla is open source, and I‚Äôm improving the installation process. I also created managed versions for testing. If you want to try it, I‚Äôll cover 1,000 CPU hours and 100 GPU hours. Email me at [joe@burla.dev]() if interested.

Here‚Äôs a short intro video:  
[https://www.youtube.com/watch?v=9d22y\_kWjyE](https://www.youtube.com/watch?v=9d22y_kWjyE)

GitHub ‚Üí¬†[https://github.com/Burla-Cloud/burla](https://github.com/Burla-Cloud/burla)  
Docs ‚Üí¬†[https://docs.burla.dev](https://docs.burla.dev/)",2025-10-21T10:30:41.756926
1oborpj,https://www.reddit.com/r/Python/comments/1oborpj/i_made_a_python_bot_that_turns_your_text_images/,I made a Python bot that turns your text & images into diagrams right in Telegram.,No_Mongoose_8139,2025-10-21 01:51:22,0,5,"https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project ...","https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project structure, a mind map, or just explain a concept. Every time, I had to open heavy editors like Miro or Figma, which felt like overkill.

So, I decided to build a tool that lives right inside the app I use for communication all day: Telegram.

I'm excited to share my side project: **Diagrammer Bot**. It's a simple yet powerful bot in Python that lets you create diagrams on the fly.

**Here are the key features:**
*   **Text & Image Nodes:** You can create blocks not just from text, but from any image you send.
*   **Full Editing:** Create, connect, edit, and delete both nodes and edges.
*   **Project System:** Save your diagrams with custom names, load them later, or start new ones.
*   **Themes & Export:** Switch between a sleek dark mode and a clean light mode. Export your final diagram as a high-quality PNG.
*   **Open-Source:** The entire project is available on GitHub!

**Tech Stack:** Python, `python-telegram-bot`, `Graphviz` for rendering, and `Pillow` for watermarking.

I would be incredibly grateful for any feedback, feature ideas, or bug reports. And of course, a star ‚≠ê on GitHub would make my day!

*   **Try the bot here:** [https://t.me/diagrammer_robot](https://t.me/diagrammer_robot)
*   **Check out the code on GitHub:** [https://github.com/Lixher/Diagrammer-bot](https://github.com/Lixher/Diagrammer-Bot)",2025-10-21T10:30:41.757193
1oborib,https://www.reddit.com/r/Python/comments/1oborib/i_built_a_persistent_kv_store_in_pure_python/,I built a Persistent KV Store in Pure Python,vollhard-natta,2025-10-21 01:51:07,34,1,"Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been work...","Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been working on for the past few months. It is a lightweight, persistent key-value storage engine in Python, built from scratch to understand and implement the Log-Structured Merge-tree (LSM-tree) architecture. The project, which is fully open-source, is explicitly optimized for write-heavy workloads. 



# Core Architecture:

The engine implements the three fundamental LSM components: the **Write Ahead Log (WAL)** for durability, an in-memory **Memtable** (using `SortedDict` for sorted writes), and immutable persistent **SSTables (Sorted String Tables)**.

Some features that I'm proud of:

* **Async Compaction**: Merging and compaction are handled by a **separate background worker thread**. The process itself takes a hybrid approach.
* **Client/Server Model**: The entire storage engine runs behind a **FastAPI server**. This allows multiple clients to connect via REST APIs or the included CLI tool.
* **Efficient Range Queries**: Added full support for range queries from `start_key` to `end_key`. This is achieved via a memory-efficient **k-way merge iterator** that combines results from the Memtable and all SSTables. The FastAPI server delivers the results using a `StreamingResponse` to prevent memory exhaustion for large result sets.
* **Bloom Filter**: Implemented a **Bloom Filter** for each SSTable to drastically reduce disk I/O by confirming that a key definitely does not exist before attempting a disk seek.
* **Binary Storage**: SSTables now use **Msgpack binary format** instead of JSON for smaller file sizes and reduced CPU load during serialization/deserialization.

My favourite part of the project is that I actually got to see a practical implementation of [Merge Sorted Arrays - GeeksforGeeks](https://www.geeksforgeeks.org/dsa/merge-k-sorted-arrays/). This is a pretty popular interview question and to see DSA being actually implemented is a crazy moment.

# Get Started

    pip install lsm_storage_engine_key_value_store

**Usage via CLI/Server:**

1. **Terminal 1 (Server):** `lsm-server`
2. **Terminal 2 (Client):** `lsm-cli` (Follow the CLI help for commands).

# Looking for Feedback

I'd love to hear your thoughts about this implementation and how I can make it better and what features I can add in later versions. Ideas and constructive criticism are always welcome. I'm also looking for contributors, if anyone is interested, please feel free to PM and we can discuss.

Repo link: [Shashank1985/storage-engine](https://github.com/Shashank1985/storage-engine)  
Thanks!!",2025-10-21T10:30:41.757254
1obo3rg,https://www.reddit.com/r/Python/comments/1obo3rg/kryypto_an_open_source_python_text_editor/,Kryypto an open source python text editor.,SxxVe,2025-10-21 01:21:30,3,5,"Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
*...","Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
* Full Keyboard Support ‚Äì no need for the mouse, every feature is accessible via hotkeys
* Discord presence
* Live MarkDown Preview
* Session Restore
* Custom Styling
   * `config\configuration.cfg` for editor settings
   * CSS for theme and style customization
* Editing Tools
   * Find text in file
   * Jump to line
   * Adjustable cursor (color & width)
   * Configurable animations (types & duration)
* Git & GitHub Integration
   * View total commits
   * See last commit message & date
   * Track file changes directly inside the editor
* Productivity Features
   * Autocompleter
   * Builtin Terminal
   * Docstring panel (hover to see function/class docstring)
   * Tab-based file switching
   * Bookmarking lines
   * Custom title bar
* Syntax Highlighting for
   * Python
   * CSS
   * JSON
   * Config files
   * Markdown

Target Audience

* Developers who prefer keyboard-driven workflows (no mouse required)
* Users looking for a lightweight alternative to heavier IDEs
* People who want to customize their editor with CSS and configuration settings
* Anyone experimenting with Python-based editors or open-source text editing tools

# Comparison:

* Lightweight ‚Äì minimal overhead, focused on speed
* Highly customizable ‚Äì styling via CSS and config files
* Keyboard-centric ‚Äì designed to be fully usable without a mouse

  
github repo: [https://github.com/NaturalCapsule/Kryypto](https://github.com/NaturalCapsule/Kryypto)

  
website: [https://naturalcapsule.github.io/Kryypto/](https://naturalcapsule.github.io/Kryypto/)",2025-10-21T10:30:41.757327
1obo0ze,https://www.reddit.com/r/Python/comments/1obo0ze/forgetting_python/,Forgetting Python,Ashamed-Society-2875,2025-10-21 01:17:52,0,4,"I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping f...","I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping for college exams , now when i come back to python it feels i have lost my level and my touch i feel like fkn loser , all those hrs spent in 8th grade for nothing , i forgot a lot , is it common or just me???",2025-10-21T10:30:41.757384
1obzlam,https://www.reddit.com/r/Python/comments/1obzlam/about_me_and_the_order_i_code_in/,About Me (and the order i code in),Consistent_Hall631,2025-10-21 09:13:32,0,4,"hi, i recently started python, and i am really happy, i enjoy it very much and it has become a hobby,

the order i code in: 1: imports 2 variables: 3:...","hi, i recently started python, and i am really happy, i enjoy it very much and it has become a hobby,

the order i code in: 1: imports 2 variables: 3: normal code (print, lists etc) 4: if/else statements. (i put notes at the tops of each section.)",2025-10-21T10:32:07.263152
1obxzya,https://www.reddit.com/r/Python/comments/1obxzya/tuesday_daily_thread_advanced_questions/,Tuesday Daily Thread: Advanced questions,AutoModerator,2025-10-21 08:00:30,1,0,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about ...","# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",2025-10-21T10:32:07.263209
1obrz11,https://www.reddit.com/r/Python/comments/1obrz11/assemblytominecraftcommandblockcompiler_python/,Assembly-to-Minecraft-Command-Block-Compiler (Python) ‚Äî updated ‚Äî testers & contributors wanted,bowser04410,2025-10-21 03:57:47,3,0,"¬†I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedba...","I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedback, and contributors. Repo:¬†[https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler](https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler)

What My Project Does:

* Parses a tiny assembly-style language (labels, arithmetic, branches, simple I/O) and emits Minecraft command sequences tailored for command blocks.
* Produces low-level, inspectable output so you can see how program logic maps to in-game command-block logic.
* Implemented in Python for readability and easy contribution.

Target Audience:

* Minecraft command-block creators who want to run low-level programs without mods.
* Hobbyist compiler writers and learners looking for a compact Python codegen example.
* Contributors interested in parsing, code generation, testing strategies, or command optimization.
* This is an educational/hobby tool for small demos and experiments ‚Äî not a production compiler for large-scale programs.

Comparison (how it differs from alternatives):

* Assembly-focused: unlike high-level language‚ÜíMinecraft tools, it targets an assembly-like input so outputs are low-level and easy to debug in command blocks.
* Python-first and lightweight: prioritizes clarity and contributor-friendliness over performance.
* Command-block oriented: designed to work with vanilla in-game command blocks (does not target datapacks or mods).

How to help:

* Test: run examples, try outputs in a world, and note Minecraft version and exact steps when something fails.
* Report: open issues with minimal reproduction files and steps.
* Contribute: PRs welcome for bug fixes, examples, optimizations, docs, or tests ‚Äî look for good-first-issue.",2025-10-21T10:32:07.263289
1obqtmz,https://www.reddit.com/r/Python/comments/1obqtmz/has_any_library_emerged_as_the_replacement_for/,Has any library emerged as the replacement for Poliastro?,KerPop42,2025-10-21 03:15:23,2,2,"I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-...","I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-go. Even if you restrict yourself to 3.11 you *also* have to go back to pip <24.1 because of how some package requirements are written. I've looked around and can't find any other orbital dynamics libraries that are more than personal projects. Is the field just dead in python?",2025-10-21T10:32:07.263354
1obprx2,https://www.reddit.com/r/Python/comments/1obprx2/building_an_opensource_observability_tool_for/,Building an open-source observability tool for multi-agent systems - looking for feedback,Standard_Career_8603,2025-10-21 02:35:45,3,4,"I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-sour...","I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-source observability tool.   
  
**What it does**:  
\- Tracks information flow between agents   
\- Shows which tools are being called with what parameters   
\- Monitors how prompt changes affect agent behavior   
\- Works in both development and production   
  
**The gap I'm trying to fill**: Existing tools (LangSmith, LangFuse, AgentOps) are great at LLM observability (tokens, costs, latency), but I feel like they don't help much with multi-agent coordination. They show you **what** happened but not **why** agents failed to coordinate.   
  
  
**Looking for feedback**:  
1. Have you built multi-agent systems? What do you use for debugging?   
2. Does this solve a real problem or am I overengineering?   
3. What features would actually make this useful for you? Still early days, but happy to share the repo if folks are interested.",2025-10-21T10:32:07.263378
1obpjnf,https://www.reddit.com/r/Python/comments/1obpjnf/i_built_a_tool_that_runs_your_python_function_on/,i built a tool that runs your python function on 10k vms in parallel with one line of code.,Ok_Post_149,2025-10-21 02:25:33,11,9,"# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to ...","# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to hand it over to DevOps, the backlog would grow, and overall throughput would tank.

So I built **Burla**, the simplest cluster compute software that lets even Python beginners run code on massive clusters in the cloud. It‚Äôs one function with two parameters: the function and the inputs. You can bring your own Docker image, set hardware requirements, and run jobs as background tasks so you can fire and forget. Responses are fast, and you can call a million simple functions in just a few seconds.

Burla is built for embarrassingly parallel workloads like preprocessing data, hyperparameter tuning, and batch inference.

# Target Audience

Engineers, data scientists, and analysts who want to scale their code in production or research environments without dealing with infrastructure.

# Comparison

Unlike Ray or Dask, Burla doesn‚Äôt require cluster setup, orchestration, or YAML configs. It‚Äôs just:

    from burla import remote_parallel_map
    remote_parallel_map(func, inputs)
    

That‚Äôs it. It automatically handles distribution, retries, logging, and scaling across up to 10,000 VMs.

# Open Source & Free Credits

Burla is open source, and I‚Äôm improving the installation process. I also created managed versions for testing. If you want to try it, I‚Äôll cover 1,000 CPU hours and 100 GPU hours. Email me at [joe@burla.dev]() if interested.

Here‚Äôs a short intro video:  
[https://www.youtube.com/watch?v=9d22y\_kWjyE](https://www.youtube.com/watch?v=9d22y_kWjyE)

GitHub ‚Üí¬†[https://github.com/Burla-Cloud/burla](https://github.com/Burla-Cloud/burla)  
Docs ‚Üí¬†[https://docs.burla.dev](https://docs.burla.dev/)",2025-10-21T10:32:07.263415
1oborpj,https://www.reddit.com/r/Python/comments/1oborpj/i_made_a_python_bot_that_turns_your_text_images/,I made a Python bot that turns your text & images into diagrams right in Telegram.,No_Mongoose_8139,2025-10-21 01:51:22,0,5,"https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project ...","https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project structure, a mind map, or just explain a concept. Every time, I had to open heavy editors like Miro or Figma, which felt like overkill.

So, I decided to build a tool that lives right inside the app I use for communication all day: Telegram.

I'm excited to share my side project: **Diagrammer Bot**. It's a simple yet powerful bot in Python that lets you create diagrams on the fly.

**Here are the key features:**
*   **Text & Image Nodes:** You can create blocks not just from text, but from any image you send.
*   **Full Editing:** Create, connect, edit, and delete both nodes and edges.
*   **Project System:** Save your diagrams with custom names, load them later, or start new ones.
*   **Themes & Export:** Switch between a sleek dark mode and a clean light mode. Export your final diagram as a high-quality PNG.
*   **Open-Source:** The entire project is available on GitHub!

**Tech Stack:** Python, `python-telegram-bot`, `Graphviz` for rendering, and `Pillow` for watermarking.

I would be incredibly grateful for any feedback, feature ideas, or bug reports. And of course, a star ‚≠ê on GitHub would make my day!

*   **Try the bot here:** [https://t.me/diagrammer_robot](https://t.me/diagrammer_robot)
*   **Check out the code on GitHub:** [https://github.com/Lixher/Diagrammer-bot](https://github.com/Lixher/Diagrammer-Bot)",2025-10-21T10:32:07.263669
1oborib,https://www.reddit.com/r/Python/comments/1oborib/i_built_a_persistent_kv_store_in_pure_python/,I built a Persistent KV Store in Pure Python,vollhard-natta,2025-10-21 01:51:07,30,1,"Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been work...","Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been working on for the past few months. It is a lightweight, persistent key-value storage engine in Python, built from scratch to understand and implement the Log-Structured Merge-tree (LSM-tree) architecture. The project, which is fully open-source, is explicitly optimized for write-heavy workloads. 



# Core Architecture:

The engine implements the three fundamental LSM components: the **Write Ahead Log (WAL)** for durability, an in-memory **Memtable** (using `SortedDict` for sorted writes), and immutable persistent **SSTables (Sorted String Tables)**.

Some features that I'm proud of:

* **Async Compaction**: Merging and compaction are handled by a **separate background worker thread**. The process itself takes a hybrid approach.
* **Client/Server Model**: The entire storage engine runs behind a **FastAPI server**. This allows multiple clients to connect via REST APIs or the included CLI tool.
* **Efficient Range Queries**: Added full support for range queries from `start_key` to `end_key`. This is achieved via a memory-efficient **k-way merge iterator** that combines results from the Memtable and all SSTables. The FastAPI server delivers the results using a `StreamingResponse` to prevent memory exhaustion for large result sets.
* **Bloom Filter**: Implemented a **Bloom Filter** for each SSTable to drastically reduce disk I/O by confirming that a key definitely does not exist before attempting a disk seek.
* **Binary Storage**: SSTables now use **Msgpack binary format** instead of JSON for smaller file sizes and reduced CPU load during serialization/deserialization.

My favourite part of the project is that I actually got to see a practical implementation of [Merge Sorted Arrays - GeeksforGeeks](https://www.geeksforgeeks.org/dsa/merge-k-sorted-arrays/). This is a pretty popular interview question and to see DSA being actually implemented is a crazy moment.

# Get Started

    pip install lsm_storage_engine_key_value_store

**Usage via CLI/Server:**

1. **Terminal 1 (Server):** `lsm-server`
2. **Terminal 2 (Client):** `lsm-cli` (Follow the CLI help for commands).

# Looking for Feedback

I'd love to hear your thoughts about this implementation and how I can make it better and what features I can add in later versions. Ideas and constructive criticism are always welcome. I'm also looking for contributors, if anyone is interested, please feel free to PM and we can discuss.

Repo link: [Shashank1985/storage-engine](https://github.com/Shashank1985/storage-engine)  
Thanks!!",2025-10-21T10:32:07.263729
1obo3rg,https://www.reddit.com/r/Python/comments/1obo3rg/kryypto_an_open_source_python_text_editor/,Kryypto an open source python text editor.,SxxVe,2025-10-21 01:21:30,3,5,"Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
*...","Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
* Full Keyboard Support ‚Äì no need for the mouse, every feature is accessible via hotkeys
* Discord presence
* Live MarkDown Preview
* Session Restore
* Custom Styling
   * `config\configuration.cfg` for editor settings
   * CSS for theme and style customization
* Editing Tools
   * Find text in file
   * Jump to line
   * Adjustable cursor (color & width)
   * Configurable animations (types & duration)
* Git & GitHub Integration
   * View total commits
   * See last commit message & date
   * Track file changes directly inside the editor
* Productivity Features
   * Autocompleter
   * Builtin Terminal
   * Docstring panel (hover to see function/class docstring)
   * Tab-based file switching
   * Bookmarking lines
   * Custom title bar
* Syntax Highlighting for
   * Python
   * CSS
   * JSON
   * Config files
   * Markdown

Target Audience

* Developers who prefer keyboard-driven workflows (no mouse required)
* Users looking for a lightweight alternative to heavier IDEs
* People who want to customize their editor with CSS and configuration settings
* Anyone experimenting with Python-based editors or open-source text editing tools

# Comparison:

* Lightweight ‚Äì minimal overhead, focused on speed
* Highly customizable ‚Äì styling via CSS and config files
* Keyboard-centric ‚Äì designed to be fully usable without a mouse

  
github repo: [https://github.com/NaturalCapsule/Kryypto](https://github.com/NaturalCapsule/Kryypto)

  
website: [https://naturalcapsule.github.io/Kryypto/](https://naturalcapsule.github.io/Kryypto/)",2025-10-21T10:32:07.263807
1obo0ze,https://www.reddit.com/r/Python/comments/1obo0ze/forgetting_python/,Forgetting Python,Ashamed-Society-2875,2025-10-21 01:17:52,0,4,"I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping f...","I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping for college exams , now when i come back to python it feels i have lost my level and my touch i feel like fkn loser , all those hrs spent in 8th grade for nothing , i forgot a lot , is it common or just me???",2025-10-21T10:32:07.263865
1obzlam,https://www.reddit.com/r/Python/comments/1obzlam/about_me_and_the_order_i_code_in/,About Me (and the order i code in),Consistent_Hall631,2025-10-21 09:13:32,0,4,"hi, i recently started python, and i am really happy, i enjoy it very much and it has become a hobby,

the order i code in: 1: imports 2 variables: 3:...","hi, i recently started python, and i am really happy, i enjoy it very much and it has become a hobby,

the order i code in: 1: imports 2 variables: 3: normal code (print, lists etc) 4: if/else statements. (i put notes at the tops of each section.)",2025-10-21T10:33:33.117050
1obxzya,https://www.reddit.com/r/Python/comments/1obxzya/tuesday_daily_thread_advanced_questions/,Tuesday Daily Thread: Advanced questions,AutoModerator,2025-10-21 08:00:30,1,0,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about ...","# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",2025-10-21T10:33:33.117108
1obrz11,https://www.reddit.com/r/Python/comments/1obrz11/assemblytominecraftcommandblockcompiler_python/,Assembly-to-Minecraft-Command-Block-Compiler (Python) ‚Äî updated ‚Äî testers & contributors wanted,bowser04410,2025-10-21 03:57:47,5,0,"¬†I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedba...","I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedback, and contributors. Repo:¬†[https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler](https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler)

What My Project Does:

* Parses a tiny assembly-style language (labels, arithmetic, branches, simple I/O) and emits Minecraft command sequences tailored for command blocks.
* Produces low-level, inspectable output so you can see how program logic maps to in-game command-block logic.
* Implemented in Python for readability and easy contribution.

Target Audience:

* Minecraft command-block creators who want to run low-level programs without mods.
* Hobbyist compiler writers and learners looking for a compact Python codegen example.
* Contributors interested in parsing, code generation, testing strategies, or command optimization.
* This is an educational/hobby tool for small demos and experiments ‚Äî not a production compiler for large-scale programs.

Comparison (how it differs from alternatives):

* Assembly-focused: unlike high-level language‚ÜíMinecraft tools, it targets an assembly-like input so outputs are low-level and easy to debug in command blocks.
* Python-first and lightweight: prioritizes clarity and contributor-friendliness over performance.
* Command-block oriented: designed to work with vanilla in-game command blocks (does not target datapacks or mods).

How to help:

* Test: run examples, try outputs in a world, and note Minecraft version and exact steps when something fails.
* Report: open issues with minimal reproduction files and steps.
* Contribute: PRs welcome for bug fixes, examples, optimizations, docs, or tests ‚Äî look for good-first-issue.",2025-10-21T10:33:33.117182
1obqtmz,https://www.reddit.com/r/Python/comments/1obqtmz/has_any_library_emerged_as_the_replacement_for/,Has any library emerged as the replacement for Poliastro?,KerPop42,2025-10-21 03:15:23,2,2,"I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-...","I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-go. Even if you restrict yourself to 3.11 you *also* have to go back to pip <24.1 because of how some package requirements are written. I've looked around and can't find any other orbital dynamics libraries that are more than personal projects. Is the field just dead in python?",2025-10-21T10:33:33.117251
1obprx2,https://www.reddit.com/r/Python/comments/1obprx2/building_an_opensource_observability_tool_for/,Building an open-source observability tool for multi-agent systems - looking for feedback,Standard_Career_8603,2025-10-21 02:35:45,5,4,"I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-sour...","I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-source observability tool.   
  
**What it does**:  
\- Tracks information flow between agents   
\- Shows which tools are being called with what parameters   
\- Monitors how prompt changes affect agent behavior   
\- Works in both development and production   
  
**The gap I'm trying to fill**: Existing tools (LangSmith, LangFuse, AgentOps) are great at LLM observability (tokens, costs, latency), but I feel like they don't help much with multi-agent coordination. They show you **what** happened but not **why** agents failed to coordinate.   
  
  
**Looking for feedback**:  
1. Have you built multi-agent systems? What do you use for debugging?   
2. Does this solve a real problem or am I overengineering?   
3. What features would actually make this useful for you? Still early days, but happy to share the repo if folks are interested.",2025-10-21T10:33:33.117277
1obpjnf,https://www.reddit.com/r/Python/comments/1obpjnf/i_built_a_tool_that_runs_your_python_function_on/,i built a tool that runs your python function on 10k vms in parallel with one line of code.,Ok_Post_149,2025-10-21 02:25:33,12,9,"# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to ...","# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to hand it over to DevOps, the backlog would grow, and overall throughput would tank.

So I built **Burla**, the simplest cluster compute software that lets even Python beginners run code on massive clusters in the cloud. It‚Äôs one function with two parameters: the function and the inputs. You can bring your own Docker image, set hardware requirements, and run jobs as background tasks so you can fire and forget. Responses are fast, and you can call a million simple functions in just a few seconds.

Burla is built for embarrassingly parallel workloads like preprocessing data, hyperparameter tuning, and batch inference.

# Target Audience

Engineers, data scientists, and analysts who want to scale their code in production or research environments without dealing with infrastructure.

# Comparison

Unlike Ray or Dask, Burla doesn‚Äôt require cluster setup, orchestration, or YAML configs. It‚Äôs just:

    from burla import remote_parallel_map
    remote_parallel_map(func, inputs)
    

That‚Äôs it. It automatically handles distribution, retries, logging, and scaling across up to 10,000 VMs.

# Open Source & Free Credits

Burla is open source, and I‚Äôm improving the installation process. I also created managed versions for testing. If you want to try it, I‚Äôll cover 1,000 CPU hours and 100 GPU hours. Email me at [joe@burla.dev]() if interested.

Here‚Äôs a short intro video:  
[https://www.youtube.com/watch?v=9d22y\_kWjyE](https://www.youtube.com/watch?v=9d22y_kWjyE)

GitHub ‚Üí¬†[https://github.com/Burla-Cloud/burla](https://github.com/Burla-Cloud/burla)  
Docs ‚Üí¬†[https://docs.burla.dev](https://docs.burla.dev/)",2025-10-21T10:33:33.117316
1oborpj,https://www.reddit.com/r/Python/comments/1oborpj/i_made_a_python_bot_that_turns_your_text_images/,I made a Python bot that turns your text & images into diagrams right in Telegram.,No_Mongoose_8139,2025-10-21 01:51:22,0,5,"https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project ...","https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project structure, a mind map, or just explain a concept. Every time, I had to open heavy editors like Miro or Figma, which felt like overkill.

So, I decided to build a tool that lives right inside the app I use for communication all day: Telegram.

I'm excited to share my side project: **Diagrammer Bot**. It's a simple yet powerful bot in Python that lets you create diagrams on the fly.

**Here are the key features:**
*   **Text & Image Nodes:** You can create blocks not just from text, but from any image you send.
*   **Full Editing:** Create, connect, edit, and delete both nodes and edges.
*   **Project System:** Save your diagrams with custom names, load them later, or start new ones.
*   **Themes & Export:** Switch between a sleek dark mode and a clean light mode. Export your final diagram as a high-quality PNG.
*   **Open-Source:** The entire project is available on GitHub!

**Tech Stack:** Python, `python-telegram-bot`, `Graphviz` for rendering, and `Pillow` for watermarking.

I would be incredibly grateful for any feedback, feature ideas, or bug reports. And of course, a star ‚≠ê on GitHub would make my day!

*   **Try the bot here:** [https://t.me/diagrammer_robot](https://t.me/diagrammer_robot)
*   **Check out the code on GitHub:** [https://github.com/Lixher/Diagrammer-bot](https://github.com/Lixher/Diagrammer-Bot)",2025-10-21T10:33:33.117605
1oborib,https://www.reddit.com/r/Python/comments/1oborib/i_built_a_persistent_kv_store_in_pure_python/,I built a Persistent KV Store in Pure Python,vollhard-natta,2025-10-21 01:51:07,31,1,"Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been work...","Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been working on for the past few months. It is a lightweight, persistent key-value storage engine in Python, built from scratch to understand and implement the Log-Structured Merge-tree (LSM-tree) architecture. The project, which is fully open-source, is explicitly optimized for write-heavy workloads. 



# Core Architecture:

The engine implements the three fundamental LSM components: the **Write Ahead Log (WAL)** for durability, an in-memory **Memtable** (using `SortedDict` for sorted writes), and immutable persistent **SSTables (Sorted String Tables)**.

Some features that I'm proud of:

* **Async Compaction**: Merging and compaction are handled by a **separate background worker thread**. The process itself takes a hybrid approach.
* **Client/Server Model**: The entire storage engine runs behind a **FastAPI server**. This allows multiple clients to connect via REST APIs or the included CLI tool.
* **Efficient Range Queries**: Added full support for range queries from `start_key` to `end_key`. This is achieved via a memory-efficient **k-way merge iterator** that combines results from the Memtable and all SSTables. The FastAPI server delivers the results using a `StreamingResponse` to prevent memory exhaustion for large result sets.
* **Bloom Filter**: Implemented a **Bloom Filter** for each SSTable to drastically reduce disk I/O by confirming that a key definitely does not exist before attempting a disk seek.
* **Binary Storage**: SSTables now use **Msgpack binary format** instead of JSON for smaller file sizes and reduced CPU load during serialization/deserialization.

My favourite part of the project is that I actually got to see a practical implementation of [Merge Sorted Arrays - GeeksforGeeks](https://www.geeksforgeeks.org/dsa/merge-k-sorted-arrays/). This is a pretty popular interview question and to see DSA being actually implemented is a crazy moment.

# Get Started

    pip install lsm_storage_engine_key_value_store

**Usage via CLI/Server:**

1. **Terminal 1 (Server):** `lsm-server`
2. **Terminal 2 (Client):** `lsm-cli` (Follow the CLI help for commands).

# Looking for Feedback

I'd love to hear your thoughts about this implementation and how I can make it better and what features I can add in later versions. Ideas and constructive criticism are always welcome. I'm also looking for contributors, if anyone is interested, please feel free to PM and we can discuss.

Repo link: [Shashank1985/storage-engine](https://github.com/Shashank1985/storage-engine)  
Thanks!!",2025-10-21T10:33:33.117669
1obo3rg,https://www.reddit.com/r/Python/comments/1obo3rg/kryypto_an_open_source_python_text_editor/,Kryypto an open source python text editor.,SxxVe,2025-10-21 01:21:30,3,5,"Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
*...","Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
* Full Keyboard Support ‚Äì no need for the mouse, every feature is accessible via hotkeys
* Discord presence
* Live MarkDown Preview
* Session Restore
* Custom Styling
   * `config\configuration.cfg` for editor settings
   * CSS for theme and style customization
* Editing Tools
   * Find text in file
   * Jump to line
   * Adjustable cursor (color & width)
   * Configurable animations (types & duration)
* Git & GitHub Integration
   * View total commits
   * See last commit message & date
   * Track file changes directly inside the editor
* Productivity Features
   * Autocompleter
   * Builtin Terminal
   * Docstring panel (hover to see function/class docstring)
   * Tab-based file switching
   * Bookmarking lines
   * Custom title bar
* Syntax Highlighting for
   * Python
   * CSS
   * JSON
   * Config files
   * Markdown

Target Audience

* Developers who prefer keyboard-driven workflows (no mouse required)
* Users looking for a lightweight alternative to heavier IDEs
* People who want to customize their editor with CSS and configuration settings
* Anyone experimenting with Python-based editors or open-source text editing tools

# Comparison:

* Lightweight ‚Äì minimal overhead, focused on speed
* Highly customizable ‚Äì styling via CSS and config files
* Keyboard-centric ‚Äì designed to be fully usable without a mouse

  
github repo: [https://github.com/NaturalCapsule/Kryypto](https://github.com/NaturalCapsule/Kryypto)

  
website: [https://naturalcapsule.github.io/Kryypto/](https://naturalcapsule.github.io/Kryypto/)",2025-10-21T10:33:33.117743
1obo0ze,https://www.reddit.com/r/Python/comments/1obo0ze/forgetting_python/,Forgetting Python,Ashamed-Society-2875,2025-10-21 01:17:52,0,4,"I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping f...","I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping for college exams , now when i come back to python it feels i have lost my level and my touch i feel like fkn loser , all those hrs spent in 8th grade for nothing , i forgot a lot , is it common or just me???",2025-10-21T10:33:33.117808
1obzlam,https://www.reddit.com/r/Python/comments/1obzlam/about_me_and_the_order_i_code_in/,About Me (and the order i code in),Consistent_Hall631,2025-10-21 09:13:32,0,4,"hi, i recently started python, and i am really happy, i enjoy it very much and it has become a hobby,

the order i code in: 1: imports 2 variables: 3:...","hi, i recently started python, and i am really happy, i enjoy it very much and it has become a hobby,

the order i code in: 1: imports 2 variables: 3: normal code (print, lists etc) 4: if/else statements. (i put notes at the tops of each section.)",2025-10-21T10:34:52.793416
1obxzya,https://www.reddit.com/r/Python/comments/1obxzya/tuesday_daily_thread_advanced_questions/,Tuesday Daily Thread: Advanced questions,AutoModerator,2025-10-21 08:00:30,1,0,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about ...","# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",2025-10-21T10:34:52.793464
1obrz11,https://www.reddit.com/r/Python/comments/1obrz11/assemblytominecraftcommandblockcompiler_python/,Assembly-to-Minecraft-Command-Block-Compiler (Python) ‚Äî updated ‚Äî testers & contributors wanted,bowser04410,2025-10-21 03:57:47,1,0,"¬†I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedba...","I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedback, and contributors. Repo:¬†[https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler](https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler)

What My Project Does:

* Parses a tiny assembly-style language (labels, arithmetic, branches, simple I/O) and emits Minecraft command sequences tailored for command blocks.
* Produces low-level, inspectable output so you can see how program logic maps to in-game command-block logic.
* Implemented in Python for readability and easy contribution.

Target Audience:

* Minecraft command-block creators who want to run low-level programs without mods.
* Hobbyist compiler writers and learners looking for a compact Python codegen example.
* Contributors interested in parsing, code generation, testing strategies, or command optimization.
* This is an educational/hobby tool for small demos and experiments ‚Äî not a production compiler for large-scale programs.

Comparison (how it differs from alternatives):

* Assembly-focused: unlike high-level language‚ÜíMinecraft tools, it targets an assembly-like input so outputs are low-level and easy to debug in command blocks.
* Python-first and lightweight: prioritizes clarity and contributor-friendliness over performance.
* Command-block oriented: designed to work with vanilla in-game command blocks (does not target datapacks or mods).

How to help:

* Test: run examples, try outputs in a world, and note Minecraft version and exact steps when something fails.
* Report: open issues with minimal reproduction files and steps.
* Contribute: PRs welcome for bug fixes, examples, optimizations, docs, or tests ‚Äî look for good-first-issue.",2025-10-21T10:34:52.793535
1obqtmz,https://www.reddit.com/r/Python/comments/1obqtmz/has_any_library_emerged_as_the_replacement_for/,Has any library emerged as the replacement for Poliastro?,KerPop42,2025-10-21 03:15:23,2,2,"I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-...","I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-go. Even if you restrict yourself to 3.11 you *also* have to go back to pip <24.1 because of how some package requirements are written. I've looked around and can't find any other orbital dynamics libraries that are more than personal projects. Is the field just dead in python?",2025-10-21T10:34:52.793599
1obprx2,https://www.reddit.com/r/Python/comments/1obprx2/building_an_opensource_observability_tool_for/,Building an open-source observability tool for multi-agent systems - looking for feedback,Standard_Career_8603,2025-10-21 02:35:45,3,4,"I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-sour...","I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-source observability tool.   
  
**What it does**:  
\- Tracks information flow between agents   
\- Shows which tools are being called with what parameters   
\- Monitors how prompt changes affect agent behavior   
\- Works in both development and production   
  
**The gap I'm trying to fill**: Existing tools (LangSmith, LangFuse, AgentOps) are great at LLM observability (tokens, costs, latency), but I feel like they don't help much with multi-agent coordination. They show you **what** happened but not **why** agents failed to coordinate.   
  
  
**Looking for feedback**:  
1. Have you built multi-agent systems? What do you use for debugging?   
2. Does this solve a real problem or am I overengineering?   
3. What features would actually make this useful for you? Still early days, but happy to share the repo if folks are interested.",2025-10-21T10:34:52.793623
1obpjnf,https://www.reddit.com/r/Python/comments/1obpjnf/i_built_a_tool_that_runs_your_python_function_on/,i built a tool that runs your python function on 10k vms in parallel with one line of code.,Ok_Post_149,2025-10-21 02:25:33,13,9,"# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to ...","# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to hand it over to DevOps, the backlog would grow, and overall throughput would tank.

So I built **Burla**, the simplest cluster compute software that lets even Python beginners run code on massive clusters in the cloud. It‚Äôs one function with two parameters: the function and the inputs. You can bring your own Docker image, set hardware requirements, and run jobs as background tasks so you can fire and forget. Responses are fast, and you can call a million simple functions in just a few seconds.

Burla is built for embarrassingly parallel workloads like preprocessing data, hyperparameter tuning, and batch inference.

# Target Audience

Engineers, data scientists, and analysts who want to scale their code in production or research environments without dealing with infrastructure.

# Comparison

Unlike Ray or Dask, Burla doesn‚Äôt require cluster setup, orchestration, or YAML configs. It‚Äôs just:

    from burla import remote_parallel_map
    remote_parallel_map(func, inputs)
    

That‚Äôs it. It automatically handles distribution, retries, logging, and scaling across up to 10,000 VMs.

# Open Source & Free Credits

Burla is open source, and I‚Äôm improving the installation process. I also created managed versions for testing. If you want to try it, I‚Äôll cover 1,000 CPU hours and 100 GPU hours. Email me at [joe@burla.dev]() if interested.

Here‚Äôs a short intro video:  
[https://www.youtube.com/watch?v=9d22y\_kWjyE](https://www.youtube.com/watch?v=9d22y_kWjyE)

GitHub ‚Üí¬†[https://github.com/Burla-Cloud/burla](https://github.com/Burla-Cloud/burla)  
Docs ‚Üí¬†[https://docs.burla.dev](https://docs.burla.dev/)",2025-10-21T10:34:52.793660
1oborpj,https://www.reddit.com/r/Python/comments/1oborpj/i_made_a_python_bot_that_turns_your_text_images/,I made a Python bot that turns your text & images into diagrams right in Telegram.,No_Mongoose_8139,2025-10-21 01:51:22,0,5,"https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project ...","https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project structure, a mind map, or just explain a concept. Every time, I had to open heavy editors like Miro or Figma, which felt like overkill.

So, I decided to build a tool that lives right inside the app I use for communication all day: Telegram.

I'm excited to share my side project: **Diagrammer Bot**. It's a simple yet powerful bot in Python that lets you create diagrams on the fly.

**Here are the key features:**
*   **Text & Image Nodes:** You can create blocks not just from text, but from any image you send.
*   **Full Editing:** Create, connect, edit, and delete both nodes and edges.
*   **Project System:** Save your diagrams with custom names, load them later, or start new ones.
*   **Themes & Export:** Switch between a sleek dark mode and a clean light mode. Export your final diagram as a high-quality PNG.
*   **Open-Source:** The entire project is available on GitHub!

**Tech Stack:** Python, `python-telegram-bot`, `Graphviz` for rendering, and `Pillow` for watermarking.

I would be incredibly grateful for any feedback, feature ideas, or bug reports. And of course, a star ‚≠ê on GitHub would make my day!

*   **Try the bot here:** [https://t.me/diagrammer_robot](https://t.me/diagrammer_robot)
*   **Check out the code on GitHub:** [https://github.com/Lixher/Diagrammer-bot](https://github.com/Lixher/Diagrammer-Bot)",2025-10-21T10:34:52.793928
1oborib,https://www.reddit.com/r/Python/comments/1oborib/i_built_a_persistent_kv_store_in_pure_python/,I built a Persistent KV Store in Pure Python,vollhard-natta,2025-10-21 01:51:07,36,1,"Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been work...","Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been working on for the past few months. It is a lightweight, persistent key-value storage engine in Python, built from scratch to understand and implement the Log-Structured Merge-tree (LSM-tree) architecture. The project, which is fully open-source, is explicitly optimized for write-heavy workloads. 



# Core Architecture:

The engine implements the three fundamental LSM components: the **Write Ahead Log (WAL)** for durability, an in-memory **Memtable** (using `SortedDict` for sorted writes), and immutable persistent **SSTables (Sorted String Tables)**.

Some features that I'm proud of:

* **Async Compaction**: Merging and compaction are handled by a **separate background worker thread**. The process itself takes a hybrid approach.
* **Client/Server Model**: The entire storage engine runs behind a **FastAPI server**. This allows multiple clients to connect via REST APIs or the included CLI tool.
* **Efficient Range Queries**: Added full support for range queries from `start_key` to `end_key`. This is achieved via a memory-efficient **k-way merge iterator** that combines results from the Memtable and all SSTables. The FastAPI server delivers the results using a `StreamingResponse` to prevent memory exhaustion for large result sets.
* **Bloom Filter**: Implemented a **Bloom Filter** for each SSTable to drastically reduce disk I/O by confirming that a key definitely does not exist before attempting a disk seek.
* **Binary Storage**: SSTables now use **Msgpack binary format** instead of JSON for smaller file sizes and reduced CPU load during serialization/deserialization.

My favourite part of the project is that I actually got to see a practical implementation of [Merge Sorted Arrays - GeeksforGeeks](https://www.geeksforgeeks.org/dsa/merge-k-sorted-arrays/). This is a pretty popular interview question and to see DSA being actually implemented is a crazy moment.

# Get Started

    pip install lsm_storage_engine_key_value_store

**Usage via CLI/Server:**

1. **Terminal 1 (Server):** `lsm-server`
2. **Terminal 2 (Client):** `lsm-cli` (Follow the CLI help for commands).

# Looking for Feedback

I'd love to hear your thoughts about this implementation and how I can make it better and what features I can add in later versions. Ideas and constructive criticism are always welcome. I'm also looking for contributors, if anyone is interested, please feel free to PM and we can discuss.

Repo link: [Shashank1985/storage-engine](https://github.com/Shashank1985/storage-engine)  
Thanks!!",2025-10-21T10:34:52.793990
1obo3rg,https://www.reddit.com/r/Python/comments/1obo3rg/kryypto_an_open_source_python_text_editor/,Kryypto an open source python text editor.,SxxVe,2025-10-21 01:21:30,3,5,"Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
*...","Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
* Full Keyboard Support ‚Äì no need for the mouse, every feature is accessible via hotkeys
* Discord presence
* Live MarkDown Preview
* Session Restore
* Custom Styling
   * `config\configuration.cfg` for editor settings
   * CSS for theme and style customization
* Editing Tools
   * Find text in file
   * Jump to line
   * Adjustable cursor (color & width)
   * Configurable animations (types & duration)
* Git & GitHub Integration
   * View total commits
   * See last commit message & date
   * Track file changes directly inside the editor
* Productivity Features
   * Autocompleter
   * Builtin Terminal
   * Docstring panel (hover to see function/class docstring)
   * Tab-based file switching
   * Bookmarking lines
   * Custom title bar
* Syntax Highlighting for
   * Python
   * CSS
   * JSON
   * Config files
   * Markdown

Target Audience

* Developers who prefer keyboard-driven workflows (no mouse required)
* Users looking for a lightweight alternative to heavier IDEs
* People who want to customize their editor with CSS and configuration settings
* Anyone experimenting with Python-based editors or open-source text editing tools

# Comparison:

* Lightweight ‚Äì minimal overhead, focused on speed
* Highly customizable ‚Äì styling via CSS and config files
* Keyboard-centric ‚Äì designed to be fully usable without a mouse

  
github repo: [https://github.com/NaturalCapsule/Kryypto](https://github.com/NaturalCapsule/Kryypto)

  
website: [https://naturalcapsule.github.io/Kryypto/](https://naturalcapsule.github.io/Kryypto/)",2025-10-21T10:34:52.794062
1obo0ze,https://www.reddit.com/r/Python/comments/1obo0ze/forgetting_python/,Forgetting Python,Ashamed-Society-2875,2025-10-21 01:17:52,0,4,"I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping f...","I started python when i was 9th grade through udemy lectures, i watched a lot of them but didnt solve problems after that i took 2-3 gap for preping for college exams , now when i come back to python it feels i have lost my level and my touch i feel like fkn loser , all those hrs spent in 8th grade for nothing , i forgot a lot , is it common or just me???",2025-10-21T10:34:52.794120
1oc1c3k,https://www.reddit.com/r/Python/comments/1oc1c3k/python_vpn_or_not/,Python VPN? Or not?,SlowJackfruit8305,2025-10-21 10:35:58,1,0,"I have been learning to code in python, and have some networking and hardware experience.

Is python appropriate for writing a VPN?

I have looked int...","I have been learning to code in python, and have some networking and hardware experience.

Is python appropriate for writing a VPN?

I have looked into the components used to create this type of software.",2025-10-21T10:36:21.198002
1obzlam,https://www.reddit.com/r/Python/comments/1obzlam/about_me_and_the_order_i_code_in/,About Me (and the order i code in),Consistent_Hall631,2025-10-21 09:13:32,0,4,"hi, i recently started python, and i am really happy, i enjoy it very much and it has become a hobby,

the order i code in: 1: imports 2 variables: 3:...","hi, i recently started python, and i am really happy, i enjoy it very much and it has become a hobby,

the order i code in: 1: imports 2 variables: 3: normal code (print, lists etc) 4: if/else statements. (i put notes at the tops of each section.)",2025-10-21T10:36:21.198066
1obxzya,https://www.reddit.com/r/Python/comments/1obxzya/tuesday_daily_thread_advanced_questions/,Tuesday Daily Thread: Advanced questions,AutoModerator,2025-10-21 08:00:30,1,0,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about ...","# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",2025-10-21T10:36:21.198091
1obrz11,https://www.reddit.com/r/Python/comments/1obrz11/assemblytominecraftcommandblockcompiler_python/,Assembly-to-Minecraft-Command-Block-Compiler (Python) ‚Äî updated ‚Äî testers & contributors wanted,bowser04410,2025-10-21 03:57:47,2,0,"¬†I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedba...","I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedback, and contributors. Repo:¬†[https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler](https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler)

What My Project Does:

* Parses a tiny assembly-style language (labels, arithmetic, branches, simple I/O) and emits Minecraft command sequences tailored for command blocks.
* Produces low-level, inspectable output so you can see how program logic maps to in-game command-block logic.
* Implemented in Python for readability and easy contribution.

Target Audience:

* Minecraft command-block creators who want to run low-level programs without mods.
* Hobbyist compiler writers and learners looking for a compact Python codegen example.
* Contributors interested in parsing, code generation, testing strategies, or command optimization.
* This is an educational/hobby tool for small demos and experiments ‚Äî not a production compiler for large-scale programs.

Comparison (how it differs from alternatives):

* Assembly-focused: unlike high-level language‚ÜíMinecraft tools, it targets an assembly-like input so outputs are low-level and easy to debug in command blocks.
* Python-first and lightweight: prioritizes clarity and contributor-friendliness over performance.
* Command-block oriented: designed to work with vanilla in-game command blocks (does not target datapacks or mods).

How to help:

* Test: run examples, try outputs in a world, and note Minecraft version and exact steps when something fails.
* Report: open issues with minimal reproduction files and steps.
* Contribute: PRs welcome for bug fixes, examples, optimizations, docs, or tests ‚Äî look for good-first-issue.",2025-10-21T10:36:21.198164
1obqtmz,https://www.reddit.com/r/Python/comments/1obqtmz/has_any_library_emerged_as_the_replacement_for/,Has any library emerged as the replacement for Poliastro?,KerPop42,2025-10-21 03:15:23,2,2,"I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-...","I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-go. Even if you restrict yourself to 3.11 you *also* have to go back to pip <24.1 because of how some package requirements are written. I've looked around and can't find any other orbital dynamics libraries that are more than personal projects. Is the field just dead in python?",2025-10-21T10:36:21.198229
1obprx2,https://www.reddit.com/r/Python/comments/1obprx2/building_an_opensource_observability_tool_for/,Building an open-source observability tool for multi-agent systems - looking for feedback,Standard_Career_8603,2025-10-21 02:35:45,6,4,"I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-sour...","I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-source observability tool.   
  
**What it does**:  
\- Tracks information flow between agents   
\- Shows which tools are being called with what parameters   
\- Monitors how prompt changes affect agent behavior   
\- Works in both development and production   
  
**The gap I'm trying to fill**: Existing tools (LangSmith, LangFuse, AgentOps) are great at LLM observability (tokens, costs, latency), but I feel like they don't help much with multi-agent coordination. They show you **what** happened but not **why** agents failed to coordinate.   
  
  
**Looking for feedback**:  
1. Have you built multi-agent systems? What do you use for debugging?   
2. Does this solve a real problem or am I overengineering?   
3. What features would actually make this useful for you? Still early days, but happy to share the repo if folks are interested.",2025-10-21T10:36:21.198253
1obpjnf,https://www.reddit.com/r/Python/comments/1obpjnf/i_built_a_tool_that_runs_your_python_function_on/,i built a tool that runs your python function on 10k vms in parallel with one line of code.,Ok_Post_149,2025-10-21 02:25:33,13,9,"# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to ...","# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to hand it over to DevOps, the backlog would grow, and overall throughput would tank.

So I built **Burla**, the simplest cluster compute software that lets even Python beginners run code on massive clusters in the cloud. It‚Äôs one function with two parameters: the function and the inputs. You can bring your own Docker image, set hardware requirements, and run jobs as background tasks so you can fire and forget. Responses are fast, and you can call a million simple functions in just a few seconds.

Burla is built for embarrassingly parallel workloads like preprocessing data, hyperparameter tuning, and batch inference.

# Target Audience

Engineers, data scientists, and analysts who want to scale their code in production or research environments without dealing with infrastructure.

# Comparison

Unlike Ray or Dask, Burla doesn‚Äôt require cluster setup, orchestration, or YAML configs. It‚Äôs just:

    from burla import remote_parallel_map
    remote_parallel_map(func, inputs)
    

That‚Äôs it. It automatically handles distribution, retries, logging, and scaling across up to 10,000 VMs.

# Open Source & Free Credits

Burla is open source, and I‚Äôm improving the installation process. I also created managed versions for testing. If you want to try it, I‚Äôll cover 1,000 CPU hours and 100 GPU hours. Email me at [joe@burla.dev]() if interested.

Here‚Äôs a short intro video:  
[https://www.youtube.com/watch?v=9d22y\_kWjyE](https://www.youtube.com/watch?v=9d22y_kWjyE)

GitHub ‚Üí¬†[https://github.com/Burla-Cloud/burla](https://github.com/Burla-Cloud/burla)  
Docs ‚Üí¬†[https://docs.burla.dev](https://docs.burla.dev/)",2025-10-21T10:36:21.198290
1oborpj,https://www.reddit.com/r/Python/comments/1oborpj/i_made_a_python_bot_that_turns_your_text_images/,I made a Python bot that turns your text & images into diagrams right in Telegram.,No_Mongoose_8139,2025-10-21 01:51:22,0,5,"https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project ...","https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project structure, a mind map, or just explain a concept. Every time, I had to open heavy editors like Miro or Figma, which felt like overkill.

So, I decided to build a tool that lives right inside the app I use for communication all day: Telegram.

I'm excited to share my side project: **Diagrammer Bot**. It's a simple yet powerful bot in Python that lets you create diagrams on the fly.

**Here are the key features:**
*   **Text & Image Nodes:** You can create blocks not just from text, but from any image you send.
*   **Full Editing:** Create, connect, edit, and delete both nodes and edges.
*   **Project System:** Save your diagrams with custom names, load them later, or start new ones.
*   **Themes & Export:** Switch between a sleek dark mode and a clean light mode. Export your final diagram as a high-quality PNG.
*   **Open-Source:** The entire project is available on GitHub!

**Tech Stack:** Python, `python-telegram-bot`, `Graphviz` for rendering, and `Pillow` for watermarking.

I would be incredibly grateful for any feedback, feature ideas, or bug reports. And of course, a star ‚≠ê on GitHub would make my day!

*   **Try the bot here:** [https://t.me/diagrammer_robot](https://t.me/diagrammer_robot)
*   **Check out the code on GitHub:** [https://github.com/Lixher/Diagrammer-bot](https://github.com/Lixher/Diagrammer-Bot)",2025-10-21T10:36:21.198905
1oborib,https://www.reddit.com/r/Python/comments/1oborib/i_built_a_persistent_kv_store_in_pure_python/,I built a Persistent KV Store in Pure Python,vollhard-natta,2025-10-21 01:51:07,34,1,"Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been work...","Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been working on for the past few months. It is a lightweight, persistent key-value storage engine in Python, built from scratch to understand and implement the Log-Structured Merge-tree (LSM-tree) architecture. The project, which is fully open-source, is explicitly optimized for write-heavy workloads. 



# Core Architecture:

The engine implements the three fundamental LSM components: the **Write Ahead Log (WAL)** for durability, an in-memory **Memtable** (using `SortedDict` for sorted writes), and immutable persistent **SSTables (Sorted String Tables)**.

Some features that I'm proud of:

* **Async Compaction**: Merging and compaction are handled by a **separate background worker thread**. The process itself takes a hybrid approach.
* **Client/Server Model**: The entire storage engine runs behind a **FastAPI server**. This allows multiple clients to connect via REST APIs or the included CLI tool.
* **Efficient Range Queries**: Added full support for range queries from `start_key` to `end_key`. This is achieved via a memory-efficient **k-way merge iterator** that combines results from the Memtable and all SSTables. The FastAPI server delivers the results using a `StreamingResponse` to prevent memory exhaustion for large result sets.
* **Bloom Filter**: Implemented a **Bloom Filter** for each SSTable to drastically reduce disk I/O by confirming that a key definitely does not exist before attempting a disk seek.
* **Binary Storage**: SSTables now use **Msgpack binary format** instead of JSON for smaller file sizes and reduced CPU load during serialization/deserialization.

My favourite part of the project is that I actually got to see a practical implementation of [Merge Sorted Arrays - GeeksforGeeks](https://www.geeksforgeeks.org/dsa/merge-k-sorted-arrays/). This is a pretty popular interview question and to see DSA being actually implemented is a crazy moment.

# Get Started

    pip install lsm_storage_engine_key_value_store

**Usage via CLI/Server:**

1. **Terminal 1 (Server):** `lsm-server`
2. **Terminal 2 (Client):** `lsm-cli` (Follow the CLI help for commands).

# Looking for Feedback

I'd love to hear your thoughts about this implementation and how I can make it better and what features I can add in later versions. Ideas and constructive criticism are always welcome. I'm also looking for contributors, if anyone is interested, please feel free to PM and we can discuss.

Repo link: [Shashank1985/storage-engine](https://github.com/Shashank1985/storage-engine)  
Thanks!!",2025-10-21T10:36:21.198977
1obo3rg,https://www.reddit.com/r/Python/comments/1obo3rg/kryypto_an_open_source_python_text_editor/,Kryypto an open source python text editor.,SxxVe,2025-10-21 01:21:30,3,5,"Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
*...","Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
* Full Keyboard Support ‚Äì no need for the mouse, every feature is accessible via hotkeys
* Discord presence
* Live MarkDown Preview
* Session Restore
* Custom Styling
   * `config\configuration.cfg` for editor settings
   * CSS for theme and style customization
* Editing Tools
   * Find text in file
   * Jump to line
   * Adjustable cursor (color & width)
   * Configurable animations (types & duration)
* Git & GitHub Integration
   * View total commits
   * See last commit message & date
   * Track file changes directly inside the editor
* Productivity Features
   * Autocompleter
   * Builtin Terminal
   * Docstring panel (hover to see function/class docstring)
   * Tab-based file switching
   * Bookmarking lines
   * Custom title bar
* Syntax Highlighting for
   * Python
   * CSS
   * JSON
   * Config files
   * Markdown

Target Audience

* Developers who prefer keyboard-driven workflows (no mouse required)
* Users looking for a lightweight alternative to heavier IDEs
* People who want to customize their editor with CSS and configuration settings
* Anyone experimenting with Python-based editors or open-source text editing tools

# Comparison:

* Lightweight ‚Äì minimal overhead, focused on speed
* Highly customizable ‚Äì styling via CSS and config files
* Keyboard-centric ‚Äì designed to be fully usable without a mouse

  
github repo: [https://github.com/NaturalCapsule/Kryypto](https://github.com/NaturalCapsule/Kryypto)

  
website: [https://naturalcapsule.github.io/Kryypto/](https://naturalcapsule.github.io/Kryypto/)",2025-10-21T10:36:21.199053
1oc1c3k,https://www.reddit.com/r/Python/comments/1oc1c3k/python_vpn_or_not/,Python VPN? Or not?,SlowJackfruit8305,2025-10-21 10:35:58,1,0,"I have been learning to code in python, and have some networking and hardware experience.

Is python appropriate for writing a VPN?

I have looked int...","I have been learning to code in python, and have some networking and hardware experience.

Is python appropriate for writing a VPN?

I have looked into the components used to create this type of software.",2025-10-21T10:40:03.145857
1obzlam,https://www.reddit.com/r/Python/comments/1obzlam/about_me_and_the_order_i_code_in/,About Me (and the order i code in),Consistent_Hall631,2025-10-21 09:13:32,0,4,"hi, i recently started python, and i am really happy, i enjoy it very much and it has become a hobby,

the order i code in: 1: imports 2 variables: 3:...","hi, i recently started python, and i am really happy, i enjoy it very much and it has become a hobby,

the order i code in: 1: imports 2 variables: 3: normal code (print, lists etc) 4: if/else statements. (i put notes at the tops of each section.)",2025-10-21T10:40:03.145929
1obxzya,https://www.reddit.com/r/Python/comments/1obxzya/tuesday_daily_thread_advanced_questions/,Tuesday Daily Thread: Advanced questions,AutoModerator,2025-10-21 08:00:30,1,0,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about ...","# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",2025-10-21T10:40:03.145973
1obrz11,https://www.reddit.com/r/Python/comments/1obrz11/assemblytominecraftcommandblockcompiler_python/,Assembly-to-Minecraft-Command-Block-Compiler (Python) ‚Äî updated ‚Äî testers & contributors wanted,bowser04410,2025-10-21 03:57:47,4,0,"I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedbac...","I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedback, and contributors. Repo:¬†[https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler](https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler)

What My Project Does:

* Parses a tiny assembly-style language (labels, arithmetic, branches, simple I/O) and emits Minecraft command sequences tailored for command blocks.
* Produces low-level, inspectable output so you can see how program logic maps to in-game command-block logic.
* Implemented in Python for readability and easy contribution.

Target Audience:

* Minecraft command-block creators who want to run low-level programs without mods.
* Hobbyist compiler writers and learners looking for a compact Python codegen example.
* Contributors interested in parsing, code generation, testing strategies, or command optimization.
* This is an educational/hobby tool for small demos and experiments ‚Äî not a production compiler for large-scale programs.

Comparison (how it differs from alternatives):

* Assembly-focused: unlike high-level language‚ÜíMinecraft tools, it targets an assembly-like input so outputs are low-level and easy to debug in command blocks.
* Python-first and lightweight: prioritizes clarity and contributor-friendliness over performance.
* Command-block oriented: designed to work with vanilla in-game command blocks (does not target datapacks or mods).

How to help:

* Test: run examples, try outputs in a world, and note Minecraft version and exact steps when something fails.
* Report: open issues with minimal reproduction files and steps.
* Contribute: PRs welcome for bug fixes, examples, optimizations, docs, or tests ‚Äî look for good-first-issue.",2025-10-21T10:40:03.146090
1obqtmz,https://www.reddit.com/r/Python/comments/1obqtmz/has_any_library_emerged_as_the_replacement_for/,Has any library emerged as the replacement for Poliastro?,KerPop42,2025-10-21 03:15:23,2,2,"I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-...","I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-go. Even if you restrict yourself to 3.11 you *also* have to go back to pip <24.1 because of how some package requirements are written. I've looked around and can't find any other orbital dynamics libraries that are more than personal projects. Is the field just dead in python?",2025-10-21T10:40:03.146197
1obprx2,https://www.reddit.com/r/Python/comments/1obprx2/building_an_opensource_observability_tool_for/,Building an open-source observability tool for multi-agent systems - looking for feedback,Standard_Career_8603,2025-10-21 02:35:45,3,5,"I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-sour...","I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-source observability tool.   
  
**What it does**:  
\- Tracks information flow between agents   
\- Shows which tools are being called with what parameters   
\- Monitors how prompt changes affect agent behavior   
\- Works in both development and production   
  
**The gap I'm trying to fill**: Existing tools (LangSmith, LangFuse, AgentOps) are great at LLM observability (tokens, costs, latency), but I feel like they don't help much with multi-agent coordination. They show you **what** happened but not **why** agents failed to coordinate.   
  
  
**Looking for feedback**:  
1. Have you built multi-agent systems? What do you use for debugging?   
2. Does this solve a real problem or am I overengineering?   
3. What features would actually make this useful for you? Still early days, but happy to share the repo if folks are interested.",2025-10-21T10:40:03.146238
1obpjnf,https://www.reddit.com/r/Python/comments/1obpjnf/i_built_a_tool_that_runs_your_python_function_on/,i built a tool that runs your python function on 10k vms in parallel with one line of code.,Ok_Post_149,2025-10-21 02:25:33,12,9,"# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to ...","# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to hand it over to DevOps, the backlog would grow, and overall throughput would tank.

So I built **Burla**, the simplest cluster compute software that lets even Python beginners run code on massive clusters in the cloud. It‚Äôs one function with two parameters: the function and the inputs. You can bring your own Docker image, set hardware requirements, and run jobs as background tasks so you can fire and forget. Responses are fast, and you can call a million simple functions in just a few seconds.

Burla is built for embarrassingly parallel workloads like preprocessing data, hyperparameter tuning, and batch inference.

# Target Audience

Engineers, data scientists, and analysts who want to scale their code in production or research environments without dealing with infrastructure.

# Comparison

Unlike Ray or Dask, Burla doesn‚Äôt require cluster setup, orchestration, or YAML configs. It‚Äôs just:

    from burla import remote_parallel_map
    remote_parallel_map(func, inputs)
    

That‚Äôs it. It automatically handles distribution, retries, logging, and scaling across up to 10,000 VMs.

# Open Source & Free Credits

Burla is open source, and I‚Äôm improving the installation process. I also created managed versions for testing. If you want to try it, I‚Äôll cover 1,000 CPU hours and 100 GPU hours. Email me at [joe@burla.dev]() if interested.

Here‚Äôs a short intro video:  
[https://www.youtube.com/watch?v=9d22y\_kWjyE](https://www.youtube.com/watch?v=9d22y_kWjyE)

GitHub ‚Üí¬†[https://github.com/Burla-Cloud/burla](https://github.com/Burla-Cloud/burla)  
Docs ‚Üí¬†[https://docs.burla.dev](https://docs.burla.dev/)",2025-10-21T10:40:03.146305
1oborpj,https://www.reddit.com/r/Python/comments/1oborpj/i_made_a_python_bot_that_turns_your_text_images/,I made a Python bot that turns your text & images into diagrams right in Telegram.,No_Mongoose_8139,2025-10-21 01:51:22,0,5,"https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project ...","https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project structure, a mind map, or just explain a concept. Every time, I had to open heavy editors like Miro or Figma, which felt like overkill.

So, I decided to build a tool that lives right inside the app I use for communication all day: Telegram.

I'm excited to share my side project: **Diagrammer Bot**. It's a simple yet powerful bot in Python that lets you create diagrams on the fly.

**Here are the key features:**
*   **Text & Image Nodes:** You can create blocks not just from text, but from any image you send.
*   **Full Editing:** Create, connect, edit, and delete both nodes and edges.
*   **Project System:** Save your diagrams with custom names, load them later, or start new ones.
*   **Themes & Export:** Switch between a sleek dark mode and a clean light mode. Export your final diagram as a high-quality PNG.
*   **Open-Source:** The entire project is available on GitHub!

**Tech Stack:** Python, `python-telegram-bot`, `Graphviz` for rendering, and `Pillow` for watermarking.

I would be incredibly grateful for any feedback, feature ideas, or bug reports. And of course, a star ‚≠ê on GitHub would make my day!

*   **Try the bot here:** [https://t.me/diagrammer_robot](https://t.me/diagrammer_robot)
*   **Check out the code on GitHub:** [https://github.com/Lixher/Diagrammer-bot](https://github.com/Lixher/Diagrammer-Bot)",2025-10-21T10:40:03.146705
1oborib,https://www.reddit.com/r/Python/comments/1oborib/i_built_a_persistent_kv_store_in_pure_python/,I built a Persistent KV Store in Pure Python,vollhard-natta,2025-10-21 01:51:07,34,1,"Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been work...","Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been working on for the past few months. It is a lightweight, persistent key-value storage engine in Python, built from scratch to understand and implement the Log-Structured Merge-tree (LSM-tree) architecture. The project, which is fully open-source, is explicitly optimized for write-heavy workloads. 



# Core Architecture:

The engine implements the three fundamental LSM components: the **Write Ahead Log (WAL)** for durability, an in-memory **Memtable** (using `SortedDict` for sorted writes), and immutable persistent **SSTables (Sorted String Tables)**.

Some features that I'm proud of:

* **Async Compaction**: Merging and compaction are handled by a **separate background worker thread**. The process itself takes a hybrid approach.
* **Client/Server Model**: The entire storage engine runs behind a **FastAPI server**. This allows multiple clients to connect via REST APIs or the included CLI tool.
* **Efficient Range Queries**: Added full support for range queries from `start_key` to `end_key`. This is achieved via a memory-efficient **k-way merge iterator** that combines results from the Memtable and all SSTables. The FastAPI server delivers the results using a `StreamingResponse` to prevent memory exhaustion for large result sets.
* **Bloom Filter**: Implemented a **Bloom Filter** for each SSTable to drastically reduce disk I/O by confirming that a key definitely does not exist before attempting a disk seek.
* **Binary Storage**: SSTables now use **Msgpack binary format** instead of JSON for smaller file sizes and reduced CPU load during serialization/deserialization.

My favourite part of the project is that I actually got to see a practical implementation of [Merge Sorted Arrays - GeeksforGeeks](https://www.geeksforgeeks.org/dsa/merge-k-sorted-arrays/). This is a pretty popular interview question and to see DSA being actually implemented is a crazy moment.

# Get Started

    pip install lsm_storage_engine_key_value_store

**Usage via CLI/Server:**

1. **Terminal 1 (Server):** `lsm-server`
2. **Terminal 2 (Client):** `lsm-cli` (Follow the CLI help for commands).

# Looking for Feedback

I'd love to hear your thoughts about this implementation and how I can make it better and what features I can add in later versions. Ideas and constructive criticism are always welcome. I'm also looking for contributors, if anyone is interested, please feel free to PM and we can discuss.

Repo link: [Shashank1985/storage-engine](https://github.com/Shashank1985/storage-engine)  
Thanks!!",2025-10-21T10:40:03.146807
1obo3rg,https://www.reddit.com/r/Python/comments/1obo3rg/kryypto_an_open_source_python_text_editor/,Kryypto an open source python text editor.,SxxVe,2025-10-21 01:21:30,3,5,"Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
*...","Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
* Full Keyboard Support ‚Äì no need for the mouse, every feature is accessible via hotkeys
* Discord presence
* Live MarkDown Preview
* Session Restore
* Custom Styling
   * `config\configuration.cfg` for editor settings
   * CSS for theme and style customization
* Editing Tools
   * Find text in file
   * Jump to line
   * Adjustable cursor (color & width)
   * Configurable animations (types & duration)
* Git & GitHub Integration
   * View total commits
   * See last commit message & date
   * Track file changes directly inside the editor
* Productivity Features
   * Autocompleter
   * Builtin Terminal
   * Docstring panel (hover to see function/class docstring)
   * Tab-based file switching
   * Bookmarking lines
   * Custom title bar
* Syntax Highlighting for
   * Python
   * CSS
   * JSON
   * Config files
   * Markdown

Target Audience

* Developers who prefer keyboard-driven workflows (no mouse required)
* Users looking for a lightweight alternative to heavier IDEs
* People who want to customize their editor with CSS and configuration settings
* Anyone experimenting with Python-based editors or open-source text editing tools

# Comparison:

* Lightweight ‚Äì minimal overhead, focused on speed
* Highly customizable ‚Äì styling via CSS and config files
* Keyboard-centric ‚Äì designed to be fully usable without a mouse

  
github repo: [https://github.com/NaturalCapsule/Kryypto](https://github.com/NaturalCapsule/Kryypto)

  
website: [https://naturalcapsule.github.io/Kryypto/](https://naturalcapsule.github.io/Kryypto/)",2025-10-21T10:40:03.146881
1oc1c3k,https://www.reddit.com/r/Python/comments/1oc1c3k/python_vpn_or_not/,Python VPN? Or not?,SlowJackfruit8305,2025-10-21 10:35:58,1,0,"I have been learning to code in python, and have some networking and hardware experience.

Is python appropriate for writing a VPN?

I have looked int...","I have been learning to code in python, and have some networking and hardware experience.

Is python appropriate for writing a VPN?

I have looked into the components used to create this type of software.",2025-10-21T10:40:14.181984
1obzlam,https://www.reddit.com/r/Python/comments/1obzlam/about_me_and_the_order_i_code_in/,About Me (and the order i code in),Consistent_Hall631,2025-10-21 09:13:32,0,4,"hi, i recently started python, and i am really happy, i enjoy it very much and it has become a hobby,

the order i code in: 1: imports 2 variables: 3:...","hi, i recently started python, and i am really happy, i enjoy it very much and it has become a hobby,

the order i code in: 1: imports 2 variables: 3: normal code (print, lists etc) 4: if/else statements. (i put notes at the tops of each section.)",2025-10-21T10:40:14.182044
1obxzya,https://www.reddit.com/r/Python/comments/1obxzya/tuesday_daily_thread_advanced_questions/,Tuesday Daily Thread: Advanced questions,AutoModerator,2025-10-21 08:00:30,1,0,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about ...","# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",2025-10-21T10:40:14.182082
1obrz11,https://www.reddit.com/r/Python/comments/1obrz11/assemblytominecraftcommandblockcompiler_python/,Assembly-to-Minecraft-Command-Block-Compiler (Python) ‚Äî updated ‚Äî testers & contributors wanted,bowser04410,2025-10-21 03:57:47,4,0,"¬†I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedba...","I updated a small Python compiler that converts an assembly-like language into Minecraft command-block command sequences. Looking for testers, feedback, and contributors. Repo:¬†[https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler](https://github.com/Bowser04/Assembly-to-Minecraft-Command-Block-Compiler)

What My Project Does:

* Parses a tiny assembly-style language (labels, arithmetic, branches, simple I/O) and emits Minecraft command sequences tailored for command blocks.
* Produces low-level, inspectable output so you can see how program logic maps to in-game command-block logic.
* Implemented in Python for readability and easy contribution.

Target Audience:

* Minecraft command-block creators who want to run low-level programs without mods.
* Hobbyist compiler writers and learners looking for a compact Python codegen example.
* Contributors interested in parsing, code generation, testing strategies, or command optimization.
* This is an educational/hobby tool for small demos and experiments ‚Äî not a production compiler for large-scale programs.

Comparison (how it differs from alternatives):

* Assembly-focused: unlike high-level language‚ÜíMinecraft tools, it targets an assembly-like input so outputs are low-level and easy to debug in command blocks.
* Python-first and lightweight: prioritizes clarity and contributor-friendliness over performance.
* Command-block oriented: designed to work with vanilla in-game command blocks (does not target datapacks or mods).

How to help:

* Test: run examples, try outputs in a world, and note Minecraft version and exact steps when something fails.
* Report: open issues with minimal reproduction files and steps.
* Contribute: PRs welcome for bug fixes, examples, optimizations, docs, or tests ‚Äî look for good-first-issue.",2025-10-21T10:40:14.182193
1obqtmz,https://www.reddit.com/r/Python/comments/1obqtmz/has_any_library_emerged_as_the_replacement_for/,Has any library emerged as the replacement for Poliastro?,KerPop42,2025-10-21 03:15:23,2,2,"I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-...","I'm trying to develop some code that works with orbital dynamics, and it looks like the go-to is somehow still Poliastro, and at this point it's a no-go. Even if you restrict yourself to 3.11 you *also* have to go back to pip <24.1 because of how some package requirements are written. I've looked around and can't find any other orbital dynamics libraries that are more than personal projects. Is the field just dead in python?",2025-10-21T10:40:14.182307
1obprx2,https://www.reddit.com/r/Python/comments/1obprx2/building_an_opensource_observability_tool_for/,Building an open-source observability tool for multi-agent systems - looking for feedback,Standard_Career_8603,2025-10-21 02:35:45,5,5,"I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-sour...","I've been building multi-agent workflows with LangChain and got tired of debugging them with scattered console.log statements, so I built an open-source observability tool.   
  
**What it does**:  
\- Tracks information flow between agents   
\- Shows which tools are being called with what parameters   
\- Monitors how prompt changes affect agent behavior   
\- Works in both development and production   
  
**The gap I'm trying to fill**: Existing tools (LangSmith, LangFuse, AgentOps) are great at LLM observability (tokens, costs, latency), but I feel like they don't help much with multi-agent coordination. They show you **what** happened but not **why** agents failed to coordinate.   
  
  
**Looking for feedback**:  
1. Have you built multi-agent systems? What do you use for debugging?   
2. Does this solve a real problem or am I overengineering?   
3. What features would actually make this useful for you? Still early days, but happy to share the repo if folks are interested.",2025-10-21T10:40:14.182348
1obpjnf,https://www.reddit.com/r/Python/comments/1obpjnf/i_built_a_tool_that_runs_your_python_function_on/,i built a tool that runs your python function on 10k vms in parallel with one line of code.,Ok_Post_149,2025-10-21 02:25:33,12,9,"# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to ...","# What My Project Does

I‚Äôve always struggled to get data scientists and analysts to scale their code in the cloud. Almost every time, they‚Äôd have to hand it over to DevOps, the backlog would grow, and overall throughput would tank.

So I built **Burla**, the simplest cluster compute software that lets even Python beginners run code on massive clusters in the cloud. It‚Äôs one function with two parameters: the function and the inputs. You can bring your own Docker image, set hardware requirements, and run jobs as background tasks so you can fire and forget. Responses are fast, and you can call a million simple functions in just a few seconds.

Burla is built for embarrassingly parallel workloads like preprocessing data, hyperparameter tuning, and batch inference.

# Target Audience

Engineers, data scientists, and analysts who want to scale their code in production or research environments without dealing with infrastructure.

# Comparison

Unlike Ray or Dask, Burla doesn‚Äôt require cluster setup, orchestration, or YAML configs. It‚Äôs just:

    from burla import remote_parallel_map
    remote_parallel_map(func, inputs)
    

That‚Äôs it. It automatically handles distribution, retries, logging, and scaling across up to 10,000 VMs.

# Open Source & Free Credits

Burla is open source, and I‚Äôm improving the installation process. I also created managed versions for testing. If you want to try it, I‚Äôll cover 1,000 CPU hours and 100 GPU hours. Email me at [joe@burla.dev]() if interested.

Here‚Äôs a short intro video:  
[https://www.youtube.com/watch?v=9d22y\_kWjyE](https://www.youtube.com/watch?v=9d22y_kWjyE)

GitHub ‚Üí¬†[https://github.com/Burla-Cloud/burla](https://github.com/Burla-Cloud/burla)  
Docs ‚Üí¬†[https://docs.burla.dev](https://docs.burla.dev/)",2025-10-21T10:40:14.182410
1oborpj,https://www.reddit.com/r/Python/comments/1oborpj/i_made_a_python_bot_that_turns_your_text_images/,I made a Python bot that turns your text & images into diagrams right in Telegram.,No_Mongoose_8139,2025-10-21 01:51:22,0,5,"https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project ...","https://i.imgur.com/O1R7s3X.gif

**(sample)**

---

Hey everyone!

Like many of you, I often need to quickly visualize an idea ‚Äì sketch out a project structure, a mind map, or just explain a concept. Every time, I had to open heavy editors like Miro or Figma, which felt like overkill.

So, I decided to build a tool that lives right inside the app I use for communication all day: Telegram.

I'm excited to share my side project: **Diagrammer Bot**. It's a simple yet powerful bot in Python that lets you create diagrams on the fly.

**Here are the key features:**
*   **Text & Image Nodes:** You can create blocks not just from text, but from any image you send.
*   **Full Editing:** Create, connect, edit, and delete both nodes and edges.
*   **Project System:** Save your diagrams with custom names, load them later, or start new ones.
*   **Themes & Export:** Switch between a sleek dark mode and a clean light mode. Export your final diagram as a high-quality PNG.
*   **Open-Source:** The entire project is available on GitHub!

**Tech Stack:** Python, `python-telegram-bot`, `Graphviz` for rendering, and `Pillow` for watermarking.

I would be incredibly grateful for any feedback, feature ideas, or bug reports. And of course, a star ‚≠ê on GitHub would make my day!

*   **Try the bot here:** [https://t.me/diagrammer_robot](https://t.me/diagrammer_robot)
*   **Check out the code on GitHub:** [https://github.com/Lixher/Diagrammer-bot](https://github.com/Lixher/Diagrammer-Bot)",2025-10-21T10:40:14.182801
1oborib,https://www.reddit.com/r/Python/comments/1oborib/i_built_a_persistent_kv_store_in_pure_python/,I built a Persistent KV Store in Pure Python,vollhard-natta,2025-10-21 01:51:07,32,1,"Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been work...","Hi everyone!

 I'm a final year CS student and I've been reading about data storage and storage engines. This is a passion project that I've been working on for the past few months. It is a lightweight, persistent key-value storage engine in Python, built from scratch to understand and implement the Log-Structured Merge-tree (LSM-tree) architecture. The project, which is fully open-source, is explicitly optimized for write-heavy workloads. 



# Core Architecture:

The engine implements the three fundamental LSM components: the **Write Ahead Log (WAL)** for durability, an in-memory **Memtable** (using `SortedDict` for sorted writes), and immutable persistent **SSTables (Sorted String Tables)**.

Some features that I'm proud of:

* **Async Compaction**: Merging and compaction are handled by a **separate background worker thread**. The process itself takes a hybrid approach.
* **Client/Server Model**: The entire storage engine runs behind a **FastAPI server**. This allows multiple clients to connect via REST APIs or the included CLI tool.
* **Efficient Range Queries**: Added full support for range queries from `start_key` to `end_key`. This is achieved via a memory-efficient **k-way merge iterator** that combines results from the Memtable and all SSTables. The FastAPI server delivers the results using a `StreamingResponse` to prevent memory exhaustion for large result sets.
* **Bloom Filter**: Implemented a **Bloom Filter** for each SSTable to drastically reduce disk I/O by confirming that a key definitely does not exist before attempting a disk seek.
* **Binary Storage**: SSTables now use **Msgpack binary format** instead of JSON for smaller file sizes and reduced CPU load during serialization/deserialization.

My favourite part of the project is that I actually got to see a practical implementation of [Merge Sorted Arrays - GeeksforGeeks](https://www.geeksforgeeks.org/dsa/merge-k-sorted-arrays/). This is a pretty popular interview question and to see DSA being actually implemented is a crazy moment.

# Get Started

    pip install lsm_storage_engine_key_value_store

**Usage via CLI/Server:**

1. **Terminal 1 (Server):** `lsm-server`
2. **Terminal 2 (Client):** `lsm-cli` (Follow the CLI help for commands).

# Looking for Feedback

I'd love to hear your thoughts about this implementation and how I can make it better and what features I can add in later versions. Ideas and constructive criticism are always welcome. I'm also looking for contributors, if anyone is interested, please feel free to PM and we can discuss.

Repo link: [Shashank1985/storage-engine](https://github.com/Shashank1985/storage-engine)  
Thanks!!",2025-10-21T10:40:14.182914
1obo3rg,https://www.reddit.com/r/Python/comments/1obo3rg/kryypto_an_open_source_python_text_editor/,Kryypto an open source python text editor.,SxxVe,2025-10-21 01:21:30,3,5,"Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
*...","Kryypto A lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.

* Lightweight ‚Äì minimal overhead
* Full Keyboard Support ‚Äì no need for the mouse, every feature is accessible via hotkeys
* Discord presence
* Live MarkDown Preview
* Session Restore
* Custom Styling
   * `config\configuration.cfg` for editor settings
   * CSS for theme and style customization
* Editing Tools
   * Find text in file
   * Jump to line
   * Adjustable cursor (color & width)
   * Configurable animations (types & duration)
* Git & GitHub Integration
   * View total commits
   * See last commit message & date
   * Track file changes directly inside the editor
* Productivity Features
   * Autocompleter
   * Builtin Terminal
   * Docstring panel (hover to see function/class docstring)
   * Tab-based file switching
   * Bookmarking lines
   * Custom title bar
* Syntax Highlighting for
   * Python
   * CSS
   * JSON
   * Config files
   * Markdown

Target Audience

* Developers who prefer keyboard-driven workflows (no mouse required)
* Users looking for a lightweight alternative to heavier IDEs
* People who want to customize their editor with CSS and configuration settings
* Anyone experimenting with Python-based editors or open-source text editing tools

# Comparison:

* Lightweight ‚Äì minimal overhead, focused on speed
* Highly customizable ‚Äì styling via CSS and config files
* Keyboard-centric ‚Äì designed to be fully usable without a mouse

  
github repo: [https://github.com/NaturalCapsule/Kryypto](https://github.com/NaturalCapsule/Kryypto)

  
website: [https://naturalcapsule.github.io/Kryypto/](https://naturalcapsule.github.io/Kryypto/)",2025-10-21T10:40:14.183043
1ocucv4,https://www.reddit.com/r/Python/comments/1ocucv4/is_my_code_horrible/,Is my code horrible,TheDrayn0001,2025-10-22 08:51:59,0,15,"import random
    
    
    wordle_list = [
    ¬† ¬† ""APPLE"", ""BRAVE"", ""CRANE"", ""DREAM"", ""FLUTE"", ""GRACE"", ""HOUSE"", ""JUMPS"",
    ¬† ¬† ""KNIFE"", ""LIGHT"", ...","import random
    
    
    wordle_list = [
    ¬† ¬† ""APPLE"", ""BRAVE"", ""CRANE"", ""DREAM"", ""FLUTE"", ""GRACE"", ""HOUSE"", ""JUMPS"",
    ¬† ¬† ""KNIFE"", ""LIGHT"", ""MOUSE"", ""NIGHT"", ""OCEAN"", ""PLANT"", ""QUICK"", ""ROBIN"",
    ¬† ¬† ""SHINE"", ""TIGER"", ""UNITY"", ""VIVID"", ""WORST"", ""YOUTH"", ""ZEBRA"", ""ALARM"",
    ¬† ¬† ""BREAD"", ""CLOUD"", ""DRIVE"", ""FROST"", ""GLASS"", ""HEART"", ""INDEX"", ""JUICE"",
    ¬† ¬† ""KNOCK"", ""LEMON"", ""MAGIC"", ""NOBLE"", ""OPERA"", ""PEACH"", ""QUEST"", ""RIVER"",
    ¬† ¬† ""SHEET"", ""TREND"", ""UNDER"", ""VIRUS"", ""WAGON"", ""YEAST"", ""ZONAL"", ""ANGEL"",
    ¬† ¬† ""BASIC"", ""CHAIR"", ""DELTA"", ""FANCY"", ""GIANT"", ""HONEY"", ""IMAGE"", ""JOLLY"",
    ¬† ¬† ""KINGS"", ""LEAFY"", ""MIRTH"", ""NOVEL"", ""ORBIT"", ""PRIZE"", ""QUILT"", ""RANGE"",
    ¬† ¬† ""SUGAR"", ""TRAIL"", ""URBAN"", ""VOTER"", ""WORRY"", ""YACHT"", ""ZESTY"", ""ADULT"",
    ¬† ¬† ""BLEND"", ""CROWN"", ""DEPTH"", ""FAITH"", ""GRAND"", ""HUMAN"", ""INPUT"", ""JOKER"",
    ¬† ¬† ""KNEEL"", ""LUNCH"", ""MOTOR"", ""NURSE"", ""OFFER"", ""PILOT"", ""QUIET"", ""REACH"",
    ¬† ¬† ""SHARE"", ""THINK"", ""UPPER"", ""VOICE"", ""WASTE"", ""YIELD"", ""ZONED"", ""ABOVE"",
    ¬† ¬† ""BIRTH"", ""CABLE"", ""DEMON"", ""FLOOD""
    ]
    total_words = len(wordle_list) - 1
    score = 0
    number = random.randint(0, total_words)
    choice = wordle_list[number]
    
    
    for i in range(10):
    ¬† ¬† number = random.randint(0, total_words)
    ¬† ¬† choice = wordle_list[number]
    ¬† ¬† for i in range(10):
    ¬† ¬† ¬†# Automatically puta the input in uppercase
    ¬† ¬† ¬† ¬† raw_guess = input(""guess the word: "")
    ¬† ¬† ¬† ¬† guess = raw_guess.upper()
    ¬† ¬† ¬† ¬† print(""Your guess is"", guess)
    
    
    # Checks if the guess is five letters
    ¬† ¬† ¬† ¬† if len(guess) == 5:
    ¬† ¬† ¬† ¬† ¬† ¬† if str(choice) == str(guess):
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† print(guess[0], ""is correct"")
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† print(guess[1], ""is correct"")
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† print(guess[2], ""is correct"")
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† print(guess[3], ""is correct"")
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† print(guess[4], ""is correct"")
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† score += 1
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† print(""Current Score is "", score)
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† break
    
    
    # Wanted to make it analyse each letter and give feedback
    # I am convinced that I can shorten this part
    # Also wanted to make it so that it tells you if the letter is elsewhere
    ¬† ¬† ¬† ¬† ¬† ¬† else:
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† if str(choice[0]) == str(guess[0]):
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† print(guess[0], ""is correct"")
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† else:
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† print(guess[0], ""is incorrect"")
    
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† if str(choice[1]) == str(guess[1]):
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† print(guess[1], ""is correct"")
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† else:
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† print(guess[1], ""is incorrect"")
    
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† if str(choice[2]) == str(guess[2]):
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† print(guess[2], ""is correct"")
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† else:
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† print(guess[2], ""is incorrect"")
    
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† if str(choice[3]) == str(guess[3]):
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† print(guess[3], ""is correct"")
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† else:
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† print(guess[3], ""is incorrect"")
    
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† if str(choice[4]) == str(guess[4]):
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† print(guess[4], ""is correct"")
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† else:
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† print(guess[4], ""is incorrect"")
    ¬† ¬† ¬† ¬† else:
    ¬† ¬† ¬† ¬† ¬† ¬† print(""Word needs to be 5 letters"")
    print(""Final Score is"", score, ""Over 10"")",2025-10-22T15:07:13.386722
1ocq03z,https://www.reddit.com/r/Python/comments/1ocq03z/hi_introducing_python_cli_tool_called_evilwaf/,"Hi introducing python, CLI Tool called evilwaf most powerful firewall bypass V2.2 was released",Tricky-Frosting9047,2025-10-22 05:42:39,0,5,"Now evilwaf supports more than 11 firewall bypass techniques includes 

Critical risk: Direct Exploitation
  ‚Ä¢ HTTP Request Smuggling
  ‚Ä¢JWT Algorithm...","Now evilwaf supports more than 11 firewall bypass techniques includes 

Critical risk: Direct Exploitation
  ‚Ä¢ HTTP Request Smuggling
  ‚Ä¢JWT Algorithm Confusion
  ‚Ä¢HTTP/2 Stream Multiplexing
  ‚Ä¢WebAssembly Memory Corruption
  ‚Ä¢cache poisoning
  ‚Ä¢web cache poisoning

  High risk: Potential Exploitation
  ‚Ä¢SSTI Polyglot Payloads
  ‚Ä¢gRPC/Protobuf Bypass
  ‚Ä¢GraphQL Query Batching
  ¬∞ML WAF Evasion

  Medium risk: Information Gathering
  ¬∞ Subdomain Discovery
  ¬∞ DNS History Bypass
  ¬∞ Header Manipulation
  ¬∞ Advanced Protocol Attacks

For more info visit GitHub repo: https://github.com/matrixleons/evilwaf",2025-10-22T15:07:13.386932
1ocib9b,https://www.reddit.com/r/Python/comments/1ocib9b/i_created_a_riot_api_library_for_python/,I created a Riot API library for python,Electrical-Lab-5952,2025-10-22 00:55:00,2,9,"Hello all,

I've been working on a super simple api wrapper for league of legends and would love some feedback.

[https://github.com/diodemusic/pyke](...","Hello all,

I've been working on a super simple api wrapper for league of legends and would love some feedback.

[https://github.com/diodemusic/pyke](https://github.com/diodemusic/pyke)

Thanks :)",2025-10-22T15:07:13.387006
1ochltx,https://www.reddit.com/r/Python/comments/1ochltx/ids_project_in_python/,IDS Project in Python,Javi_16018,2025-10-22 00:28:08,3,0,"Hello everyone,



I recently uploaded a repository to GitHub where I created an IDS in Python. I would appreciate any feedback and suggestions for im...","Hello everyone,



I recently uploaded a repository to GitHub where I created an IDS in Python. I would appreciate any feedback and suggestions for improvement.

[https://github.com/javisys/IDS-Python](https://github.com/javisys/IDS-Python)

Thank you very much, best regards.",2025-10-22T15:07:13.387044
1ocgcqh,https://www.reddit.com/r/Python/comments/1ocgcqh/new_uv_gitlab_component/,New UV Gitlab Component,MaKaNuReddit,2025-10-21 23:41:07,1,0,"I tried today to recreate a GitHub action which provides a python \`uv setup as a GitLab CI component.

# What this Component achieves

While the docu...","I tried today to recreate a GitHub action which provides a python \`uv setup as a GitLab CI component.

# What this Component achieves

While the documentation of UV already explains how to implement `uv` inside of GitLab CI, it still fills the `.gitlab-ci.yml` quite a bit.

My Component tries to minimize that, by also providing a lot of customizations.

# Examples

The following example demonstrates how to implement the component on gitlab.com:

    include:
      - component: $CI_SERVER_FQDN/gitlab-uv-templates/python-uv-component/python-uv@1.0.0
    
    single-test:
      extends: .python-uv-setup
      stage: test
      script:
        - uv run python -c ""print('Hello UV!')""

The next examples demonstrate how to achieve parallel matrix execution:

    include:
      - component: $CI_SERVER_FQDN/gitlab-uv-templates/python-uv-component/python-uv@1.0.0
        inputs:
          python_version: $PYTHON_V
          uv_version: 0.9.4
          base_layer: bookworm-slim
    
    matrix-test:
      extends: .python-uv-setup
      stage: test
      parallel:
        matrix:
          - PYTHON_V: [""3.12"", ""3.11"", ""3.10""]
      script:
        - uv run python --version""
      variables:
        PYTHON_V: $PYTHON_V

# Comparison

I am not aware of any public component which achieves similar as demonstrated above.

I am quite happy about the current result, which I published via the GitLab CI/CD catalogue:

[https://gitlab.com/explore/catalog/gitlab-uv-templates/python-uv-component](https://gitlab.com/explore/catalog/gitlab-uv-templates/python-uv-component)",2025-10-22T15:07:13.387082
1ocg3p5,https://www.reddit.com/r/Python/comments/1ocg3p5/python_pest_a_port_of_rusts_pest/,Python Pest - A port of Rust's pest,Hefty-Pianist-1958,2025-10-21 23:31:24,7,0,"I recently released Python Pest, a port of the Rust pest parsing library.

# What My Project Does

Python‚ÄØPest is a declarative PEG parser generator f...","I recently released Python Pest, a port of the Rust pest parsing library.

# What My Project Does

Python‚ÄØPest is a declarative PEG parser generator for Python, ported from Rust's Pest. You write grammars instead of hand-coding parsing logic, and it builds parse trees automatically.

Define a grammar using Pest version 2 syntax, like this:

    jsonpath        = _{ SOI ~ jsonpath_query ~ EOI }
    jsonpath_query  = _{ root_identifier ~ segments }
    segments        = _{ (S ~ segment)* }
    root_identifier = _{ ""$"" }
    
    segment = _{
      | child_segment
      | descendant_segment
    }
    
    // snip

And traverse parse trees using [structural pattern matching](https://peps.python.org/pep-0636/), like this:

    def parse_segment(self, segment: Pair) -> Segment:
        match segment:
            case Pair(Rule.CHILD_SEGMENT, [inner]):
                return ChildSegment(segment, self.parse_segment_inner(inner))
            case Pair(Rule.DESCENDANT_SEGMENT, [inner]):
                return RecursiveDescentSegment(segment, self.parse_segment_inner(inner))
            case Pair(Rule.NAME_SEGMENT, [inner]) | Pair(Rule.INDEX_SEGMENT, [inner]):
                return ChildSegment(segment, [self.parse_selector(inner)])
            case _:
                raise JSONPathSyntaxError(""expected a segment"", segment)

See [docs](https://jg-rp.github.io/python-pest/), [GitHub](https://github.com/jg-rp/python-pest) and [PyPi](https://pypi.org/project/python-pest/) for a complete example.

# Target Audience

* Python developers who need to parse custom languages, data formats, or DSLs.
* Anyone interested in grammar-first design over hand-coded parsers.
* Developers curious about leveraging Python's match/case for tree-walking.

# Comparison

Parsimonious is another general purpose, pure Python parser package that reads parsing expression grammars. Python Pest differs in grammar syntax and subsequent tree traversal technique, preferring external iteration of parse trees instead of defining a visitor.

# Feedback

I'd appreciate any feedback, especially your thoughts on the trade-off between declarative grammars and performance in Python. Does the clarity and maintainability make up for slower execution compared to hand-tuned parsers?

GitHub: [https://github.com/jg-rp/python-pest](https://github.com/jg-rp/python-pest)",2025-10-22T15:07:13.388617
1ocdw2j,https://www.reddit.com/r/Python/comments/1ocdw2j/gui_toolkit_slint_114_released_with_universal/,"GUI Toolkit Slint 1.14 released with universal transforms, asyncio and a unified text engine",slint-ui,2025-10-21 22:05:25,3,1,"We‚Äôre proud to release [\#Slint](https://chat.slint.dev/public/channels/docs-internal#) 1.14 üíô with universal transforms üåÄ, [\#Python](https://chat.sl...","We‚Äôre proud to release [\#Slint](https://chat.slint.dev/public/channels/docs-internal#) 1.14 üíô with universal transforms üåÄ, [\#Python](https://chat.slint.dev/public/channels/docs-internal#) asyncio üêç, and a unified text engine with fontique and parley üñãÔ∏è  
Read more about it in the blog here üëâ [https://slint.dev/blog/slint-1.14-released](https://slint.dev/blog/slint-1.14-released)",2025-10-22T15:07:13.388772
1ocd9i4,https://www.reddit.com/r/Python/comments/1ocd9i4/advice_for_a_javascripttypescript_dev_getting/,Advice for a Javascript/Typescript dev getting into the python ecosystem,Lupexlol,2025-10-21 21:40:36,0,9,"I'm a typescript dev that worked with frontend frameworks and nodejs for the last 10 years.

I just joined a startup and I'm required to build a serve...","I'm a typescript dev that worked with frontend frameworks and nodejs for the last 10 years.

I just joined a startup and I'm required to build a serverless rest api with a python based stack.

The problem is that I have around a few days to figure out what's considered industry standard currently for the python ecosystem, and I can't afford to take any wrong turns here.

Of course the particularities of the project might affect your answer to some degree and I'm aware of that, but for the sake of trying to point me to the right direction let's try to make the best out of this.

I would make some typescript analogies in order for you to better understand what I'm aiming at with the stack.

1.ORM - drizzle (will use postgres)
2.Deployment - vercel/fallback to aws lambda
3.Package manager - pnpm
4.Types - typescript

The most uncertainities I have are about the platform where I have to deploy this(I really want something that is serverless and has good DX), vercel is such a no brainer rn for typescript projects, and I wonder if I have similar no brainers in python as well.

I have read about modal for deploying FastAPI, but again I'm not sure.

Really appreciate anyone taking time to answer this.",2025-10-22T15:07:13.388831
1occzel,https://www.reddit.com/r/Python/comments/1occzel/namedtuples_are_a_pita/,NamedTuples are a PITA,JuroOravec,2025-10-21 21:28:58,0,16,I've also created a thread for this on Python forum - [see here](https://discuss.python.org/t/allow-to-pass-defaults-when-defining-namedtuple-dynamica...,"I've also created a thread for this on Python forum - [see here](https://discuss.python.org/t/allow-to-pass-defaults-when-defining-namedtuple-dynamically/104484).

TL;DR - When defining NamedTuples dynamically, there should be a single interface that'd allow to pass all 3 - field names, annotations, and defaults.

I needed to convert to convert normal Python classes into NamedTuples. (see final implementation [here](https://github.com/django-components/django-components/pull/1466#discussion_r2447261223))

‚ùå For normal classes, you could simply make a new class that subclasses from both.

    class X(MyClass, NamedTuple):
        pass

But NamedTuples don't support that.

‚ùå And you can't further subclass the subclass of `NamedTuples`:

    class Another(NamedTuple):
        x: int = 1
    
    class X(Another):
        y: str

‚ùå When using `typing.NamedTuple` as a function, you can't pass in defaults:

    my_class = typing.NamedTuple(""MyClass"", [(""x"", int), (""y"", str)])

I tried setting the defaults ([`_field_defaults`](https://docs.python.org/3/library/collections.html#collections.somenamedtuple._field_defaults)) manually, but Python wasn't picking that up.

‚ùå One option was to define the NamedTuple with a class syntax as a string, and then evaluate that string. But that had 2 problems - 1) security risk, and 2) we'd need to import all the types used in annotations:

    my_cls_str = """"""
    from typing import NamedTuple
    
    from path.to.custom import CustomClass
    
    class MyClass(NamedTuple):
        x: int
        y: str
        z: CustomClass
    """"""
    my_cls = eval(my_cls_str, {}, {})

‚úÖ Lastly I managed to get it working using `collections.namedtuple`. This function doesn't define the field annotations, but it is able to handle defaults. Just one annoying thing was how it sets defaults the same way as Python functions do - it assigns the defaults from the back of the function signature.

So if I have NamedTuple with 3 fields - `x`, `y`, and `z`, and I set defaults to `[""hello"", 123]`:

    my_cls = namedtuple(""MyClass"", [""x"", ""y"", ""z""], defaults=[""hello"", 123])

then this is the same as writing:

    class MyClass(NamedTuple):
        x: int
        y: str = ""hello""
        z: int = 123

One caveat is that `collections.namedtuple()` doesn't set the annotations, so I had also set `__annotations__` at the end.

One thing I didn't know - when defining `NamedTuple`, the fields it recognizes are only those that are annotated. If a field is NOT annotated, it's treated as a CLASS VARIABLE:

    class MyClass(NamedTuple):
        x: int            # Required field
        y: str = ""hello""  # Optional field (with default)
        z = 123           # Class var!

So at the end I also assigned the class variables to the new namedtuple class.

Surprisingly LLMs were really bad at solving this, so I'm hoping this comment gets into the next training set.",2025-10-22T15:07:13.388907
1occonw,https://www.reddit.com/r/Python/comments/1occonw/tstrings_pythons_fifth_string_formatting_technique/,T-Strings: Python's Fifth String Formatting Technique?,treyhunner,2025-10-21 21:16:36,166,52,"Every time I've talked about Python 3.14's new t-strings online, many folks have been confused about how t-strings are different from f-strings, why t...","Every time I've talked about Python 3.14's new t-strings online, many folks have been confused about how t-strings are different from f-strings, why t-strings are useful, and whether t-strings are a replacement for f-strings.

  
I published [a short article (and video) on Python 3.14's new t-strings](https://pym.dev/t-strings-in-python/) that's meant to explain this.

The TL;DR:

* Python has had 4 string formatting approaches before t-strings
* T-strings are different because they *don't actually return strings*
* T-strings are useful for library authors who need the disassembled parts of a string interpolation for the purpose of pre-processing interpolations
* T-strings definitely do not replace f-strings: keep using f-strings until specific libraries tell you to use a t-string with one or more of their utilities

Watch the video or read the article for a short demo and a library that uses them as well.

If you've been confusing about t-strings, I hope this explanation helps.",2025-10-22T15:07:13.389268
1ocucv4,https://www.reddit.com/r/Python/comments/1ocucv4/is_my_code_horrible/,Is my code horrible,TheDrayn0001,2025-10-22 08:51:59,0,15,"    import random
    
    
    wordle_list = [
    ¬† ¬† ""APPLE"", ""BRAVE"", ""CRANE"", ""DREAM"", ""FLUTE"", ""GRACE"", ""HOUSE"", ""JUMPS"",
    ¬† ¬† ""KNIFE"", ""LIGH...","import random
    
    
    wordle_list = [
    ¬† ¬† ""APPLE"", ""BRAVE"", ""CRANE"", ""DREAM"", ""FLUTE"", ""GRACE"", ""HOUSE"", ""JUMPS"",
    ¬† ¬† ""KNIFE"", ""LIGHT"", ""MOUSE"", ""NIGHT"", ""OCEAN"", ""PLANT"", ""QUICK"", ""ROBIN"",
    ¬† ¬† ""SHINE"", ""TIGER"", ""UNITY"", ""VIVID"", ""WORST"", ""YOUTH"", ""ZEBRA"", ""ALARM"",
    ¬† ¬† ""BREAD"", ""CLOUD"", ""DRIVE"", ""FROST"", ""GLASS"", ""HEART"", ""INDEX"", ""JUICE"",
    ¬† ¬† ""KNOCK"", ""LEMON"", ""MAGIC"", ""NOBLE"", ""OPERA"", ""PEACH"", ""QUEST"", ""RIVER"",
    ¬† ¬† ""SHEET"", ""TREND"", ""UNDER"", ""VIRUS"", ""WAGON"", ""YEAST"", ""ZONAL"", ""ANGEL"",
    ¬† ¬† ""BASIC"", ""CHAIR"", ""DELTA"", ""FANCY"", ""GIANT"", ""HONEY"", ""IMAGE"", ""JOLLY"",
    ¬† ¬† ""KINGS"", ""LEAFY"", ""MIRTH"", ""NOVEL"", ""ORBIT"", ""PRIZE"", ""QUILT"", ""RANGE"",
    ¬† ¬† ""SUGAR"", ""TRAIL"", ""URBAN"", ""VOTER"", ""WORRY"", ""YACHT"", ""ZESTY"", ""ADULT"",
    ¬† ¬† ""BLEND"", ""CROWN"", ""DEPTH"", ""FAITH"", ""GRAND"", ""HUMAN"", ""INPUT"", ""JOKER"",
    ¬† ¬† ""KNEEL"", ""LUNCH"", ""MOTOR"", ""NURSE"", ""OFFER"", ""PILOT"", ""QUIET"", ""REACH"",
    ¬† ¬† ""SHARE"", ""THINK"", ""UPPER"", ""VOICE"", ""WASTE"", ""YIELD"", ""ZONED"", ""ABOVE"",
    ¬† ¬† ""BIRTH"", ""CABLE"", ""DEMON"", ""FLOOD""
    ]
    total_words = len(wordle_list) - 1
    score = 0
    number = random.randint(0, total_words)
    choice = wordle_list[number]
    
    
    for i in range(10):
    ¬† ¬† number = random.randint(0, total_words)
    ¬† ¬† choice = wordle_list[number]
    ¬† ¬† for i in range(10):
    ¬† ¬† ¬†# Automatically puta the input in uppercase
    ¬† ¬† ¬† ¬† raw_guess = input(""guess the word: "")
    ¬† ¬† ¬† ¬† guess = raw_guess.upper()
    ¬† ¬† ¬† ¬† print(""Your guess is"", guess)
    
    
    # Checks if the guess is five letters
    ¬† ¬† ¬† ¬† if len(guess) == 5:
    ¬† ¬† ¬† ¬† ¬† ¬† if str(choice) == str(guess):
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† print(guess[0], ""is correct"")
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† print(guess[1], ""is correct"")
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† print(guess[2], ""is correct"")
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† print(guess[3], ""is correct"")
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† print(guess[4], ""is correct"")
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† score += 1
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† print(""Current Score is "", score)
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† break
    
    
    # Wanted to make it analyse each letter and give feedback
    # I am convinced that I can shorten this part
    # Also wanted to make it so that it tells you if the letter is elsewhere
    ¬† ¬† ¬† ¬† ¬† ¬† else:
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† if str(choice[0]) == str(guess[0]):
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† print(guess[0], ""is correct"")
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† else:
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† print(guess[0], ""is incorrect"")
    
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† if str(choice[1]) == str(guess[1]):
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† print(guess[1], ""is correct"")
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† else:
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† print(guess[1], ""is incorrect"")
    
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† if str(choice[2]) == str(guess[2]):
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† print(guess[2], ""is correct"")
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† else:
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† print(guess[2], ""is incorrect"")
    
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† if str(choice[3]) == str(guess[3]):
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† print(guess[3], ""is correct"")
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† else:
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† print(guess[3], ""is incorrect"")
    
    
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† if str(choice[4]) == str(guess[4]):
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† print(guess[4], ""is correct"")
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† else:
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† print(guess[4], ""is incorrect"")
    ¬† ¬† ¬† ¬† else:
    ¬† ¬† ¬† ¬† ¬† ¬† print(""Word needs to be 5 letters"")
    print(""Final Score is"", score, ""Over 10"")",2025-10-22T15:07:19.932218
1ocq03z,https://www.reddit.com/r/Python/comments/1ocq03z/hi_introducing_python_cli_tool_called_evilwaf/,"Hi introducing python, CLI Tool called evilwaf most powerful firewall bypass V2.2 was released",Tricky-Frosting9047,2025-10-22 05:42:39,0,5,"


Now evilwaf supports more than 11 firewall bypass techniques includes 

Critical risk: Direct Exploitation
  ‚Ä¢ HTTP Request Smuggling
  ‚Ä¢JWT Algori...","Now evilwaf supports more than 11 firewall bypass techniques includes 

Critical risk: Direct Exploitation
  ‚Ä¢ HTTP Request Smuggling
  ‚Ä¢JWT Algorithm Confusion
  ‚Ä¢HTTP/2 Stream Multiplexing
  ‚Ä¢WebAssembly Memory Corruption
  ‚Ä¢cache poisoning
  ‚Ä¢web cache poisoning

  High risk: Potential Exploitation
  ‚Ä¢SSTI Polyglot Payloads
  ‚Ä¢gRPC/Protobuf Bypass
  ‚Ä¢GraphQL Query Batching
  ¬∞ML WAF Evasion

  Medium risk: Information Gathering
  ¬∞ Subdomain Discovery
  ¬∞ DNS History Bypass
  ¬∞ Header Manipulation
  ¬∞ Advanced Protocol Attacks

For more info visit GitHub repo: https://github.com/matrixleons/evilwaf",2025-10-22T15:07:19.932369
1ocib9b,https://www.reddit.com/r/Python/comments/1ocib9b/i_created_a_riot_api_library_for_python/,I created a Riot API library for python,Electrical-Lab-5952,2025-10-22 00:55:00,5,9,"Hello all,

I've been working on a super simple api wrapper for league of legends and would love some feedback.

[https://github.com/diodemusic/pyke](...","Hello all,

I've been working on a super simple api wrapper for league of legends and would love some feedback.

[https://github.com/diodemusic/pyke](https://github.com/diodemusic/pyke)

Thanks :)",2025-10-22T15:07:19.932410
1ochltx,https://www.reddit.com/r/Python/comments/1ochltx/ids_project_in_python/,IDS Project in Python,Javi_16018,2025-10-22 00:28:08,3,0,"Hello everyone,



I recently uploaded a repository to GitHub where I created an IDS in Python. I would appreciate any feedback and suggestions for im...","Hello everyone,



I recently uploaded a repository to GitHub where I created an IDS in Python. I would appreciate any feedback and suggestions for improvement.

[https://github.com/javisys/IDS-Python](https://github.com/javisys/IDS-Python)

Thank you very much, best regards.",2025-10-22T15:07:19.932432
1ocgcqh,https://www.reddit.com/r/Python/comments/1ocgcqh/new_uv_gitlab_component/,New UV Gitlab Component,MaKaNuReddit,2025-10-21 23:41:07,1,0,"I tried today to recreate a GitHub action which provides a python \`uv setup as a GitLab CI component.

# What this Component achieves

While the docu...","I tried today to recreate a GitHub action which provides a python \`uv setup as a GitLab CI component.

# What this Component achieves

While the documentation of UV already explains how to implement `uv` inside of GitLab CI, it still fills the `.gitlab-ci.yml` quite a bit.

My Component tries to minimize that, by also providing a lot of customizations.

# Examples

The following example demonstrates how to implement the component on gitlab.com:

    include:
      - component: $CI_SERVER_FQDN/gitlab-uv-templates/python-uv-component/python-uv@1.0.0
    
    single-test:
      extends: .python-uv-setup
      stage: test
      script:
        - uv run python -c ""print('Hello UV!')""

The next examples demonstrate how to achieve parallel matrix execution:

    include:
      - component: $CI_SERVER_FQDN/gitlab-uv-templates/python-uv-component/python-uv@1.0.0
        inputs:
          python_version: $PYTHON_V
          uv_version: 0.9.4
          base_layer: bookworm-slim
    
    matrix-test:
      extends: .python-uv-setup
      stage: test
      parallel:
        matrix:
          - PYTHON_V: [""3.12"", ""3.11"", ""3.10""]
      script:
        - uv run python --version""
      variables:
        PYTHON_V: $PYTHON_V

# Comparison

I am not aware of any public component which achieves similar as demonstrated above.

I am quite happy about the current result, which I published via the GitLab CI/CD catalogue:

[https://gitlab.com/explore/catalog/gitlab-uv-templates/python-uv-component](https://gitlab.com/explore/catalog/gitlab-uv-templates/python-uv-component)",2025-10-22T15:07:19.932453
1ocg3p5,https://www.reddit.com/r/Python/comments/1ocg3p5/python_pest_a_port_of_rusts_pest/,Python Pest - A port of Rust's pest,Hefty-Pianist-1958,2025-10-21 23:31:24,7,0,"I recently released Python Pest, a port of the Rust pest parsing library.

# What My Project Does

Python‚ÄØPest is a declarative PEG parser generator f...","I recently released Python Pest, a port of the Rust pest parsing library.

# What My Project Does

Python‚ÄØPest is a declarative PEG parser generator for Python, ported from Rust's Pest. You write grammars instead of hand-coding parsing logic, and it builds parse trees automatically.

Define a grammar using Pest version 2 syntax, like this:

    jsonpath        = _{ SOI ~ jsonpath_query ~ EOI }
    jsonpath_query  = _{ root_identifier ~ segments }
    segments        = _{ (S ~ segment)* }
    root_identifier = _{ ""$"" }
    
    segment = _{
      | child_segment
      | descendant_segment
    }
    
    // snip

And traverse parse trees using [structural pattern matching](https://peps.python.org/pep-0636/), like this:

    def parse_segment(self, segment: Pair) -> Segment:
        match segment:
            case Pair(Rule.CHILD_SEGMENT, [inner]):
                return ChildSegment(segment, self.parse_segment_inner(inner))
            case Pair(Rule.DESCENDANT_SEGMENT, [inner]):
                return RecursiveDescentSegment(segment, self.parse_segment_inner(inner))
            case Pair(Rule.NAME_SEGMENT, [inner]) | Pair(Rule.INDEX_SEGMENT, [inner]):
                return ChildSegment(segment, [self.parse_selector(inner)])
            case _:
                raise JSONPathSyntaxError(""expected a segment"", segment)

See [docs](https://jg-rp.github.io/python-pest/), [GitHub](https://github.com/jg-rp/python-pest) and [PyPi](https://pypi.org/project/python-pest/) for a complete example.

# Target Audience

* Python developers who need to parse custom languages, data formats, or DSLs.
* Anyone interested in grammar-first design over hand-coded parsers.
* Developers curious about leveraging Python's match/case for tree-walking.

# Comparison

Parsimonious is another general purpose, pure Python parser package that reads parsing expression grammars. Python Pest differs in grammar syntax and subsequent tree traversal technique, preferring external iteration of parse trees instead of defining a visitor.

# Feedback

I'd appreciate any feedback, especially your thoughts on the trade-off between declarative grammars and performance in Python. Does the clarity and maintainability make up for slower execution compared to hand-tuned parsers?

GitHub: [https://github.com/jg-rp/python-pest](https://github.com/jg-rp/python-pest)",2025-10-22T15:07:19.932736
1ocdw2j,https://www.reddit.com/r/Python/comments/1ocdw2j/gui_toolkit_slint_114_released_with_universal/,"GUI Toolkit Slint 1.14 released with universal transforms, asyncio and a unified text engine",slint-ui,2025-10-21 22:05:25,5,1,"We‚Äôre proud to release [\#Slint](https://chat.slint.dev/public/channels/docs-internal#) 1.14 üíô with universal transforms üåÄ, [\#Python](https://chat.sl...","We‚Äôre proud to release [\#Slint](https://chat.slint.dev/public/channels/docs-internal#) 1.14 üíô with universal transforms üåÄ, [\#Python](https://chat.slint.dev/public/channels/docs-internal#) asyncio üêç, and a unified text engine with fontique and parley üñãÔ∏è  
Read more about it in the blog here üëâ [https://slint.dev/blog/slint-1.14-released](https://slint.dev/blog/slint-1.14-released)",2025-10-22T15:07:19.932819
1ocd9i4,https://www.reddit.com/r/Python/comments/1ocd9i4/advice_for_a_javascripttypescript_dev_getting/,Advice for a Javascript/Typescript dev getting into the python ecosystem,Lupexlol,2025-10-21 21:40:36,0,9,"I'm a typescript dev that worked with frontend frameworks and nodejs for the last 10 years.

I just joined a startup and I'm required to build a serve...","I'm a typescript dev that worked with frontend frameworks and nodejs for the last 10 years.

I just joined a startup and I'm required to build a serverless rest api with a python based stack.

The problem is that I have around a few days to figure out what's considered industry standard currently for the python ecosystem, and I can't afford to take any wrong turns here.

Of course the particularities of the project might affect your answer to some degree and I'm aware of that, but for the sake of trying to point me to the right direction let's try to make the best out of this.

I would make some typescript analogies in order for you to better understand what I'm aiming at with the stack.

1.ORM - drizzle (will use postgres)
2.Deployment - vercel/fallback to aws lambda
3.Package manager - pnpm
4.Types - typescript

The most uncertainities I have are about the platform where I have to deploy this(I really want something that is serverless and has good DX), vercel is such a no brainer rn for typescript projects, and I wonder if I have similar no brainers in python as well.

I have read about modal for deploying FastAPI, but again I'm not sure.

Really appreciate anyone taking time to answer this.",2025-10-22T15:07:19.932850
1occzel,https://www.reddit.com/r/Python/comments/1occzel/namedtuples_are_a_pita/,NamedTuples are a PITA,JuroOravec,2025-10-21 21:28:58,0,16,I've also created a thread for this on Python forum - [see here](https://discuss.python.org/t/allow-to-pass-defaults-when-defining-namedtuple-dynamica...,"I've also created a thread for this on Python forum - [see here](https://discuss.python.org/t/allow-to-pass-defaults-when-defining-namedtuple-dynamically/104484).

TL;DR - When defining NamedTuples dynamically, there should be a single interface that'd allow to pass all 3 - field names, annotations, and defaults.

I needed to convert to convert normal Python classes into NamedTuples. (see final implementation [here](https://github.com/django-components/django-components/pull/1466#discussion_r2447261223))

‚ùå For normal classes, you could simply make a new class that subclasses from both.

    class X(MyClass, NamedTuple):
        pass

But NamedTuples don't support that.

‚ùå And you can't further subclass the subclass of `NamedTuples`:

    class Another(NamedTuple):
        x: int = 1
    
    class X(Another):
        y: str

‚ùå When using `typing.NamedTuple` as a function, you can't pass in defaults:

    my_class = typing.NamedTuple(""MyClass"", [(""x"", int), (""y"", str)])

I tried setting the defaults ([`_field_defaults`](https://docs.python.org/3/library/collections.html#collections.somenamedtuple._field_defaults)) manually, but Python wasn't picking that up.

‚ùå One option was to define the NamedTuple with a class syntax as a string, and then evaluate that string. But that had 2 problems - 1) security risk, and 2) we'd need to import all the types used in annotations:

    my_cls_str = """"""
    from typing import NamedTuple
    
    from path.to.custom import CustomClass
    
    class MyClass(NamedTuple):
        x: int
        y: str
        z: CustomClass
    """"""
    my_cls = eval(my_cls_str, {}, {})

‚úÖ Lastly I managed to get it working using `collections.namedtuple`. This function doesn't define the field annotations, but it is able to handle defaults. Just one annoying thing was how it sets defaults the same way as Python functions do - it assigns the defaults from the back of the function signature.

So if I have NamedTuple with 3 fields - `x`, `y`, and `z`, and I set defaults to `[""hello"", 123]`:

    my_cls = namedtuple(""MyClass"", [""x"", ""y"", ""z""], defaults=[""hello"", 123])

then this is the same as writing:

    class MyClass(NamedTuple):
        x: int
        y: str = ""hello""
        z: int = 123

One caveat is that `collections.namedtuple()` doesn't set the annotations, so I had also set `__annotations__` at the end.

One thing I didn't know - when defining `NamedTuple`, the fields it recognizes are only those that are annotated. If a field is NOT annotated, it's treated as a CLASS VARIABLE:

    class MyClass(NamedTuple):
        x: int            # Required field
        y: str = ""hello""  # Optional field (with default)
        z = 123           # Class var!

So at the end I also assigned the class variables to the new namedtuple class.

Surprisingly LLMs were really bad at solving this, so I'm hoping this comment gets into the next training set.",2025-10-22T15:07:19.932892
1occonw,https://www.reddit.com/r/Python/comments/1occonw/tstrings_pythons_fifth_string_formatting_technique/,T-Strings: Python's Fifth String Formatting Technique?,treyhunner,2025-10-21 21:16:36,169,52,"Every time I've talked about Python 3.14's new t-strings online, many folks have been confused about how t-strings are different from f-strings, why t...","Every time I've talked about Python 3.14's new t-strings online, many folks have been confused about how t-strings are different from f-strings, why t-strings are useful, and whether t-strings are a replacement for f-strings.

  
I published [a short article (and video) on Python 3.14's new t-strings](https://pym.dev/t-strings-in-python/) that's meant to explain this.

The TL;DR:

* Python has had 4 string formatting approaches before t-strings
* T-strings are different because they *don't actually return strings*
* T-strings are useful for library authors who need the disassembled parts of a string interpolation for the purpose of pre-processing interpolations
* T-strings definitely do not replace f-strings: keep using f-strings until specific libraries tell you to use a t-string with one or more of their utilities

Watch the video or read the article for a short demo and a library that uses them as well.

If you've been confusing about t-strings, I hope this explanation helps.",2025-10-22T15:07:19.933082
1oiwxt5,https://www.reddit.com/r/Python/comments/1oiwxt5/why_doesnt_forloop_have_its_own_scope/,Why doesn't for-loop have it's own scope?,FUS3N,2025-10-29 14:08:00,17,94,"For the longest time I didn't know this but finally decided to ask, I get this is a thing and probably has been asked a lot but i genuinely want to kn...","For the longest time I didn't know this but finally decided to ask, I get this is a thing and probably has been asked a lot but i genuinely want to know... why? What gain is there other than convenience in certain situations, i feel like this could cause more issue than anything even though i can't name them all right now.

I am also designing a language that works very similarly how python works, so maybe i get to learn something here.",2025-10-29T17:14:48.672417
1oiufp2,https://www.reddit.com/r/Python/comments/1oiufp2/a_new_easy_way_on_windows_to_pip_install_gdal_and/,A new easy way on Windows to pip install GDAL and other tricky geospatial Python packages,pvdp-corbel,2025-10-29 11:41:59,4,0,"# What My Project Does

[geospatial-wheels-index](https://github.com/corbel-spatial/geospatial-wheels-index) is a pip-compatible 
[simple](https://pac...","# What My Project Does

[geospatial-wheels-index](https://github.com/corbel-spatial/geospatial-wheels-index) is a pip-compatible 
[simple](https://packaging.python.org/en/latest/specifications/simple-repository-api/) index for the [cgohlke/geospatial-wheels](https://github.com/cgohlke/geospatial-wheels) repository. It's just a few static html files served on GitHub Pages, and all the .whl files are pulled directly from `cgohlke/geospatial-wheels`. All you need to do is add an `index` flag:

```
pip install --index https://gisidx.github.io/gwi gdal
```

In addition to GDAL, this index points to the other prebuilt packages in `geospatial-wheels`: cartopy, cftime, fiona, h5py, netcdf4, pygeos, pyogrio, pyproj, rasterio, rtree, and shapely.

Contributions are welcome!

# Target Audience

Mostly folks who straddle the traditional GIS and the developer/data science worlds, the people who would love to run Linux but are stuck on Windows for one reason or another. 

For myself, I'm tired of dealing with the lack of an easy way to install the GDAL binaries on Windows so that I can `pip install gdal`, especially in a `uv` virtual environment or a CI/CD context where using `conda` can be a headache.

# Comparison

Often you'll have to build these packages from source or rely on `conda` or another add-on package manager. For example, the official GDAL docs suggest [various ways](https://gdal.org/en/stable/download.html#windows) to install the binaries. This is often not possible or requires extra work.

The esteemed Christoph Gohlke has been providing prebuilt wheels for GDAL and other packages for a long time, and currently they can be found at his repository, [geospatial-wheels](https://github.com/cgohlke/geospatial-wheels). Awesome! But you have to manually find the one that matches your environment, download it somewhere, and then `pip install` the file... Still pretty annoying and difficult to automate. This index project simplifies the process down to the easy and portable `pip install`.

This project was partly inspired by [gdal-installer](https://pypi.org/project/gdal-installer/) which is also worth checking out.",2025-10-29T17:14:48.672477
1oiqata,https://www.reddit.com/r/Python/comments/1oiqata/blank_page_paralysis/,Blank page paralysis,Firm-Employment-9253,2025-10-29 08:24:19,0,15,"Hey everyone, 
I hope you‚Äôre doing well, I don‚Äôt know if I‚Äôm the only one to endure this but every time I open a new script for a new project or just ...","Hey everyone, 
I hope you‚Äôre doing well, I don‚Äôt know if I‚Äôm the only one to endure this but every time I open a new script for a new project or just a simple script I feel a blank page paralysis not knowing where to start. Frequently I will check Claude just for the start then I continue on my own. So I wanna know if some of you experienced this and if so what have u done to make it better.
Thank you for your time !",2025-10-29T17:14:48.672523
1oiq0e4,https://www.reddit.com/r/Python/comments/1oiq0e4/i_made_2_helper_powershell_functions_for_uv/,I made 2 helper powershell functions for uv.,Ok_Sympathy_8561,2025-10-29 08:11:13,0,2,"Obviously this only works for windows. This one publishes to pypi using uv and makes a github release:

        function publish {
            param(
...","Obviously this only works for windows. This one publishes to pypi using uv and makes a github release:

        function publish {
            param(
                [string] $PyPIToken,
                [string] $GitHubToken,
                [string] $GitHubRepo  # e.g. ""Adpros7/easier-openai""
            )
        
            try {
                Write-Host ""Cleaning build directories..."" -ForegroundColor Yellow
                if (Test-Path ""dist"") { cmd /c rmdir /s /q dist }
                if (Test-Path ""build"") { cmd /c rmdir /s /q build }
        
                Write-Host ""Building package..."" -ForegroundColor Cyan
                uv build
                uv build --wheel
        
                Write-Host ""Publishing to PyPI..."" -ForegroundColor Green
                & cmd /c ""uv publish -t $PyPIToken""
        
                # ----------------------------------------
                # Extract version from pyproject.toml
                # ----------------------------------------
                $toml = Get-Content pyproject.toml -Raw
                if ($toml -match 'version\s*=\s*""(.*?)""') {
                    $ver = $Matches[1]
                } else {
                    throw ""Could not find version in pyproject.toml""
                }
        
                # Handle any version form: x, x.y, or x.y.z
                $parts = $ver.Split('.')
                $major = $parts[0]
                $tagName = ""v$major""
        
                Write-Host ""Version found: $ver (Tag: $tagName)"" -ForegroundColor Cyan
        
                # ----------------------------------------
                # Create/push Git tag
                # ----------------------------------------
                if (-not (git rev-parse --verify $tagName 2>$null)) {
                    Write-Host ""Creating git tag $tagName"" -ForegroundColor Yellow
                    git tag $tagName
                }
                Write-Host ""Pushing tag $tagName to origin..."" -ForegroundColor Yellow
                git push origin $tagName
        
                # ----------------------------------------
                # GitHub release
                # ----------------------------------------
                $env:GITHUB_TOKEN = $GitHubToken
                Write-Host ""Creating or updating GitHub release..."" -ForegroundColor Green
        
                # Create release if missing, else upload files
                $createCmd = ""gh release create $tagName dist/* --repo $GitHubRepo --title $tagName --notes 'Release $ver'""
                $uploadCmd = ""gh release upload $tagName dist/* --repo $GitHubRepo --clobber""
        
                # Run create first
                & cmd /c $createCmd
                if ($LASTEXITCODE -ne 0) {
                    Write-Host ""Release may already exist. Uploading assets..."" -ForegroundColor Yellow
                    & cmd /c $uploadCmd
                }
        
                Write-Host ""Done. Published $ver to PyPI and GitHub."" -ForegroundColor Green
            }
            catch {
                Write-Host ""Error: $_"" -ForegroundColor Red
            }
        }

This one adds packages to your venv from a `requirements.txt` or similar:

    function uvadd {
        param(
            [string]$f,
            [switch]$lock,
            [Parameter(ValueFromRemainingArguments = $true)]
            [string[]]$args
        )
    
        if (-not $f) {
            $f = if ($env:DEFAULT_UVADD_FILE) { 
                Write-Host ""Using DEFAULT_UVADD_FILE: $env:DEFAULT_UVADD_FILE"" -ForegroundColor Yellow
                $env:DEFAULT_UVADD_FILE
            } else {
                Write-Host ""Defaulting to requirements.txt"" -ForegroundColor Yellow
                ""requirements.txt""
            }
        }
    
        if (-not (Test-Path "".venv\Scripts\activate"")) {
            Write-Host ""No venv found. Creating..."" -ForegroundColor Yellow
            uv venv; if ($LASTEXITCODE -ne 0) { Write-Host ""uv venv failed"" -ForegroundColor Red; return }
            uv init;  if ($LASTEXITCODE -ne 0) { Write-Host ""uv init failed"" -ForegroundColor Red; return }
        }
    
        try { .\.venv\Scripts\activate } 
        catch { Write-Host ""Error activating venv: $($_.Exception.Message)"" -ForegroundColor Red; return }
    
        if (-not (Test-Path $f)) { Write-Host ""Missing $f"" -ForegroundColor Red; return }
        $requirements = Get-Content $f | Where-Object { $_ -and ($_ -notmatch ""^#"") }
        if (-not $requirements) { Write-Host ""$f is empty."" -ForegroundColor Red; return }
    
        if (-not (Test-Path ""pyproject.toml"")) {
            Write-Host ""Creating pyproject.toml"" -ForegroundColor Yellow
            @""
    [project]
    name = ""temp-project""
    version = ""0.1.0""
    authors = [{ name = ""Advik Mathur"", email = ""pranit.advik@gmail.com"" }]
    ""@ | Out-File ""pyproject.toml"" -Encoding utf8
        }
    
        Write-Host ""Syncing dependencies..."" -ForegroundColor Cyan
        $depsString = ($requirements | ForEach-Object { ""`""$_`"""" }) -join "", ""
        $depsLine = ""dependencies = [$depsString]""
    
        # Remove old dependencies block
        $content = Get-Content ""pyproject.toml"" -Raw
        $content = [regex]::Replace($content, '(?ms)^\s*dependencies\s*=\s*\[.*?\]\s*', '')
        $lines = $content -split ""`r?`n""
    
        # Insert at end of [project]
        $projStart = ($lines | Select-String '^\[project\]' | Select-Object -First 1)
        if ($projStart) {
            $projEnd = ($lines | Select-String '^\[' | Where-Object { $_.LineNumber -gt $projStart.LineNumber } | Select-Object -First 1)
            if ($projEnd) {
                $insertAt = $projEnd.LineNumber - 2
                $before = $lines[0..$insertAt]
                $after  = $lines[($insertAt + 1)..($lines.Count - 1)]
                $lines = @($before + $depsLine + $after)
            } else {
                $lines += $depsLine
            }
        } else {
            $lines += ""[project]""
            $lines += $depsLine
        }
    
        try {
            $lines | Set-Content ""pyproject.toml"" -Encoding utf8
            Write-Host ""pyproject.toml updated successfully."" -ForegroundColor Green
        } catch {
            Write-Host ""Failed to write pyproject.toml: $($_.Exception.Message)"" -ForegroundColor Red
            return
        }
    
        Write-Host ""Running: uv add -r $f $args"" -ForegroundColor Magenta
        uv add -r $f @args
        if ($LASTEXITCODE -ne 0) {
            Write-Host ""uv add failed ($LASTEXITCODE)"" -ForegroundColor Red
            return
        }
    
        # Delete lockfile unless --lock flag present
        if (-not $lock.IsPresent) {
            if (Test-Path ""uv.lock"") {
                Remove-Item ""uv.lock"" -Force
                Write-Host ""uv.lock deleted (use --lock to keep it)"" -ForegroundColor DarkGray
            }
        } else {
            Write-Host ""Keeping uv.lock file (--lock specified)"" -ForegroundColor Yellow
        }
    
        Write-Host ""All dependencies added successfully."" -ForegroundColor Green
    }

to have this run `notepad $PROFILE`, then paste this in, save, and restart your terminal",2025-10-29T17:14:48.672545
1oio83q,https://www.reddit.com/r/Python/comments/1oio83q/i_made_a_youtube_to_mp4_converter/,I made a YouTube to mp4 Converter!,Intrepid-Carpet-3005,2025-10-29 06:55:54,0,1,Here is the link to my repo. [https://github.com/Coolythecoder/Youtube-to-mp4](https://github.com/Coolythecoder/Youtube-to-mp4),Here is the link to my repo. [https://github.com/Coolythecoder/Youtube-to-mp4](https://github.com/Coolythecoder/Youtube-to-mp4),2025-10-29T17:14:48.672781
1oilkc1,https://www.reddit.com/r/Python/comments/1oilkc1/the_http_caching_python_deserves/,The HTTP caching Python deserves,karosis88,2025-10-29 05:09:35,29,10,"# What My Project Does

[Hishel](https://hishel.com/1.0/) is an HTTP caching toolkit for python, which includes **sans-io** caching implementation, **...","# What My Project Does

[Hishel](https://hishel.com/1.0/) is an HTTP caching toolkit for python, which includes **sans-io** caching implementation, **storages** for effectively storing request/response for later use, and integration with your lovely HTTP tool in python such as HTTPX, requests, fastapi, asgi (for any asgi based library), graphql and more!!

Hishel uses **persistent storage** by default, so your cached responses survive program restarts.

After **2 years** and over **63 MILLION pip installs**, I released the first major version with tons of new features to simplify caching.

‚ú® Help Hishel grow! Give us a [star on GitHub](https://github.com/karpetrosyan/hishel) if you found it useful. ‚ú®

# Use Cases:

HTTP response caching is something you can use **almost everywhere** to:

* Improve the performance of your program
* Work without an internet connection (offline mode)
* Save money and stop wasting API calls‚Äîmake a single request and reuse it many times!
* Work even when your upstream server goes down
* Avoid unnecessary downloads when content hasn't changed (what I call ""free caching""‚Äîit's completely free and can be configured to always serve the freshest data without re-downloading if nothing changed, like the browser's 304 Not Modified response)

# QuickStart

First, download and install Hishel using pip:

pip: `pip install ""hishel[httpx, requests, fastapi, async]""==1.0.0`

We've installed several integrations just for demonstration‚Äîyou most likely won't need them all.

    from hishel.httpx import SyncCacheClient
    
    client = SyncCacheClient()
    
    # On first run of the program, this will store the response in the cache
    # On second run, it will retrieve it from the cache
    response = client.get(""https://hishel.com/"")
    
    
    print(response.extensions[""hishel_from_cache""])  # Additional info about the cache statusfrom hishel.httpx import SyncCacheClient
    
    client = SyncCacheClient()
    
    
    # On first run of the program, this will store the response in the cache
    # On second run, it will retrieve it from the cache
    response = client.get(""https://hishel.com/"")
    
    
    print(response.extensions[""hishel_from_cache""])  # Additional info about the cache status

or with requests:

    import requests
    from hishel.requests import CacheAdapter
    
    session = requests.Session()
    
    adapter = CacheAdapter()
    session.mount(""http://"", adapter)
    session.mount(""https://"", adapter)
    
    response = session.get(""https://hishel.com/"")
    
    print(response.headers[""x-hishel-from-cache""])

or with fastapi:

    from hishel.asgi import ASGICacheMiddleware
    from hishel.fastapi import cache
    
    app = FastAPI()
    
    processed_requests = 0
    
    .get(""/items/"", dependencies=[cache(max_age=5)])
    async def read_item():
        global processed_requests
        processed_requests += 1
        return {""created_at"": time.time(), ""processed_requests"": processed_requests}
    
    cached_app = ASGICacheMiddleware(app)

As mentioned before, Hishel has a core system that is entirely independent from any HTTP library, making it easy to integrate with any HTTP client you prefer.

# Caching Policies

**SpecificationPolicy** \- RFC 9111 compliant HTTP caching (default):

    from hishel import CacheOptions, SpecificationPolicy
    from hishel.httpx import SyncCacheClient
    
    client = SyncCacheClient(
        policy=SpecificationPolicy(
            cache_options=CacheOptions(
                shared=False,                              # Use as private cache (browser-like)
                supported_methods=[""GET"", ""HEAD"", ""POST""], # Cache GET, HEAD, and POST
                allow_stale=True                           # Allow serving stale responses
            )
        )
    )

**FilterPolicy** \- Custom filtering logic for fine-grained control:

    from hishel import FilterPolicy, BaseFilter, Request
    from hishel.httpx import AsyncCacheClient
    
    class CacheOnlyAPIRequests(BaseFilter[Request]):
        def needs_body(self) -> bool:
            return False
        
        def apply(self, item: Request, body: bytes | None) -> bool:
            return ""/api/"" in str(item.url)
    
    client = AsyncCacheClient(
        policy=FilterPolicy(
            request_filters=[CacheOnlyAPIRequests()] # also filter by body, status and etc.
        )
    )

# Storage Backend

Customize the storage backend behavior, set up global TTL (**note that TTL and most settings can also be configured at the per-request level**), choose whether to refresh TTL on access, and much more!

    from hishel import SyncSqliteStorage
    from hishel.httpx import SyncCacheClient
    
    storage = SyncSqliteStorage(
        database_path=""my_cache.db"",
        default_ttl=7200.0,           # Cache entries expire after 2 hours
        refresh_ttl_on_access=True    # Reset TTL when accessing cached entries
    )
    
    client = SyncCacheClient(storage=storage)

# Per-request settings

    from hishel.httpx import SyncCacheClient
    
    
    client = SyncCacheClient()
    
    client.get(
        ""https://hishel.com/"",
        headers={
            ""x-hishel-ttl"": ""3600"",  # invalidates cache after 1 hour, even if server says otherwise
        },
    )
    
    client.post(
        ""https://some-graphql-endpoint.com/"",
        json={""query"": ""{ users { id name } }""},
        headers={""x-hishel-body-key""},  # Include body in cache key
    )
    
    client.get(
        ""https://hishel.com/"", 
        headers={""x-hishel-refresh-ttl-on-access"": ""0""}  # do not refresh TTL on access
    )

# Target Audience

**Backend Developers** \- Building APIs with FastAPI/Django, making repeated HTTP requests to external APIs

**Data Engineers** \- Running ETL pipelines and batch jobs, fetching same data across multiple runs

**CLI Tool Builders** \- Creating command-line tools, need instant responses and offline support

**Web Scrapers** \- Building content crawlers, respect rate limits and need offline testing

**API Library Maintainers** \- Wrapping external APIs (GitHub, Stripe, OpenAI), need transparent caching

**GraphQL Developers** \- Need per-query caching with body-sensitive keys

**Also great for:** DevOps teams, performance-focused companies, enterprise users needing RFC 9111 compliance

‚≠ê GitHub: [https://github.com/karpetrosyan/hishelWhat](https://github.com/karpetrosyan/hishelWhat)",2025-10-29T17:14:48.672795
1oihp4r,https://www.reddit.com/r/Python/comments/1oihp4r/plt_is_the_new_matplotlibpyplot/,plt is the new matplotlib.pyplot,borabimbu,2025-10-29 02:42:27,0,19,"If you're bored of typing:

    import matplotlib.pyplot as plt

Simply:

    pip install plt

Then you can just:

    import plt

Then use normally, ...","If you're bored of typing:

    import matplotlib.pyplot as plt

Simply:

    pip install plt

Then you can just:

    import plt

Then use normally, e.g.:

    plt.plot([1, 2, 3], [1, 4, 9])
    plt.show()

[https://pypi.org/project/plt/](https://pypi.org/project/plt/)  
[https://github.com/simbamford/plt](https://github.com/simbamford/plt)

* **What My Project Does**

It's a shim for matplotlib.pyplot that exports all contents of matplotlib.pyplot.

* **Target Audience**

Anyone who uses matplotlib.pyplot. It could be used in production.

* **Comparison**¬†

The state of the art is to type:

    import matplotlib.pyplot as plt

With this project you just:

    import plt

When you're 95, use your less arthritic fingers to type me a thank you.",2025-10-29T17:14:48.672868
1oigffx,https://www.reddit.com/r/Python/comments/1oigffx/what_is_the_best_computer_or_programming_language/,What is the best computer or programming language to learn the basics then the more advanced stuff?,Tom-CyberBio-1968,2025-10-29 01:55:09,0,21,I have been studying basic programming for years and kind of get the basics if else etc. Still a bit stuck on a lot of the more advanced stuff. As for...,I have been studying basic programming for years and kind of get the basics if else etc. Still a bit stuck on a lot of the more advanced stuff. As for usage I would like to learn basic app programming such as making GUI programs etc. Not thinking of programming games right away but long term goals say in years I might want to give that a try. I would really like to get the skills to make something like a low resource Linux desktop or components of such. I really want to learn C++ but heard Python is easier to learn. What would you recommend?,2025-10-29T17:14:48.672930
1oig9i0,https://www.reddit.com/r/Python/comments/1oig9i0/gvit_automatic_python_virtual_environment_setup/,gvit - Automatic Python virtual environment setup for every Git repo,Candid-Handle4074,2025-10-29 01:49:02,0,20,"Hey r/Python! üëã

I got tired of doing this every time I cloned a repo:

    git clone repo
    cd repo
    python -m venv .venv
    source .venv/bin/a...","Hey r/Python! üëã

I got tired of doing this every time I cloned a repo:

    git clone repo
    cd repo
    python -m venv .venv
    source .venv/bin/activate
    pip install -r requirements.txt

So I built **gvit** to do it automatically:

`gvit clone repo`

That's it. Environment created, dependencies installed, ready to code. But **gvit** is much more than this!

**What it does?**

* **‚úÖ** Automatically creates environments¬†(and install dependencies) when cloning or initializing repositories.
* **üêç** Centralizes all your virtual environments, regardless of the backend (currently supports **venv**, **virtualenv**, and **conda**.).
* **üóÇÔ∏è** Tracks environments in a registry (\~/.config/gvit/envs/).
* **üîÑ** Auto-detects and reinstalls changed dependencies on `gvit pull`.
* **üßπ** Cleans up orphaned environments with `gvit envs prune`.

**Why I built it?**

>*One repo, its own environment ‚Äî without thinking about it.*

I switch between projects constantly and waste time on the same setup steps. I also mix up environments sometimes and projects just don't run.

Wanted something that ""just works"" like `git clone` but for the full environment.

**The repository is the source of truth. Your environment stays synced.**

**Example workflow**

    # Clone and setup in one command
    gvit clone https://github.com/user/project.git
    
    # Pull changes and auto-sync dependencies
    cd project
    gvit pull
    
    # Manage tracked environments
    gvit envs list
    gvit envs prune  # Clean orphaned envs

**Installation**

    pipx install gvit
    # or
    pip install gvit

**Links**

* GitHub: [https://github.com/jaimemartinagui/gvit](https://github.com/jaimemartinagui/gvit)
* PyPI: [https://pypi.org/project/gvit/](https://pypi.org/project/gvit/)

Open to feedback!",2025-10-29T17:14:48.672943
1oidpl8,https://www.reddit.com/r/Python/comments/1oidpl8/introducing_kanchi_free_open_source_celery/,Introducing Kanchi - Free Open Source Celery Monitoring,imczyber,2025-10-29 00:15:15,43,9,"I just shipped https://kanchi.io - a free open source celery monitoring tool (https://github.com/getkanchi/kanchi)

**What does it do**

Previously, I...","I just shipped https://kanchi.io - a free open source celery monitoring tool (https://github.com/getkanchi/kanchi)

**What does it do**

Previously, I used flower, which most of you probably know. And it worked fine. It lacked some features like Slack webhook integration, retries, orphan detection, and a live mode.

I also wanted a polished, modern look and feel with additional UX enhancements like retrying tasks, hierarchical args and kwargs visualization, and some basic stats about our tasks.

It also stores task metadata in a Postgres (or SQLite) database, so you have historical data even if you restart the instance. It‚Äôs still in an early state.

**Comparison to alternatives**

Just like flower, Kanchi is free and open source. You can self-host it on your infra and it‚Äôs easy to setup via docker.

Unlike flower, it supports realtime task updates, has a workflow engine (where you can configure triggers, conditions and actions), has a great searching and filtering functionality, supports environment filtering (prod, staging etc) and retrying tasks manually. It has built in orphan task detection and comes with basic stats

**Target Audience**

Since by itself, it is just reading data from your message broker - and it‚Äôs working reliably, Kanchi can be used in production.

The next few releases will further target robustness and UX work.‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã

If anyone is looking for a new celery monitoring experience, this is for you! I‚Äôm happy about bug reports and general feedback!",2025-10-29T17:14:48.672968
1oiwxt5,https://www.reddit.com/r/Python/comments/1oiwxt5/why_doesnt_forloop_have_its_own_scope/,Why doesn't for-loop have it's own scope?,FUS3N,2025-10-29 14:08:00,16,94,"For the longest time I didn't know this but finally decided to ask, I get this is a thing and probably has been asked a lot but i genuinely want to kn...","For the longest time I didn't know this but finally decided to ask, I get this is a thing and probably has been asked a lot but i genuinely want to know... why? What gain is there other than convenience in certain situations, i feel like this could cause more issue than anything even though i can't name them all right now.

I am also designing a language that works very similarly how python works, so maybe i get to learn something here.",2025-10-29T17:14:49.137676
1oiufp2,https://www.reddit.com/r/Python/comments/1oiufp2/a_new_easy_way_on_windows_to_pip_install_gdal_and/,A new easy way on Windows to pip install GDAL and other tricky geospatial Python packages,pvdp-corbel,2025-10-29 11:41:59,3,0,"# What My Project Does

[geospatial-wheels-index](https://github.com/corbel-spatial/geospatial-wheels-index) is a pip-compatible 
[simple](https://pac...","# What My Project Does

[geospatial-wheels-index](https://github.com/corbel-spatial/geospatial-wheels-index) is a pip-compatible 
[simple](https://packaging.python.org/en/latest/specifications/simple-repository-api/) index for the [cgohlke/geospatial-wheels](https://github.com/cgohlke/geospatial-wheels) repository. It's just a few static html files served on GitHub Pages, and all the .whl files are pulled directly from `cgohlke/geospatial-wheels`. All you need to do is add an `index` flag:

```
pip install --index https://gisidx.github.io/gwi gdal
```

In addition to GDAL, this index points to the other prebuilt packages in `geospatial-wheels`: cartopy, cftime, fiona, h5py, netcdf4, pygeos, pyogrio, pyproj, rasterio, rtree, and shapely.

Contributions are welcome!

# Target Audience

Mostly folks who straddle the traditional GIS and the developer/data science worlds, the people who would love to run Linux but are stuck on Windows for one reason or another. 

For myself, I'm tired of dealing with the lack of an easy way to install the GDAL binaries on Windows so that I can `pip install gdal`, especially in a `uv` virtual environment or a CI/CD context where using `conda` can be a headache.

# Comparison

Often you'll have to build these packages from source or rely on `conda` or another add-on package manager. For example, the official GDAL docs suggest [various ways](https://gdal.org/en/stable/download.html#windows) to install the binaries. This is often not possible or requires extra work.

The esteemed Christoph Gohlke has been providing prebuilt wheels for GDAL and other packages for a long time, and currently they can be found at his repository, [geospatial-wheels](https://github.com/cgohlke/geospatial-wheels). Awesome! But you have to manually find the one that matches your environment, download it somewhere, and then `pip install` the file... Still pretty annoying and difficult to automate. This index project simplifies the process down to the easy and portable `pip install`.

This project was partly inspired by [gdal-installer](https://pypi.org/project/gdal-installer/) which is also worth checking out.",2025-10-29T17:14:49.137722
1oiqata,https://www.reddit.com/r/Python/comments/1oiqata/blank_page_paralysis/,Blank page paralysis,Firm-Employment-9253,2025-10-29 08:24:19,0,15,"Hey everyone, 
I hope you‚Äôre doing well, I don‚Äôt know if I‚Äôm the only one to endure this but every time I open a new script for a new project or just ...","Hey everyone, 
I hope you‚Äôre doing well, I don‚Äôt know if I‚Äôm the only one to endure this but every time I open a new script for a new project or just a simple script I feel a blank page paralysis not knowing where to start. Frequently I will check Claude just for the start then I continue on my own. So I wanna know if some of you experienced this and if so what have u done to make it better.
Thank you for your time !",2025-10-29T17:14:49.137772
1oiq0e4,https://www.reddit.com/r/Python/comments/1oiq0e4/i_made_2_helper_powershell_functions_for_uv/,I made 2 helper powershell functions for uv.,Ok_Sympathy_8561,2025-10-29 08:11:13,0,2,"Obviously this only works for windows. This one publishes to pypi using uv and makes a github release:

        function publish {
            param(
...","Obviously this only works for windows. This one publishes to pypi using uv and makes a github release:

        function publish {
            param(
                [string] $PyPIToken,
                [string] $GitHubToken,
                [string] $GitHubRepo  # e.g. ""Adpros7/easier-openai""
            )
        
            try {
                Write-Host ""Cleaning build directories..."" -ForegroundColor Yellow
                if (Test-Path ""dist"") { cmd /c rmdir /s /q dist }
                if (Test-Path ""build"") { cmd /c rmdir /s /q build }
        
                Write-Host ""Building package..."" -ForegroundColor Cyan
                uv build
                uv build --wheel
        
                Write-Host ""Publishing to PyPI..."" -ForegroundColor Green
                & cmd /c ""uv publish -t $PyPIToken""
        
                # ----------------------------------------
                # Extract version from pyproject.toml
                # ----------------------------------------
                $toml = Get-Content pyproject.toml -Raw
                if ($toml -match 'version\s*=\s*""(.*?)""') {
                    $ver = $Matches[1]
                } else {
                    throw ""Could not find version in pyproject.toml""
                }
        
                # Handle any version form: x, x.y, or x.y.z
                $parts = $ver.Split('.')
                $major = $parts[0]
                $tagName = ""v$major""
        
                Write-Host ""Version found: $ver (Tag: $tagName)"" -ForegroundColor Cyan
        
                # ----------------------------------------
                # Create/push Git tag
                # ----------------------------------------
                if (-not (git rev-parse --verify $tagName 2>$null)) {
                    Write-Host ""Creating git tag $tagName"" -ForegroundColor Yellow
                    git tag $tagName
                }
                Write-Host ""Pushing tag $tagName to origin..."" -ForegroundColor Yellow
                git push origin $tagName
        
                # ----------------------------------------
                # GitHub release
                # ----------------------------------------
                $env:GITHUB_TOKEN = $GitHubToken
                Write-Host ""Creating or updating GitHub release..."" -ForegroundColor Green
        
                # Create release if missing, else upload files
                $createCmd = ""gh release create $tagName dist/* --repo $GitHubRepo --title $tagName --notes 'Release $ver'""
                $uploadCmd = ""gh release upload $tagName dist/* --repo $GitHubRepo --clobber""
        
                # Run create first
                & cmd /c $createCmd
                if ($LASTEXITCODE -ne 0) {
                    Write-Host ""Release may already exist. Uploading assets..."" -ForegroundColor Yellow
                    & cmd /c $uploadCmd
                }
        
                Write-Host ""Done. Published $ver to PyPI and GitHub."" -ForegroundColor Green
            }
            catch {
                Write-Host ""Error: $_"" -ForegroundColor Red
            }
        }

This one adds packages to your venv from a `requirements.txt` or similar:

    function uvadd {
        param(
            [string]$f,
            [switch]$lock,
            [Parameter(ValueFromRemainingArguments = $true)]
            [string[]]$args
        )
    
        if (-not $f) {
            $f = if ($env:DEFAULT_UVADD_FILE) { 
                Write-Host ""Using DEFAULT_UVADD_FILE: $env:DEFAULT_UVADD_FILE"" -ForegroundColor Yellow
                $env:DEFAULT_UVADD_FILE
            } else {
                Write-Host ""Defaulting to requirements.txt"" -ForegroundColor Yellow
                ""requirements.txt""
            }
        }
    
        if (-not (Test-Path "".venv\Scripts\activate"")) {
            Write-Host ""No venv found. Creating..."" -ForegroundColor Yellow
            uv venv; if ($LASTEXITCODE -ne 0) { Write-Host ""uv venv failed"" -ForegroundColor Red; return }
            uv init;  if ($LASTEXITCODE -ne 0) { Write-Host ""uv init failed"" -ForegroundColor Red; return }
        }
    
        try { .\.venv\Scripts\activate } 
        catch { Write-Host ""Error activating venv: $($_.Exception.Message)"" -ForegroundColor Red; return }
    
        if (-not (Test-Path $f)) { Write-Host ""Missing $f"" -ForegroundColor Red; return }
        $requirements = Get-Content $f | Where-Object { $_ -and ($_ -notmatch ""^#"") }
        if (-not $requirements) { Write-Host ""$f is empty."" -ForegroundColor Red; return }
    
        if (-not (Test-Path ""pyproject.toml"")) {
            Write-Host ""Creating pyproject.toml"" -ForegroundColor Yellow
            @""
    [project]
    name = ""temp-project""
    version = ""0.1.0""
    authors = [{ name = ""Advik Mathur"", email = ""pranit.advik@gmail.com"" }]
    ""@ | Out-File ""pyproject.toml"" -Encoding utf8
        }
    
        Write-Host ""Syncing dependencies..."" -ForegroundColor Cyan
        $depsString = ($requirements | ForEach-Object { ""`""$_`"""" }) -join "", ""
        $depsLine = ""dependencies = [$depsString]""
    
        # Remove old dependencies block
        $content = Get-Content ""pyproject.toml"" -Raw
        $content = [regex]::Replace($content, '(?ms)^\s*dependencies\s*=\s*\[.*?\]\s*', '')
        $lines = $content -split ""`r?`n""
    
        # Insert at end of [project]
        $projStart = ($lines | Select-String '^\[project\]' | Select-Object -First 1)
        if ($projStart) {
            $projEnd = ($lines | Select-String '^\[' | Where-Object { $_.LineNumber -gt $projStart.LineNumber } | Select-Object -First 1)
            if ($projEnd) {
                $insertAt = $projEnd.LineNumber - 2
                $before = $lines[0..$insertAt]
                $after  = $lines[($insertAt + 1)..($lines.Count - 1)]
                $lines = @($before + $depsLine + $after)
            } else {
                $lines += $depsLine
            }
        } else {
            $lines += ""[project]""
            $lines += $depsLine
        }
    
        try {
            $lines | Set-Content ""pyproject.toml"" -Encoding utf8
            Write-Host ""pyproject.toml updated successfully."" -ForegroundColor Green
        } catch {
            Write-Host ""Failed to write pyproject.toml: $($_.Exception.Message)"" -ForegroundColor Red
            return
        }
    
        Write-Host ""Running: uv add -r $f $args"" -ForegroundColor Magenta
        uv add -r $f @args
        if ($LASTEXITCODE -ne 0) {
            Write-Host ""uv add failed ($LASTEXITCODE)"" -ForegroundColor Red
            return
        }
    
        # Delete lockfile unless --lock flag present
        if (-not $lock.IsPresent) {
            if (Test-Path ""uv.lock"") {
                Remove-Item ""uv.lock"" -Force
                Write-Host ""uv.lock deleted (use --lock to keep it)"" -ForegroundColor DarkGray
            }
        } else {
            Write-Host ""Keeping uv.lock file (--lock specified)"" -ForegroundColor Yellow
        }
    
        Write-Host ""All dependencies added successfully."" -ForegroundColor Green
    }

to have this run `notepad $PROFILE`, then paste this in, save, and restart your terminal",2025-10-29T17:14:49.137796
1oio83q,https://www.reddit.com/r/Python/comments/1oio83q/i_made_a_youtube_to_mp4_converter/,I made a YouTube to mp4 Converter!,Intrepid-Carpet-3005,2025-10-29 06:55:54,0,1,Here is the link to my repo. [https://github.com/Coolythecoder/Youtube-to-mp4](https://github.com/Coolythecoder/Youtube-to-mp4),Here is the link to my repo. [https://github.com/Coolythecoder/Youtube-to-mp4](https://github.com/Coolythecoder/Youtube-to-mp4),2025-10-29T17:14:49.138032
1oilkc1,https://www.reddit.com/r/Python/comments/1oilkc1/the_http_caching_python_deserves/,The HTTP caching Python deserves,karosis88,2025-10-29 05:09:35,30,10,"# What My Project Does

[Hishel](https://hishel.com/1.0/) is an HTTP caching toolkit for python, which includes **sans-io** caching implementation, **...","# What My Project Does

[Hishel](https://hishel.com/1.0/) is an HTTP caching toolkit for python, which includes **sans-io** caching implementation, **storages** for effectively storing request/response for later use, and integration with your lovely HTTP tool in python such as HTTPX, requests, fastapi, asgi (for any asgi based library), graphql and more!!

Hishel uses **persistent storage** by default, so your cached responses survive program restarts.

After **2 years** and over **63 MILLION pip installs**, I released the first major version with tons of new features to simplify caching.

‚ú® Help Hishel grow! Give us a [star on GitHub](https://github.com/karpetrosyan/hishel) if you found it useful. ‚ú®

# Use Cases:

HTTP response caching is something you can use **almost everywhere** to:

* Improve the performance of your program
* Work without an internet connection (offline mode)
* Save money and stop wasting API calls‚Äîmake a single request and reuse it many times!
* Work even when your upstream server goes down
* Avoid unnecessary downloads when content hasn't changed (what I call ""free caching""‚Äîit's completely free and can be configured to always serve the freshest data without re-downloading if nothing changed, like the browser's 304 Not Modified response)

# QuickStart

First, download and install Hishel using pip:

pip: `pip install ""hishel[httpx, requests, fastapi, async]""==1.0.0`

We've installed several integrations just for demonstration‚Äîyou most likely won't need them all.

    from hishel.httpx import SyncCacheClient
    
    client = SyncCacheClient()
    
    # On first run of the program, this will store the response in the cache
    # On second run, it will retrieve it from the cache
    response = client.get(""https://hishel.com/"")
    
    
    print(response.extensions[""hishel_from_cache""])  # Additional info about the cache statusfrom hishel.httpx import SyncCacheClient
    
    client = SyncCacheClient()
    
    
    # On first run of the program, this will store the response in the cache
    # On second run, it will retrieve it from the cache
    response = client.get(""https://hishel.com/"")
    
    
    print(response.extensions[""hishel_from_cache""])  # Additional info about the cache status

or with requests:

    import requests
    from hishel.requests import CacheAdapter
    
    session = requests.Session()
    
    adapter = CacheAdapter()
    session.mount(""http://"", adapter)
    session.mount(""https://"", adapter)
    
    response = session.get(""https://hishel.com/"")
    
    print(response.headers[""x-hishel-from-cache""])

or with fastapi:

    from hishel.asgi import ASGICacheMiddleware
    from hishel.fastapi import cache
    
    app = FastAPI()
    
    processed_requests = 0
    
    .get(""/items/"", dependencies=[cache(max_age=5)])
    async def read_item():
        global processed_requests
        processed_requests += 1
        return {""created_at"": time.time(), ""processed_requests"": processed_requests}
    
    cached_app = ASGICacheMiddleware(app)

As mentioned before, Hishel has a core system that is entirely independent from any HTTP library, making it easy to integrate with any HTTP client you prefer.

# Caching Policies

**SpecificationPolicy** \- RFC 9111 compliant HTTP caching (default):

    from hishel import CacheOptions, SpecificationPolicy
    from hishel.httpx import SyncCacheClient
    
    client = SyncCacheClient(
        policy=SpecificationPolicy(
            cache_options=CacheOptions(
                shared=False,                              # Use as private cache (browser-like)
                supported_methods=[""GET"", ""HEAD"", ""POST""], # Cache GET, HEAD, and POST
                allow_stale=True                           # Allow serving stale responses
            )
        )
    )

**FilterPolicy** \- Custom filtering logic for fine-grained control:

    from hishel import FilterPolicy, BaseFilter, Request
    from hishel.httpx import AsyncCacheClient
    
    class CacheOnlyAPIRequests(BaseFilter[Request]):
        def needs_body(self) -> bool:
            return False
        
        def apply(self, item: Request, body: bytes | None) -> bool:
            return ""/api/"" in str(item.url)
    
    client = AsyncCacheClient(
        policy=FilterPolicy(
            request_filters=[CacheOnlyAPIRequests()] # also filter by body, status and etc.
        )
    )

# Storage Backend

Customize the storage backend behavior, set up global TTL (**note that TTL and most settings can also be configured at the per-request level**), choose whether to refresh TTL on access, and much more!

    from hishel import SyncSqliteStorage
    from hishel.httpx import SyncCacheClient
    
    storage = SyncSqliteStorage(
        database_path=""my_cache.db"",
        default_ttl=7200.0,           # Cache entries expire after 2 hours
        refresh_ttl_on_access=True    # Reset TTL when accessing cached entries
    )
    
    client = SyncCacheClient(storage=storage)

# Per-request settings

    from hishel.httpx import SyncCacheClient
    
    
    client = SyncCacheClient()
    
    client.get(
        ""https://hishel.com/"",
        headers={
            ""x-hishel-ttl"": ""3600"",  # invalidates cache after 1 hour, even if server says otherwise
        },
    )
    
    client.post(
        ""https://some-graphql-endpoint.com/"",
        json={""query"": ""{ users { id name } }""},
        headers={""x-hishel-body-key""},  # Include body in cache key
    )
    
    client.get(
        ""https://hishel.com/"", 
        headers={""x-hishel-refresh-ttl-on-access"": ""0""}  # do not refresh TTL on access
    )

# Target Audience

**Backend Developers** \- Building APIs with FastAPI/Django, making repeated HTTP requests to external APIs

**Data Engineers** \- Running ETL pipelines and batch jobs, fetching same data across multiple runs

**CLI Tool Builders** \- Creating command-line tools, need instant responses and offline support

**Web Scrapers** \- Building content crawlers, respect rate limits and need offline testing

**API Library Maintainers** \- Wrapping external APIs (GitHub, Stripe, OpenAI), need transparent caching

**GraphQL Developers** \- Need per-query caching with body-sensitive keys

**Also great for:** DevOps teams, performance-focused companies, enterprise users needing RFC 9111 compliance

‚≠ê GitHub: [https://github.com/karpetrosyan/hishelWhat](https://github.com/karpetrosyan/hishelWhat)",2025-10-29T17:14:49.138051
1oihp4r,https://www.reddit.com/r/Python/comments/1oihp4r/plt_is_the_new_matplotlibpyplot/,plt is the new matplotlib.pyplot,borabimbu,2025-10-29 02:42:27,0,19,"If you're bored of typing:

    import matplotlib.pyplot as plt

Simply:

    pip install plt

Then you can just:

    import plt

Then use normally, ...","If you're bored of typing:

    import matplotlib.pyplot as plt

Simply:

    pip install plt

Then you can just:

    import plt

Then use normally, e.g.:

    plt.plot([1, 2, 3], [1, 4, 9])
    plt.show()

[https://pypi.org/project/plt/](https://pypi.org/project/plt/)  
[https://github.com/simbamford/plt](https://github.com/simbamford/plt)

* **What My Project Does**

It's a shim for matplotlib.pyplot that exports all contents of matplotlib.pyplot.

* **Target Audience**

Anyone who uses matplotlib.pyplot. It could be used in production.

* **Comparison**¬†

The state of the art is to type:

    import matplotlib.pyplot as plt

With this project you just:

    import plt

When you're 95, use your less arthritic fingers to type me a thank you.",2025-10-29T17:14:49.138175
1oigffx,https://www.reddit.com/r/Python/comments/1oigffx/what_is_the_best_computer_or_programming_language/,What is the best computer or programming language to learn the basics then the more advanced stuff?,Tom-CyberBio-1968,2025-10-29 01:55:09,0,21,I have been studying basic programming for years and kind of get the basics if else etc. Still a bit stuck on a lot of the more advanced stuff. As for...,I have been studying basic programming for years and kind of get the basics if else etc. Still a bit stuck on a lot of the more advanced stuff. As for usage I would like to learn basic app programming such as making GUI programs etc. Not thinking of programming games right away but long term goals say in years I might want to give that a try. I would really like to get the skills to make something like a low resource Linux desktop or components of such. I really want to learn C++ but heard Python is easier to learn. What would you recommend?,2025-10-29T17:14:49.138264
1oig9i0,https://www.reddit.com/r/Python/comments/1oig9i0/gvit_automatic_python_virtual_environment_setup/,gvit - Automatic Python virtual environment setup for every Git repo,Candid-Handle4074,2025-10-29 01:49:02,0,20,"Hey r/Python! üëã

I got tired of doing this every time I cloned a repo:

    git clone repo
    cd repo
    python -m venv .venv
    source .venv/bin/a...","Hey r/Python! üëã

I got tired of doing this every time I cloned a repo:

    git clone repo
    cd repo
    python -m venv .venv
    source .venv/bin/activate
    pip install -r requirements.txt

So I built **gvit** to do it automatically:

`gvit clone repo`

That's it. Environment created, dependencies installed, ready to code. But **gvit** is much more than this!

**What it does?**

* **‚úÖ** Automatically creates environments¬†(and install dependencies) when cloning or initializing repositories.
* **üêç** Centralizes all your virtual environments, regardless of the backend (currently supports **venv**, **virtualenv**, and **conda**.).
* **üóÇÔ∏è** Tracks environments in a registry (\~/.config/gvit/envs/).
* **üîÑ** Auto-detects and reinstalls changed dependencies on `gvit pull`.
* **üßπ** Cleans up orphaned environments with `gvit envs prune`.

**Why I built it?**

>*One repo, its own environment ‚Äî without thinking about it.*

I switch between projects constantly and waste time on the same setup steps. I also mix up environments sometimes and projects just don't run.

Wanted something that ""just works"" like `git clone` but for the full environment.

**The repository is the source of truth. Your environment stays synced.**

**Example workflow**

    # Clone and setup in one command
    gvit clone https://github.com/user/project.git
    
    # Pull changes and auto-sync dependencies
    cd project
    gvit pull
    
    # Manage tracked environments
    gvit envs list
    gvit envs prune  # Clean orphaned envs

**Installation**

    pipx install gvit
    # or
    pip install gvit

**Links**

* GitHub: [https://github.com/jaimemartinagui/gvit](https://github.com/jaimemartinagui/gvit)
* PyPI: [https://pypi.org/project/gvit/](https://pypi.org/project/gvit/)

Open to feedback!",2025-10-29T17:14:49.138285
1oidpl8,https://www.reddit.com/r/Python/comments/1oidpl8/introducing_kanchi_free_open_source_celery/,Introducing Kanchi - Free Open Source Celery Monitoring,imczyber,2025-10-29 00:15:15,46,9,"I just shipped https://kanchi.io - a free open source celery monitoring tool (https://github.com/getkanchi/kanchi)

**What does it do**

Previously, I...","I just shipped https://kanchi.io - a free open source celery monitoring tool (https://github.com/getkanchi/kanchi)

**What does it do**

Previously, I used flower, which most of you probably know. And it worked fine. It lacked some features like Slack webhook integration, retries, orphan detection, and a live mode.

I also wanted a polished, modern look and feel with additional UX enhancements like retrying tasks, hierarchical args and kwargs visualization, and some basic stats about our tasks.

It also stores task metadata in a Postgres (or SQLite) database, so you have historical data even if you restart the instance. It‚Äôs still in an early state.

**Comparison to alternatives**

Just like flower, Kanchi is free and open source. You can self-host it on your infra and it‚Äôs easy to setup via docker.

Unlike flower, it supports realtime task updates, has a workflow engine (where you can configure triggers, conditions and actions), has a great searching and filtering functionality, supports environment filtering (prod, staging etc) and retrying tasks manually. It has built in orphan task detection and comes with basic stats

**Target Audience**

Since by itself, it is just reading data from your message broker - and it‚Äôs working reliably, Kanchi can be used in production.

The next few releases will further target robustness and UX work.‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã

If anyone is looking for a new celery monitoring experience, this is for you! I‚Äôm happy about bug reports and general feedback!",2025-10-29T17:14:49.138329
